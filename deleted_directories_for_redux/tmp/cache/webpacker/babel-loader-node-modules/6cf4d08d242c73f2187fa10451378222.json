{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports[\"default\"] = function (hierarchy, state, validateSelector) {\n  var elm = hierarchy[0];\n  var tag = elm.el.nodeName;\n\n  if (handlers[tag]) {\n    state = handlers[tag](state, elm);\n\n    if (validateSelector(state)) {\n      // the unique attribute worked!\n      state.verified = true;\n    } else {\n      // turns out our so called unique attribute isn't as unique as we thought,\n      // we'll remove it to keep the selector's noise level down\n      state.stack[0].pop();\n    }\n  }\n\n  return state;\n};\n\nvar handlers = {\n  A: function A(state, elm) {\n    var attribute = elm.el.getAttribute('href');\n\n    if (attribute) {\n      state.stack[0].push('A[href=\"' + attribute + '\"]');\n      state.specificity += 10;\n    }\n\n    return state;\n  },\n  IMG: function IMG(state, elm) {\n    var attribute = elm.el.getAttribute('src');\n\n    if (attribute) {\n      state.stack[0].push('IMG[src=\"' + attribute + '\"]');\n      state.specificity += 10;\n    }\n\n    return state;\n  }\n  /**\n   * Inspect the elements' special attributes which are likely to be unique to the element\n   * @param {array} hierarchy. The hierarchy of elements\n   * @param {object} state. The current calculated CSS selector\n   */\n\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.configure = configure; // Configuration\n\nvar DEFAULT_CONFIGURATION = exports.DEFAULT_CONFIGURATION = {\n  // A function for calling an external query engine for testing CSS selectors such as jQuery or Sizzle\n  // (If you have jQuery or Sizzle on the page, you have no need to supply such a function as Simmer will detect\n  // these and use them if they are available. this will not work if you have these libraries in noConflict mode.\n  queryEngine: null,\n  // A minimum specificty level. Once the parser reaches this level it starts verifying the selector after every method is called\n  // This can cut down our execution time by avoiding needless parsing but can also hurt execution times by performing many\n  // verifications. This number will have to be tweeked here and there as we use the component...\n  specificityThreshold: 100,\n  // How deep into the DOM hierarchy should Simmer go in order to reach a unique selector.\n  // This is a delicate game because the higher the number the more likely you are to reach a unique selector,\n  // but it also means a longer and more breakable one. Assuming you want to store this selector to use later,\n  // making it longer also means it is more likely to change and loose it's validity.\n  depth: 3,\n  // Handling errors in the Simmer analysis process.\n  // true / false / callback\n  // false: errors are ignored by Simmer\n  // true: errors rethrown by the process\n  // a function callback will be called with two parameters: the exception and the element being analyzed\n  errorHandling: false,\n  // A maximum length for the CSS selector can be specified - if no specific selector can be found which is shorter than this length\n  // then it is treated as if no selector could be found\n  selectorMaxLength: 512\n};\n\nfunction configure() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return _extends({}, DEFAULT_CONFIGURATION, config);\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport * as THREE from 'three';\nimport { GLTFLoader } from '../gltf/jsm/loaders/GLTFLoader.js';\n\nvar GltfLoadAnimateObject =\n/*#__PURE__*/\nfunction () {\n  function GltfLoadAnimateObject(scene) {\n    _classCallCheck(this, GltfLoadAnimateObject);\n\n    this.scene = scene;\n  }\n\n  _createClass(GltfLoadAnimateObject, [{\n    key: \"addObject\",\n    value: function () {\n      var _addObject = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(megaOsGltfModelId) {\n        var _this = this;\n\n        var promise;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                promise = new Promise(function (resolve, reject) {\n                  _this.addObjectInner(megaOsGltfModelId, resolve, reject);\n                });\n                return _context.abrupt(\"return\", promise);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function addObject(_x) {\n        return _addObject.apply(this, arguments);\n      }\n\n      return addObject;\n    }()\n  }, {\n    key: \"addObjectInner\",\n    value: function addObjectInner(id, resolve, reject) {\n      var _this2 = this;\n\n      var loadingManager = new THREE.LoadingManager();\n\n      loadingManager.getHandler = function (arg) {\n        console.log(arg);\n      };\n\n      loadingManager.setURLModifier(function (url) {\n        console.log(url);\n        var regex = \"/gltf_models/\".concat(id); // ยง\n\n        if (!url.match(regex)) {\n          url = url.replace('/gltf_models/', \"/gltf_models/\".concat(id, \"/\"));\n        }\n\n        console.log(url);\n        return url;\n      });\n      var loader = new GLTFLoader(loadingManager); // manager.addHandler( /\\.tga$/i, new TGALoader() );\n\n      loader.load(\"/gltf_models/\".concat(id, \".gltf\"), function (gltf) {\n        // gltf.scene.position.y = 0.5;\n        var object = gltf.scene;\n        var animations = gltf.animations;\n        var mixer;\n        var errorMessage = \"No animations provided in gltf /gltf_models/\".concat(id);\n        animations && animations.length ? mixer = new THREE.AnimationMixer(object) : console.warn(errorMessage);\n\n        if (animations && animations.length) {\n          for (var i = 0; i < animations.length; i++) {\n            var animation = animations[i];\n            var action = mixer.clipAction(animation);\n            action.play();\n          }\n        }\n\n        _this2.scene.add(object);\n\n        console.log(object);\n        console.log(mixer);\n        resolve([object, mixer]);\n      }, // called while loading is progressing\n      function (xhr) {\n        console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n      }, // called when loading has errors\n      function (error) {\n        console.log('An error happened');\n        console.log(error);\n        reject(error);\n      });\n    }\n  }]);\n\n  return GltfLoadAnimateObject;\n}();\n\nexport { GltfLoadAnimateObject as default };","map":{"version":3,"sources":["/Users/lemonandroid/Banal Dropbox/random/mega-os/ezii-os/app/javascript/packs/eZii-bricklayer-game/gltf-load-animated-object.js"],"names":["THREE","GLTFLoader","GltfLoadAnimateObject","scene","megaOsGltfModelId","promise","Promise","resolve","reject","addObjectInner","id","loadingManager","LoadingManager","getHandler","arg","console","log","setURLModifier","url","regex","match","replace","loader","load","gltf","object","animations","mixer","errorMessage","length","AnimationMixer","warn","i","animation","action","clipAction","play","add","xhr","loaded","total","error"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\n\nimport { GLTFLoader } from '../gltf/jsm/loaders/GLTFLoader.js';\n\n\n\nexport default class GltfLoadAnimateObject {\n\tconstructor(scene) {\n\t\tthis.scene = scene;\n\t}\n\t\n\tasync addObject(megaOsGltfModelId) {\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\tthis.addObjectInner(megaOsGltfModelId, resolve, reject);\n\t\t});\n\t\n\t\treturn promise;\n\t}\n\t\n\taddObjectInner(id, resolve, reject) {\n\t\tlet loadingManager = new THREE.LoadingManager();\n\t\n\t\tloadingManager.getHandler = function(arg) { console.log(arg) }\n\t\n\t\tloadingManager.setURLModifier( ( url ) => {\n\t\t\tconsole.log(url);\n\t\t\tlet regex =  `/gltf_models/${id}` // ยง\n\t\t\n\t\t\tif(!(url.match(regex))) {\n\t\t\t\turl = url.replace('/gltf_models/', `/gltf_models/${id}/`);\n\t\t\t}\n\t\t\tconsole.log(url);\n\t\t\n\t\t\treturn url;\n\n\t\t});\n\t\n\t\tvar loader = new GLTFLoader(loadingManager);\n\t\n\t\t// manager.addHandler( /\\.tga$/i, new TGALoader() );\n\n\t\tloader.load( `/gltf_models/${id}.gltf`, ( gltf ) => {\n\t\t\t// gltf.scene.position.y = 0.5;\n\t\t\n\t\t\tvar object = gltf.scene;\n\t\t\tvar animations = gltf.animations;\t\t\t\t\n\t\t\t\t\t\n\t\t\tvar mixer;\n\t\t\tlet errorMessage = `No animations provided in gltf /gltf_models/${id}`;\n\t\t\t(animations && animations.length) ? mixer = new THREE.AnimationMixer( object ) : console.warn(errorMessage);\n\t\t\n\t\t\tif ( animations && animations.length ) {\n\t\t\t\t\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\t\t\t\t\t\t\t\t\tvar animation = animations[ i ]\n\t\t\t\t\t\t\t\t\tvar action = mixer.clipAction( animation );\n\t\t\t\t\t\t\t\t\taction.play();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\tthis.scene.add( object );\n\t\t\n\t\t\n\t\t\tconsole.log(object);\n\t\t\tconsole.log(mixer);\n\t\t\t\t\t\t\n\t\t\tresolve([object, mixer]);\n\t\t},\n\n\t\t// called while loading is progressing\n\t\tfunction ( xhr ) {\n\t\t\n\t\t\tconsole.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n\t\t},\n\t\t// called when loading has errors\n\t\tfunction ( error ) {\n\n\t\t\tconsole.log( 'An error happened' );\n\t\t\tconsole.log( error );\n\t\t\treject(error);\n\n\t\t}\n\n\t );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
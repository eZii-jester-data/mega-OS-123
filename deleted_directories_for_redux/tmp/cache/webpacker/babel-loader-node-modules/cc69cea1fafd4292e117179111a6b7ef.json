{"ast":null,"code":"// https://raw.githubusercontent.com/mrdoob/three.js/master/examples/jsm/loaders/ColladaLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\nimport { AmbientLight, AnimationClip, Bone, BufferGeometry, ClampToEdgeWrapping, Color, DefaultLoadingManager, DirectionalLight, DoubleSide, Euler, FileLoader, Float32BufferAttribute, Group, Line, LineBasicMaterial, LineSegments, LoaderUtils, Math as _Math, Matrix4, Mesh, MeshBasicMaterial, MeshLambertMaterial, MeshPhongMaterial, OrthographicCamera, PerspectiveCamera, PointLight, Quaternion, QuaternionKeyframeTrack, RepeatWrapping, Scene, Skeleton, SkinnedMesh, SpotLight, TextureLoader, Vector3, VectorKeyframeTrack } from \"three\";\nimport { TGALoader } from \"../loaders/TGALoader.js\";\n\nvar ColladaLoader = function ColladaLoader(manager) {\n  this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n};\n\nColladaLoader.prototype = {\n  constructor: ColladaLoader,\n  crossOrigin: 'anonymous',\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === undefined ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text, path));\n    }, onProgress, onError);\n  },\n  setPath: function setPath(value) {\n    this.path = value;\n    return this;\n  },\n  setResourcePath: function setResourcePath(value) {\n    this.resourcePath = value;\n    return this;\n  },\n  options: {\n    set convertUpAxis(value) {\n      console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');\n    }\n\n  },\n  setCrossOrigin: function setCrossOrigin(value) {\n    this.crossOrigin = value;\n    return this;\n  },\n  parse: function parse(text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n      var array = [];\n      var childNodes = xml.childNodes;\n\n      for (var i = 0, l = childNodes.length; i < l; i++) {\n        var child = childNodes[i];\n\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n\n      return array;\n    }\n\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n\n      return array;\n    }\n\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseInts(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseId(text) {\n      return text.substring(1);\n    }\n\n    function generateId() {\n      return 'three_default_' + count++;\n    }\n\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    } // asset\n\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n      };\n    }\n\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute('meter') === true) {\n        return parseFloat(xml.getAttribute('meter'));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n    } // library\n\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      var library = getElementsByTagName(xml, libraryName)[0];\n\n      if (library !== undefined) {\n        var elements = getElementsByTagName(library, nodeName);\n\n        for (var i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n\n    function buildLibrary(data, builder) {\n      for (var name in data) {\n        var object = data[name];\n        object.build = builder(data[name]);\n      }\n    } // get\n\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data);\n      return data.build;\n    } // animation\n\n\n    function parseAnimation(xml) {\n      var data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id;\n\n        switch (child.nodeName) {\n          case 'source':\n            id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'sampler':\n            id = child.getAttribute('id');\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n\n          case 'channel':\n            id = child.getAttribute('target');\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.animations[xml.getAttribute('id')] = data;\n    }\n\n    function parseAnimationSampler(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseAnimationChannel(xml) {\n      var data = {};\n      var target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n      var parts = target.split('/');\n      var id = parts.shift();\n      var sid = parts.shift(); // check selection syntax\n\n      var arraySyntax = sid.indexOf('(') !== -1;\n      var memberSyntax = sid.indexOf('.') !== -1;\n\n      if (memberSyntax) {\n        //  member selection access\n        parts = sid.split('.');\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n        var indices = sid.split('(');\n        sid = indices.shift();\n\n        for (var i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n        }\n\n        data.indices = indices;\n      }\n\n      data.id = id;\n      data.sid = sid;\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n      data.sampler = parseId(xml.getAttribute('source'));\n      return data;\n    }\n\n    function buildAnimation(data) {\n      var tracks = [];\n      var channels = data.channels;\n      var samplers = data.samplers;\n      var sources = data.sources;\n\n      for (var target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          var channel = channels[target];\n          var sampler = samplers[channel.sampler];\n          var inputId = sampler.inputs.INPUT;\n          var outputId = sampler.inputs.OUTPUT;\n          var inputSource = sources[inputId];\n          var outputSource = sources[outputId];\n          var animation = buildAnimationChannel(channel, inputSource, outputSource);\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n\n      return tracks;\n    }\n\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      var node = library.nodes[channel.id];\n      var object3D = getNode(node.id);\n      var transform = node.transforms[channel.sid];\n      var defaultMatrix = node.matrix.clone().transpose();\n      var time, stride;\n      var i, il, j, jl;\n      var data = {}; // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case 'matrix':\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n            if (data[time] === undefined) data[time] = {};\n\n            if (channel.arraySyntax === true) {\n              var value = outputSource.array[stride];\n              var index = channel.indices[0] + 4 * channel.indices[1];\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n\n          break;\n\n        case 'translate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'rotate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'scale':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n      }\n\n      var keyframes = prepareAnimationData(data, defaultMatrix);\n      var animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n      return animation;\n    }\n\n    function prepareAnimationData(data, defaultMatrix) {\n      var keyframes = []; // transfer data into a sortable array\n\n      for (var time in data) {\n        keyframes.push({\n          time: parseFloat(time),\n          value: data[time]\n        });\n      } // ensure keyframes are sorted by time\n\n\n      keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (var i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n\n      return keyframes; // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n\n    var position = new Vector3();\n    var scale = new Vector3();\n    var quaternion = new Quaternion();\n\n    function createKeyframeTracks(animation, tracks) {\n      var keyframes = animation.keyframes;\n      var name = animation.name;\n      var times = [];\n      var positionData = [];\n      var quaternionData = [];\n      var scaleData = [];\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n        var time = keyframe.time;\n        var value = keyframe.value;\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n\n      if (positionData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.position', times, positionData));\n      if (quaternionData.length > 0) tracks.push(new QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n      if (scaleData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.scale', times, scaleData));\n      return tracks;\n    }\n\n    function transformAnimationData(keyframes, property, defaultValue) {\n      var keyframe;\n      var empty = true;\n      var i, l; // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n\n      if (empty === true) {\n        // no values at all, so we set a default value\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n\n    function createMissingKeyframes(keyframes, property) {\n      var prev, next;\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i--;\n      }\n\n      return null;\n    }\n\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i++;\n      }\n\n      return null;\n    }\n\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n\n      key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n    } // animation clips\n\n\n    function parseAnimationClip(xml) {\n      var data = {\n        name: xml.getAttribute('id') || 'default',\n        start: parseFloat(xml.getAttribute('start') || 0),\n        end: parseFloat(xml.getAttribute('end') || 0),\n        animations: []\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_animation':\n            data.animations.push(parseId(child.getAttribute('url')));\n            break;\n        }\n      }\n\n      library.clips[xml.getAttribute('id')] = data;\n    }\n\n    function buildAnimationClip(data) {\n      var tracks = [];\n      var name = data.name;\n      var duration = data.end - data.start || -1;\n      var animations = data.animations;\n\n      for (var i = 0, il = animations.length; i < il; i++) {\n        var animationTracks = getAnimation(animations[i]);\n\n        for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n\n      return new AnimationClip(name, duration, tracks);\n    }\n\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    } // controller\n\n\n    function parseController(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute('source'));\n            data.skin = parseSkin(child);\n            break;\n\n          case 'morph':\n            data.id = parseId(child.getAttribute('source'));\n            console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n            break;\n        }\n      }\n\n      library.controllers[xml.getAttribute('id')] = data;\n    }\n\n    function parseSkin(xml) {\n      var data = {\n        sources: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n\n          case 'source':\n            var id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'joints':\n            data.joints = parseJoints(child);\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseJoints(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseVertexWeights(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            var offset = parseInt(child.getAttribute('offset'));\n            data.inputs[semantic] = {\n              id: id,\n              offset: offset\n            };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts(child.textContent);\n            break;\n\n          case 'v':\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildController(data) {\n      var build = {\n        id: data.id\n      };\n      var geometry = library.geometries[build.id];\n\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n\n      return build;\n    }\n\n    function buildSkin(data) {\n      var BONE_LIMIT = 4;\n      var build = {\n        joints: [],\n        // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n      var sources = data.sources;\n      var vertexWeights = data.vertexWeights;\n      var vcount = vertexWeights.vcount;\n      var v = vertexWeights.v;\n      var jointOffset = vertexWeights.inputs.JOINT.offset;\n      var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n      var jointSource = data.sources[data.joints.inputs.JOINT];\n      var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n      var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      var stride = 0;\n      var i, j, l; // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        var jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n        var vertexSkinData = [];\n\n        for (j = 0; j < jointCount; j++) {\n          var skinIndex = v[stride + jointOffset];\n          var weightId = v[stride + weightOffset];\n          var skinWeight = weights[weightId];\n          vertexSkinData.push({\n            index: skinIndex,\n            weight: skinWeight\n          });\n          stride += 2;\n        } // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n\n        vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          var d = vertexSkinData[j];\n\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      } // setup bind matrix\n\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();\n      } else {\n        build.bindMatrix = new Matrix4().identity();\n      } // process bones and inverse bind matrix data\n\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        var name = jointSource.array[i];\n        var boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n        build.joints.push({\n          name: name,\n          boneInverse: boneInverse\n        });\n      }\n\n      return build; // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    } // image\n\n\n    function parseImage(xml) {\n      var data = {\n        init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n      };\n      library.images[xml.getAttribute('id')] = data;\n    }\n\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n      return data.init_from;\n    }\n\n    function getImage(id) {\n      var data = library.images[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find image with ID:', id);\n      return null;\n    } // effect\n\n\n    function parseEffect(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n\n      library.effects[xml.getAttribute('id')] = data;\n    }\n\n    function parseEffectProfileCOMMON(xml) {\n      var data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'newparam':\n            parseEffectNewparam(child, data);\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectNewparam(xml, data) {\n      var sid = xml.getAttribute('sid');\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'surface':\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n\n          case 'sampler2D':\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectSurface(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectSampler(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'source':\n            data.source = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n\n          case 'transparent':\n            data[child.nodeName] = {\n              opaque: child.getAttribute('opaque'),\n              data: parseEffectParameter(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameter(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n\n          case 'float':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTexture(xml) {\n      var data = {\n        technique: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'extra':\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n            if (child.textContent.toUpperCase() === 'TRUE') {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === 'FALSE') {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n\n            break;\n        }\n      }\n    }\n\n    function parseEffectExtra(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'double_sided':\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildEffect(data) {\n      return data;\n    }\n\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    } // material\n\n\n    function parseMaterial(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_effect':\n            data.url = parseId(child.getAttribute('url'));\n            break;\n        }\n      }\n\n      library.materials[xml.getAttribute('id')] = data;\n    }\n\n    function getTextureLoader(image) {\n      var loader;\n      var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n      extension = extension.toLowerCase();\n\n      switch (extension) {\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n      }\n\n      return loader;\n    }\n\n    function buildMaterial(data) {\n      var effect = getEffect(data.url);\n      var technique = effect.profile.technique;\n      var extra = effect.profile.extra;\n      var material;\n\n      switch (technique.type) {\n        case 'phong':\n        case 'blinn':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          material = new MeshBasicMaterial();\n          break;\n      }\n\n      material.name = data.name || '';\n\n      function getTexture(textureObject) {\n        var sampler = effect.profile.samplers[textureObject.id];\n        var image = null; // get image\n\n        if (sampler !== undefined) {\n          var surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n          image = getImage(textureObject.id);\n        } // create texture if image is avaiable\n\n\n        if (image !== null) {\n          var loader = getTextureLoader(image);\n\n          if (loader !== undefined) {\n            var texture = loader.load(image);\n            var extra = textureObject.extra;\n\n            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n              var technique = extra.technique;\n              texture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n              texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n            } else {\n              texture.wrapS = RepeatWrapping;\n              texture.wrapT = RepeatWrapping;\n            }\n\n            return texture;\n          } else {\n            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n            return null;\n          }\n        } else {\n          console.warn('THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id);\n          return null;\n        }\n      }\n\n      var parameters = technique.parameters;\n\n      for (var key in parameters) {\n        var parameter = parameters[key];\n\n        switch (key) {\n          case 'diffuse':\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture);\n            break;\n\n          case 'specular':\n            if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n            if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n            break;\n\n          case 'bump':\n            if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n            break;\n\n          case 'ambient':\n            if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n            break;\n\n          case 'shininess':\n            if (parameter[\"float\"] && material.shininess) material.shininess = parameter[\"float\"];\n            break;\n\n          case 'emission':\n            if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n            if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n            break;\n        }\n      } //\n\n\n      var transparent = parameters['transparent'];\n      var transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          \"float\": 1\n        };\n      } // <transparent> does not exist but <transparency>\n\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [1, 1, 1, 1]\n          }\n        };\n      }\n\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n          material.transparent = true;\n        } else {\n          var color = transparent.data.color;\n\n          switch (transparent.opaque) {\n            case 'A_ONE':\n              material.opacity = color[3] * transparency[\"float\"];\n              break;\n\n            case 'RGB_ZERO':\n              material.opacity = 1 - color[0] * transparency[\"float\"];\n              break;\n\n            case 'A_ZERO':\n              material.opacity = 1 - color[3] * transparency[\"float\"];\n              break;\n\n            case 'RGB_ONE':\n              material.opacity = color[0] * transparency[\"float\"];\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n          }\n\n          if (material.opacity < 1) material.transparent = true;\n        }\n      } //\n\n\n      if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n        material.side = DoubleSide;\n      }\n\n      return material;\n    }\n\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    } // camera\n\n\n    function parseCamera(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'optics':\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n\n      library.cameras[xml.getAttribute('id')] = data;\n    }\n\n    function parseCameraOptics(xml) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            return parseCameraTechnique(child);\n        }\n      }\n\n      return {};\n    }\n\n    function parseCameraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'perspective':\n          case 'orthographic':\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseCameraParameters(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildCamera(data) {\n      var camera;\n\n      switch (data.optics.technique) {\n        case 'perspective':\n          camera = new PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        case 'orthographic':\n          var ymag = data.optics.parameters.ymag;\n          var xmag = data.optics.parameters.xmag;\n          var aspectRatio = data.optics.parameters.aspect_ratio;\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n          xmag *= 0.5;\n          ymag *= 0.5;\n          camera = new OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n          data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        default:\n          camera = new PerspectiveCamera();\n          break;\n      }\n\n      camera.name = data.name || '';\n      return camera;\n    }\n\n    function getCamera(id) {\n      var data = library.cameras[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find camera with ID:', id);\n      return null;\n    } // light\n\n\n    function parseLight(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n\n      library.lights[xml.getAttribute('id')] = data;\n    }\n\n    function parseLightTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n\n      return data;\n    }\n\n    function parseLightParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            var array = parseFloats(child.textContent);\n            data.color = new Color().fromArray(array);\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n\n          case 'quadratic_attenuation':\n            var f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildLight(data) {\n      var light;\n\n      switch (data.technique) {\n        case 'directional':\n          light = new DirectionalLight();\n          break;\n\n        case 'point':\n          light = new PointLight();\n          break;\n\n        case 'spot':\n          light = new SpotLight();\n          break;\n\n        case 'ambient':\n          light = new AmbientLight();\n          break;\n      }\n\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n      return light;\n    }\n\n    function getLight(id) {\n      var data = library.lights[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find light with ID:', id);\n      return null;\n    } // geometry\n\n\n    function parseGeometry(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n      var mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n      if (mesh === undefined) return;\n\n      for (var i = 0; i < mesh.childNodes.length; i++) {\n        var child = mesh.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id = child.getAttribute('id');\n\n        switch (child.nodeName) {\n          case 'source':\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n\n          case 'polygons':\n            console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.geometries[xml.getAttribute('id')] = data;\n    }\n\n    function parseSource(xml) {\n      var data = {\n        array: [],\n        stride: 3\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'float_array':\n            data.array = parseFloats(child.textContent);\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings(child.textContent);\n            break;\n\n          case 'technique_common':\n            var accessor = getElementsByTagName(child, 'accessor')[0];\n\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute('stride'));\n            }\n\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseGeometryVertices(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n      }\n\n      return data;\n    }\n\n    function parseGeometryPrimitive(xml) {\n      var primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute('material'),\n        count: parseInt(xml.getAttribute('count')),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            var offset = parseInt(child.getAttribute('offset'));\n            var set = parseInt(child.getAttribute('set'));\n            var inputname = set > 0 ? semantic + set : semantic;\n            primitive.inputs[inputname] = {\n              id: id,\n              offset: offset\n            };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === 'TEXCOORD') primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts(child.textContent);\n            break;\n\n          case 'p':\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return primitive;\n    }\n\n    function groupPrimitives(primitives) {\n      var build = {};\n\n      for (var i = 0; i < primitives.length; i++) {\n        var primitive = primitives[i];\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n        build[primitive.type].push(primitive);\n      }\n\n      return build;\n    }\n\n    function checkUVCoordinates(primitives) {\n      var count = 0;\n\n      for (var i = 0, l = primitives.length; i < l; i++) {\n        var primitive = primitives[i];\n\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n\n    function buildGeometry(data) {\n      var build = {};\n      var sources = data.sources;\n      var vertices = data.vertices;\n      var primitives = data.primitives;\n      if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      var groupedPrimitives = groupPrimitives(primitives);\n\n      for (var type in groupedPrimitives) {\n        var primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n\n      return build;\n    }\n\n    function buildGeometryType(primitives, sources, vertices) {\n      var build = {};\n      var position = {\n        array: [],\n        stride: 0\n      };\n      var normal = {\n        array: [],\n        stride: 0\n      };\n      var uv = {\n        array: [],\n        stride: 0\n      };\n      var uv2 = {\n        array: [],\n        stride: 0\n      };\n      var color = {\n        array: [],\n        stride: 0\n      };\n      var skinIndex = {\n        array: [],\n        stride: 4\n      };\n      var skinWeight = {\n        array: [],\n        stride: 4\n      };\n      var geometry = new BufferGeometry();\n      var materialKeys = [];\n      var start = 0;\n\n      for (var p = 0; p < primitives.length; p++) {\n        var primitive = primitives[p];\n        var inputs = primitive.inputs; // groups\n\n        var count = 0;\n\n        switch (primitive.type) {\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n            for (var g = 0; g < primitive.count; g++) {\n              var vc = primitive.vcount[g];\n\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n\n                  break;\n\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n\n                  break;\n              }\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n        }\n\n        geometry.addGroup(start, count, p);\n        start += count; // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        } // geometry data\n\n\n        for (var name in inputs) {\n          var input = inputs[name];\n\n          switch (name) {\n            case 'VERTEX':\n              for (var key in vertices) {\n                var id = vertices[key];\n\n                switch (key) {\n                  case 'POSITION':\n                    var prevLength = position.array.length;\n                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                    position.stride = sources[id].stride;\n\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                      buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                    } // see #3803\n\n\n                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                      var count = (position.array.length - prevLength) / position.stride;\n\n                      for (var i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n                        uv.array.push(0, 0);\n                      }\n                    }\n\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                    normal.stride = sources[id].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                    color.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  default:\n                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                }\n              }\n\n              break;\n\n            case 'NORMAL':\n              buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n              normal.stride = sources[input.id].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n              color.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n              uv.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n              uv2.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      } // build geometry\n\n\n      if (position.array.length > 0) geometry.addAttribute('position', new Float32BufferAttribute(position.array, position.stride));\n      if (normal.array.length > 0) geometry.addAttribute('normal', new Float32BufferAttribute(normal.array, normal.stride));\n      if (color.array.length > 0) geometry.addAttribute('color', new Float32BufferAttribute(color.array, color.stride));\n      if (uv.array.length > 0) geometry.addAttribute('uv', new Float32BufferAttribute(uv.array, uv.stride));\n      if (uv2.array.length > 0) geometry.addAttribute('uv2', new Float32BufferAttribute(uv2.array, uv2.stride));\n      if (skinIndex.array.length > 0) geometry.addAttribute('skinIndex', new Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n      if (skinWeight.array.length > 0) geometry.addAttribute('skinWeight', new Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n      return build;\n    }\n\n    function buildGeometryData(primitive, source, offset, array) {\n      var indices = primitive.p;\n      var stride = primitive.stride;\n      var vcount = primitive.vcount;\n\n      function pushVector(i) {\n        var index = indices[i + offset] * sourceStride;\n        var length = index + sourceStride;\n\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n      }\n\n      var sourceArray = source.array;\n      var sourceStride = source.stride;\n\n      if (primitive.vcount !== undefined) {\n        var index = 0;\n\n        for (var i = 0, l = vcount.length; i < l; i++) {\n          var count = vcount[i];\n\n          if (count === 4) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            var d = index + stride * 3;\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (var k = 1, kl = count - 2; k <= kl; k++) {\n              var a = index + stride * 0;\n              var b = index + stride * k;\n              var c = index + stride * (k + 1);\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n\n          index += stride * count;\n        }\n      } else {\n        for (var i = 0, l = indices.length; i < l; i += stride) {\n          pushVector(i);\n        }\n      }\n    }\n\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    } // kinematics\n\n\n    function parseKinematicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        joints: {},\n        links: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n\n      library.kinematicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'joint':\n            data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n            break;\n\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n\n    function parseKinematicsJoint(xml) {\n      var data;\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsJointParameter(xml, data) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        axis: new Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        \"static\": false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n\n          case 'limits':\n            var max = child.getElementsByTagName('max')[0];\n            var min = child.getElementsByTagName('min')[0];\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      } // if min is equal to or greater than max, consider the joint static\n\n\n      if (data.limits.min >= data.limits.max) {\n        data[\"static\"] = true;\n      } // calculate middle position\n\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n      return data;\n    }\n\n    function parseKinematicsLink(xml) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'attachment_full':\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsAttachment(xml) {\n      var data = {\n        joint: xml.getAttribute('joint').split('/').pop(),\n        transforms: [],\n        links: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsTransform(xml) {\n      var data = {\n        type: xml.nodeName\n      };\n      var array = parseFloats(xml.textContent);\n\n      switch (data.type) {\n        case 'matrix':\n          data.obj = new Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          break;\n\n        case 'rotate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          data.angle = _Math.degToRad(array[3]);\n          break;\n      }\n\n      return data;\n    } // physics\n\n\n    function parsePhysicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        rigidBodies: {}\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'rigid_body':\n            data.rigidBodies[child.getAttribute('name')] = {};\n            parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n            break;\n        }\n      }\n\n      library.physicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function parsePhysicsRigidBody(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'inertia':\n            data.inertia = parseFloats(child.textContent);\n            break;\n\n          case 'mass':\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    } // scene\n\n\n    function parseKinematicsScene(xml) {\n      var data = {\n        bindJointAxis: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_joint_axis':\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n\n      library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n    }\n\n    function parseKinematicsBindJointAxis(xml) {\n      var data = {\n        target: xml.getAttribute('target').split('/').pop()\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var param = child.getElementsByTagName('param')[0];\n            data.axis = param.textContent;\n            var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n            data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n\n    function setupKinematics() {\n      var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      var visualSceneId = Object.keys(library.visualScenes)[0];\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n      var kinematicsModel = getKinematicsModel(kinematicsModelId);\n      var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      var visualScene = getVisualScene(visualSceneId);\n      var bindJointAxis = kinematicsScene.bindJointAxis;\n      var jointMap = {};\n\n      for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n        var axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n        if (targetElement) {\n          // get the parent of the transfrom element\n          var parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n\n      function connect(jointIndex, visualElement) {\n        var visualElementName = visualElement.getAttribute('name');\n        var joint = kinematicsModel.joints[jointIndex];\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n          }\n        });\n      }\n\n      var m0 = new Matrix4();\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n        getJointValue: function getJointValue(jointIndex) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.');\n          }\n        },\n        setJointValue: function setJointValue(jointIndex, value) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            var joint = jointData.joint;\n\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n            } else if (joint[\"static\"]) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n            } else {\n              var object = jointData.object;\n              var axis = joint.axis;\n              var transforms = jointData.transforms;\n              matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n              for (var i = 0; i < transforms.length; i++) {\n                var transform = transforms[i]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case 'revolute':\n                      matrix.multiply(m0.makeRotationAxis(axis, _Math.degToRad(value)));\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case 'matrix':\n                      matrix.multiply(transform.obj);\n                      break;\n\n                    case 'translate':\n                      matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                      break;\n\n                    case 'scale':\n                      matrix.scale(transform.obj);\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                      break;\n                  }\n                }\n              }\n\n              object.matrix.copy(matrix);\n              object.matrix.decompose(object.position, object.quaternion, object.scale);\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n          }\n        }\n      };\n    }\n\n    function buildTransformList(node) {\n      var transforms = [];\n      var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            var matrix = new Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: matrix\n            });\n            break;\n\n          case 'translate':\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            var vector = new Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector\n            });\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n            var vector = new Vector3().fromArray(array);\n\n            var angle = _Math.degToRad(array[3]);\n\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            });\n            break;\n        }\n      }\n\n      return transforms;\n    } // nodes\n\n\n    function prepareNodes(xml) {\n      var elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n      for (var i = 0; i < elements.length; i++) {\n        var element = elements[i];\n\n        if (element.hasAttribute('id') === false) {\n          element.setAttribute('id', generateId());\n        }\n      }\n    }\n\n    var matrix = new Matrix4();\n    var vector = new Vector3();\n\n    function parseNode(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        type: xml.getAttribute('type'),\n        id: xml.getAttribute('id'),\n        sid: xml.getAttribute('sid'),\n        matrix: new Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'node':\n            data.nodes.push(child.getAttribute('id'));\n            parseNode(child);\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'translate':\n            var array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n\n            var angle = _Math.degToRad(array[3]);\n\n            data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasNode(data.id)) {\n        console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n      } else {\n        library.nodes[data.id] = data;\n      }\n\n      return data;\n    }\n\n    function parseNodeInstance(xml) {\n      var data = {\n        id: parseId(xml.getAttribute('url')),\n        materials: {},\n        skeletons: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'bind_material':\n            var instances = child.getElementsByTagName('instance_material');\n\n            for (var j = 0; j < instances.length; j++) {\n              var instance = instances[j];\n              var symbol = instance.getAttribute('symbol');\n              var target = instance.getAttribute('target');\n              data.materials[symbol] = parseId(target);\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push(parseId(child.textContent));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildSkeleton(skeletons, joints) {\n      var boneData = [];\n      var sortedBoneData = [];\n      var i, j, data; // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        var skeleton = skeletons[i];\n        var root;\n\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n          var visualScene = library.visualScenes[skeleton];\n          var children = visualScene.children;\n\n          for (var j = 0; j < children.length; j++) {\n            var child = children[j];\n\n            if (child.type === 'JOINT') {\n              var root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n        }\n      } // sort bone data (the order is defined in the corresponding controller)\n\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      } // add unprocessed bone data at the end of the list\n\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      } // setup arrays for skeleton creation\n\n\n      var bones = [];\n      var boneInverses = [];\n\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n\n      return new Skeleton(bones, boneInverses);\n    }\n\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          var boneInverse; // retrieve the boneInverse from the controller data\n\n          for (var i = 0; i < joints.length; i++) {\n            var joint = joints[i];\n\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n            boneInverse = new Matrix4();\n          }\n\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false\n          });\n        }\n      });\n    }\n\n    function buildNode(data) {\n      var objects = [];\n      var matrix = data.matrix;\n      var nodes = data.nodes;\n      var type = data.type;\n      var instanceCameras = data.instanceCameras;\n      var instanceControllers = data.instanceControllers;\n      var instanceLights = data.instanceLights;\n      var instanceGeometries = data.instanceGeometries;\n      var instanceNodes = data.instanceNodes; // nodes\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      } // instance cameras\n\n\n      for (var i = 0, l = instanceCameras.length; i < l; i++) {\n        var instanceCamera = getCamera(instanceCameras[i]);\n\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      } // instance controllers\n\n\n      for (var i = 0, l = instanceControllers.length; i < l; i++) {\n        var instance = instanceControllers[i];\n        var controller = getController(instance.id);\n        var geometries = getGeometry(controller.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n        var skeletons = instance.skeletons;\n        var joints = controller.skin.joints;\n        var skeleton = buildSkeleton(skeletons, joints);\n\n        for (var j = 0, jl = newObjects.length; j < jl; j++) {\n          var object = newObjects[j];\n\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n\n          objects.push(object);\n        }\n      } // instance lights\n\n\n      for (var i = 0, l = instanceLights.length; i < l; i++) {\n        var instanceLight = getLight(instanceLights[i]);\n\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      } // instance geometries\n\n\n      for (var i = 0, l = instanceGeometries.length; i < l; i++) {\n        var instance = instanceGeometries[i]; // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        var geometries = getGeometry(instance.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n\n        for (var j = 0, jl = newObjects.length; j < jl; j++) {\n          objects.push(newObjects[j]);\n        }\n      } // instance nodes\n\n\n      for (var i = 0, l = instanceNodes.length; i < l; i++) {\n        objects.push(getNode(instanceNodes[i]).clone());\n      }\n\n      var object;\n\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === 'JOINT' ? new Bone() : new Group();\n\n        for (var i = 0; i < objects.length; i++) {\n          object.add(objects[i]);\n        }\n      }\n\n      if (object.name === '') {\n        object.name = type === 'JOINT' ? data.sid : data.name;\n      }\n\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n      return object;\n    }\n\n    var fallbackMaterial = new MeshBasicMaterial({\n      color: 0xff00ff\n    });\n\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      var materials = [];\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var id = instanceMaterials[keys[i]];\n\n        if (id === undefined) {\n          console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n\n      return materials;\n    }\n\n    function buildObjects(geometries, instanceMaterials) {\n      var objects = [];\n\n      for (var type in geometries) {\n        var geometry = geometries[type];\n        var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === 'lines' || type === 'linestrips') {\n            materials.push(new LineBasicMaterial());\n          } else {\n            materials.push(new MeshPhongMaterial());\n          }\n        } // regard skinning\n\n\n        var skinning = geometry.data.attributes.skinIndex !== undefined;\n\n        if (skinning) {\n          for (var i = 0, l = materials.length; i < l; i++) {\n            materials[i].skinning = true;\n          }\n        } // choose between a single or multi materials (material array)\n\n\n        var material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n        var object;\n\n        switch (type) {\n          case 'lines':\n            object = new LineSegments(geometry.data, material);\n            break;\n\n          case 'linestrips':\n            object = new Line(geometry.data, material);\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if (skinning) {\n              object = new SkinnedMesh(geometry.data, material);\n            } else {\n              object = new Mesh(geometry.data, material);\n            }\n\n            break;\n        }\n\n        objects.push(object);\n      }\n\n      return objects;\n    }\n\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    } // visual scenes\n\n\n    function parseVisualScene(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        children: []\n      };\n      prepareNodes(xml);\n      var elements = getElementsByTagName(xml, 'node');\n\n      for (var i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n\n      library.visualScenes[xml.getAttribute('id')] = data;\n    }\n\n    function buildVisualScene(data) {\n      var group = new Group();\n      group.name = data.name;\n      var children = data.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        group.add(getNode(child.id));\n      }\n\n      return group;\n    }\n\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    } // scenes\n\n\n    function parseScene(xml) {\n      var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n      return getVisualScene(parseId(instance.getAttribute('url')));\n    }\n\n    function setupAnimations() {\n      var clips = library.clips;\n\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n          var tracks = [];\n\n          for (var id in library.animations) {\n            var animationTracks = getAnimation(id);\n\n            for (var i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n\n          animations.push(new AnimationClip('default', -1, tracks));\n        }\n      } else {\n        for (var id in clips) {\n          animations.push(getAnimationClip(id));\n        }\n      }\n    } // convert the parser error element into text with each child elements text\n    // separated by new lines.\n\n\n    function parserErrorToText(parserError) {\n      var result = '';\n      var stack = [parserError];\n\n      while (stack.length) {\n        var node = stack.shift();\n\n        if (node.nodeType === Node.TEXT_NODE) {\n          result += node.textContent;\n        } else {\n          result += '\\n';\n          stack.push.apply(stack, node.childNodes);\n        }\n      }\n\n      return result.trim();\n    }\n\n    if (text.length === 0) {\n      return {\n        scene: new Scene()\n      };\n    }\n\n    var xml = new DOMParser().parseFromString(text, 'application/xml');\n    var collada = getElementsByTagName(xml, 'COLLADA')[0];\n    var parserError = xml.getElementsByTagName('parsererror')[0];\n\n    if (parserError !== undefined) {\n      // Chrome will return parser error with a div in it\n      var errorElement = getElementsByTagName(parserError, 'div')[0];\n      var errorText;\n\n      if (errorElement) {\n        errorText = errorElement.textContent;\n      } else {\n        errorText = parserErrorToText(parserError);\n      }\n\n      console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n      return null;\n    } // metadata\n\n\n    var version = collada.getAttribute('version');\n    console.log('THREE.ColladaLoader: File version', version);\n    var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n    var textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var tgaLoader;\n\n    if (TGALoader) {\n      tgaLoader = new TGALoader(this.manager);\n      tgaLoader.setPath(this.resourcePath || path);\n    } //\n\n\n    var animations = [];\n    var kinematics = {};\n    var count = 0; //\n\n    var library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n    parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n    parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n    parseLibrary(collada, 'library_controllers', 'controller', parseController);\n    parseLibrary(collada, 'library_images', 'image', parseImage);\n    parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n    parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n    parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n    parseLibrary(collada, 'library_lights', 'light', parseLight);\n    parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n    parseLibrary(collada, 'library_nodes', 'node', parseNode);\n    parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n    parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n    parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n    parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n    setupAnimations();\n    setupKinematics();\n    var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n\n    if (asset.upAxis === 'Z_UP') {\n      scene.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    }\n\n    scene.scale.multiplyScalar(asset.unit);\n    return {\n      animations: animations,\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n  }\n};\nexport { ColladaLoader };","map":{"version":3,"sources":["/Users/lemonandroid/Banal Dropbox/random/ezii-os/app/javascript/packs/kmz/jsm/loaders/ColladaLoader.js"],"names":["AmbientLight","AnimationClip","Bone","BufferGeometry","ClampToEdgeWrapping","Color","DefaultLoadingManager","DirectionalLight","DoubleSide","Euler","FileLoader","Float32BufferAttribute","Group","Line","LineBasicMaterial","LineSegments","LoaderUtils","Math","_Math","Matrix4","Mesh","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","OrthographicCamera","PerspectiveCamera","PointLight","Quaternion","QuaternionKeyframeTrack","RepeatWrapping","Scene","Skeleton","SkinnedMesh","SpotLight","TextureLoader","Vector3","VectorKeyframeTrack","TGALoader","ColladaLoader","manager","undefined","prototype","constructor","crossOrigin","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","text","parse","value","setResourcePath","resourcePath","options","convertUpAxis","console","warn","setCrossOrigin","getElementsByTagName","xml","name","array","childNodes","i","l","length","child","nodeName","push","parseStrings","parts","trim","split","Array","parseFloats","parseFloat","parseInts","parseInt","parseId","substring","generateId","count","isEmpty","object","Object","keys","parseAsset","unit","parseAssetUnit","upAxis","parseAssetUpAxis","hasAttribute","getAttribute","textContent","parseLibrary","libraryName","parser","library","elements","buildLibrary","data","builder","build","getBuild","parseAnimation","sources","samplers","channels","nodeType","id","parseSource","parseAnimationSampler","parseAnimationChannel","log","animations","inputs","semantic","target","shift","sid","arraySyntax","indexOf","memberSyntax","member","indices","replace","sampler","buildAnimation","tracks","hasOwnProperty","channel","inputId","INPUT","outputId","OUTPUT","inputSource","outputSource","animation","buildAnimationChannel","createKeyframeTracks","getAnimation","node","nodes","object3D","getNode","transform","transforms","defaultMatrix","matrix","clone","transpose","time","stride","il","j","jl","index","keyframes","prepareAnimationData","uuid","sort","ascending","transformAnimationData","a","b","position","scale","quaternion","times","positionData","quaternionData","scaleData","keyframe","fromArray","decompose","x","y","z","w","property","defaultValue","empty","createMissingKeyframes","prev","next","getPrev","getNext","interpolate","key","parseAnimationClip","start","end","clips","buildAnimationClip","duration","animationTracks","getAnimationClip","parseController","skin","parseSkin","controllers","bindShapeMatrix","joints","parseJoints","vertexWeights","parseVertexWeights","offset","vcount","v","buildController","geometry","geometries","buildSkin","skinIndices","skinWeights","weights","BONE_LIMIT","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","weight","descending","d","bindMatrix","identity","boneInverse","getController","parseImage","init_from","images","buildImage","getImage","parseEffect","profile","parseEffectProfileCOMMON","effects","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","type","parameters","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechnique","buildEffect","getEffect","parseMaterial","materials","getTextureLoader","image","extension","slice","lastIndexOf","toLowerCase","tgaLoader","textureLoader","buildMaterial","effect","material","getTexture","textureObject","surface","texture","wrapS","wrapU","wrapT","wrapV","set","offsetU","offsetV","repeat","repeatU","repeatV","parameter","color","map","specular","specularMap","normalMap","lightMap","shininess","emissive","emissiveMap","transparent","transparency","opacity","double_sided","side","getMaterial","parseCamera","optics","parseCameraOptics","cameras","parseCameraTechnique","parseCameraParameters","buildCamera","camera","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","getCamera","parseLight","parseLightTechnique","lights","parseLightParameters","falloffAngle","f","distance","sqrt","buildLight","light","copy","getLight","parseGeometry","vertices","primitives","mesh","parseGeometryVertices","parseGeometryPrimitive","accessor","primitive","hasUV","inputname","max","p","groupPrimitives","checkUVCoordinates","uvsNeedsFix","buildGeometry","groupedPrimitives","primitiveType","buildGeometryType","normal","uv","uv2","materialKeys","g","vc","addGroup","input","prevLength","buildGeometryData","addAttribute","pushVector","sourceStride","sourceArray","c","k","kl","getGeometry","parseKinematicsModel","links","parseKinematicsTechniqueCommon","kinematicsModels","buildKinematicsModel","getKinematicsModel","parseKinematicsJoint","parseKinematicsLink","parseKinematicsJointParameter","axis","limits","min","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","pop","obj","angle","degToRad","parsePhysicsModel","rigidBodies","parsePhysicsRigidBody","physicsModels","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsScene","bindJointAxis","parseKinematicsBindJointAxis","kinematicsScenes","param","tmpJointIndex","jointIndex","substr","buildKinematicsScene","getKinematicsScene","setupKinematics","kinematicsModelId","kinematicsSceneId","visualSceneId","visualScenes","kinematicsModel","kinematicsScene","visualScene","getVisualScene","jointMap","targetElement","collada","querySelector","parentVisualElement","parentElement","connect","visualElement","visualElementName","traverse","buildTransformList","m0","kinematics","getJointValue","jointData","setJointValue","multiply","makeRotationAxis","makeTranslation","vector","prepareNodes","element","setAttribute","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","skeleton","root","buildBoneHierarchy","hasVisualScene","children","error","bone","processed","bones","boneInverses","isBone","buildNode","objects","instanceCamera","controller","newObjects","buildObjects","isSkinnedMesh","bind","normalizeSkinWeights","instanceLight","add","fallbackMaterial","resolveMaterialBinding","instanceMaterials","skinning","attributes","parseVisualScene","buildVisualScene","group","parseScene","setupAnimations","parserErrorToText","parserError","result","stack","Node","TEXT_NODE","apply","scene","DOMParser","parseFromString","errorElement","errorText","version","asset","setFromEuler","PI","multiplyScalar"],"mappings":"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","sourcesContent":["// https://raw.githubusercontent.com/mrdoob/three.js/master/examples/jsm/loaders/ColladaLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nimport {\n\tAmbientLight,\n\tAnimationClip,\n\tBone,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tDefaultLoadingManager,\n\tDirectionalLight,\n\tDoubleSide,\n\tEuler,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLine,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoaderUtils,\n\tMath as _Math,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tScene,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tTextureLoader,\n\tVector3,\n\tVectorKeyframeTrack\n} from \"three\";\nimport { TGALoader } from \"../loaders/TGALoader.js\";\n\nvar ColladaLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n};\n\nColladaLoader.prototype = {\n\n\tconstructor: ColladaLoader,\n\n\tcrossOrigin: 'anonymous',\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar path = ( scope.path === undefined ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t},\n\n\tsetResourcePath: function ( value ) {\n\n\t\tthis.resourcePath = value;\n\t\treturn this;\n\n\t},\n\n\toptions: {\n\n\t\tset convertUpAxis( value ) {\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.' );\n\n\t\t}\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tparse: function ( text, path ) {\n\n\t\tfunction getElementsByTagName( xml, name ) {\n\n\t\t\t// Non recursive xml.getElementsByTagName() ...\n\n\t\t\tvar array = [];\n\t\t\tvar childNodes = xml.childNodes;\n\n\t\t\tfor ( var i = 0, l = childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = childNodes[ i ];\n\n\t\t\t\tif ( child.nodeName === name ) {\n\n\t\t\t\t\tarray.push( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseStrings( text ) {\n\n\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\tvar parts = text.trim().split( /\\s+/ );\n\t\t\tvar array = new Array( parts.length );\n\n\t\t\tfor ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = parts[ i ];\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseFloats( text ) {\n\n\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\tvar parts = text.trim().split( /\\s+/ );\n\t\t\tvar array = new Array( parts.length );\n\n\t\t\tfor ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = parseFloat( parts[ i ] );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseInts( text ) {\n\n\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\tvar parts = text.trim().split( /\\s+/ );\n\t\t\tvar array = new Array( parts.length );\n\n\t\t\tfor ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = parseInt( parts[ i ] );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseId( text ) {\n\n\t\t\treturn text.substring( 1 );\n\n\t\t}\n\n\t\tfunction generateId() {\n\n\t\t\treturn 'three_default_' + ( count ++ );\n\n\t\t}\n\n\t\tfunction isEmpty( object ) {\n\n\t\t\treturn Object.keys( object ).length === 0;\n\n\t\t}\n\n\t\t// asset\n\n\t\tfunction parseAsset( xml ) {\n\n\t\t\treturn {\n\t\t\t\tunit: parseAssetUnit( getElementsByTagName( xml, 'unit' )[ 0 ] ),\n\t\t\t\tupAxis: parseAssetUpAxis( getElementsByTagName( xml, 'up_axis' )[ 0 ] )\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseAssetUnit( xml ) {\n\n\t\t\tif ( ( xml !== undefined ) && ( xml.hasAttribute( 'meter' ) === true ) ) {\n\n\t\t\t\treturn parseFloat( xml.getAttribute( 'meter' ) );\n\n\t\t\t} else {\n\n\t\t\t\treturn 1; // default 1 meter\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAssetUpAxis( xml ) {\n\n\t\t\treturn xml !== undefined ? xml.textContent : 'Y_UP';\n\n\t\t}\n\n\t\t// library\n\n\t\tfunction parseLibrary( xml, libraryName, nodeName, parser ) {\n\n\t\t\tvar library = getElementsByTagName( xml, libraryName )[ 0 ];\n\n\t\t\tif ( library !== undefined ) {\n\n\t\t\t\tvar elements = getElementsByTagName( library, nodeName );\n\n\t\t\t\tfor ( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\t\tparser( elements[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildLibrary( data, builder ) {\n\n\t\t\tfor ( var name in data ) {\n\n\t\t\t\tvar object = data[ name ];\n\t\t\t\tobject.build = builder( data[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// get\n\n\t\tfunction getBuild( data, builder ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\tdata.build = builder( data );\n\n\t\t\treturn data.build;\n\n\t\t}\n\n\t\t// animation\n\n\t\tfunction parseAnimation( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tsources: {},\n\t\t\t\tsamplers: {},\n\t\t\t\tchannels: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tvar id;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tid = child.getAttribute( 'id' );\n\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'sampler':\n\t\t\t\t\t\tid = child.getAttribute( 'id' );\n\t\t\t\t\t\tdata.samplers[ id ] = parseAnimationSampler( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'channel':\n\t\t\t\t\t\tid = child.getAttribute( 'target' );\n\t\t\t\t\t\tdata.channels[ id ] = parseAnimationChannel( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.animations[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseAnimationSampler( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tinputs: {},\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tdata.inputs[ semantic ] = id;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseAnimationChannel( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tvar target = xml.getAttribute( 'target' );\n\n\t\t\t// parsing SID Addressing Syntax\n\n\t\t\tvar parts = target.split( '/' );\n\n\t\t\tvar id = parts.shift();\n\t\t\tvar sid = parts.shift();\n\n\t\t\t// check selection syntax\n\n\t\t\tvar arraySyntax = ( sid.indexOf( '(' ) !== - 1 );\n\t\t\tvar memberSyntax = ( sid.indexOf( '.' ) !== - 1 );\n\n\t\t\tif ( memberSyntax ) {\n\n\t\t\t\t//  member selection access\n\n\t\t\t\tparts = sid.split( '.' );\n\t\t\t\tsid = parts.shift();\n\t\t\t\tdata.member = parts.shift();\n\n\t\t\t} else if ( arraySyntax ) {\n\n\t\t\t\t// array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n\n\t\t\t\tvar indices = sid.split( '(' );\n\t\t\t\tsid = indices.shift();\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\t\tindices[ i ] = parseInt( indices[ i ].replace( /\\)/, '' ) );\n\n\t\t\t\t}\n\n\t\t\t\tdata.indices = indices;\n\n\t\t\t}\n\n\t\t\tdata.id = id;\n\t\t\tdata.sid = sid;\n\n\t\t\tdata.arraySyntax = arraySyntax;\n\t\t\tdata.memberSyntax = memberSyntax;\n\n\t\t\tdata.sampler = parseId( xml.getAttribute( 'source' ) );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildAnimation( data ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar channels = data.channels;\n\t\t\tvar samplers = data.samplers;\n\t\t\tvar sources = data.sources;\n\n\t\t\tfor ( var target in channels ) {\n\n\t\t\t\tif ( channels.hasOwnProperty( target ) ) {\n\n\t\t\t\t\tvar channel = channels[ target ];\n\t\t\t\t\tvar sampler = samplers[ channel.sampler ];\n\n\t\t\t\t\tvar inputId = sampler.inputs.INPUT;\n\t\t\t\t\tvar outputId = sampler.inputs.OUTPUT;\n\n\t\t\t\t\tvar inputSource = sources[ inputId ];\n\t\t\t\t\tvar outputSource = sources[ outputId ];\n\n\t\t\t\t\tvar animation = buildAnimationChannel( channel, inputSource, outputSource );\n\n\t\t\t\t\tcreateKeyframeTracks( animation, tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn tracks;\n\n\t\t}\n\n\t\tfunction getAnimation( id ) {\n\n\t\t\treturn getBuild( library.animations[ id ], buildAnimation );\n\n\t\t}\n\n\t\tfunction buildAnimationChannel( channel, inputSource, outputSource ) {\n\n\t\t\tvar node = library.nodes[ channel.id ];\n\t\t\tvar object3D = getNode( node.id );\n\n\t\t\tvar transform = node.transforms[ channel.sid ];\n\t\t\tvar defaultMatrix = node.matrix.clone().transpose();\n\n\t\t\tvar time, stride;\n\t\t\tvar i, il, j, jl;\n\n\t\t\tvar data = {};\n\n\t\t\t// the collada spec allows the animation of data in various ways.\n\t\t\t// depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n\t\t\tswitch ( transform ) {\n\n\t\t\t\tcase 'matrix':\n\n\t\t\t\t\tfor ( i = 0, il = inputSource.array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\ttime = inputSource.array[ i ];\n\t\t\t\t\t\tstride = i * outputSource.stride;\n\n\t\t\t\t\t\tif ( data[ time ] === undefined ) data[ time ] = {};\n\n\t\t\t\t\t\tif ( channel.arraySyntax === true ) {\n\n\t\t\t\t\t\t\tvar value = outputSource.array[ stride ];\n\t\t\t\t\t\t\tvar index = channel.indices[ 0 ] + 4 * channel.indices[ 1 ];\n\n\t\t\t\t\t\t\tdata[ time ][ index ] = value;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( j = 0, jl = outputSource.stride; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tdata[ time ][ j ] = outputSource.array[ stride + j ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'translate':\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'rotate':\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'scale':\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tvar keyframes = prepareAnimationData( data, defaultMatrix );\n\n\t\t\tvar animation = {\n\t\t\t\tname: object3D.uuid,\n\t\t\t\tkeyframes: keyframes\n\t\t\t};\n\n\t\t\treturn animation;\n\n\t\t}\n\n\t\tfunction prepareAnimationData( data, defaultMatrix ) {\n\n\t\t\tvar keyframes = [];\n\n\t\t\t// transfer data into a sortable array\n\n\t\t\tfor ( var time in data ) {\n\n\t\t\t\tkeyframes.push( { time: parseFloat( time ), value: data[ time ] } );\n\n\t\t\t}\n\n\t\t\t// ensure keyframes are sorted by time\n\n\t\t\tkeyframes.sort( ascending );\n\n\t\t\t// now we clean up all animation data, so we can use them for keyframe tracks\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\ttransformAnimationData( keyframes, i, defaultMatrix.elements[ i ] );\n\n\t\t\t}\n\n\t\t\treturn keyframes;\n\n\t\t\t// array sort function\n\n\t\t\tfunction ascending( a, b ) {\n\n\t\t\t\treturn a.time - b.time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar position = new Vector3();\n\t\tvar scale = new Vector3();\n\t\tvar quaternion = new Quaternion();\n\n\t\tfunction createKeyframeTracks( animation, tracks ) {\n\n\t\t\tvar keyframes = animation.keyframes;\n\t\t\tvar name = animation.name;\n\n\t\t\tvar times = [];\n\t\t\tvar positionData = [];\n\t\t\tvar quaternionData = [];\n\t\t\tvar scaleData = [];\n\n\t\t\tfor ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\tvar time = keyframe.time;\n\t\t\t\tvar value = keyframe.value;\n\n\t\t\t\tmatrix.fromArray( value ).transpose();\n\t\t\t\tmatrix.decompose( position, quaternion, scale );\n\n\t\t\t\ttimes.push( time );\n\t\t\t\tpositionData.push( position.x, position.y, position.z );\n\t\t\t\tquaternionData.push( quaternion.x, quaternion.y, quaternion.z, quaternion.w );\n\t\t\t\tscaleData.push( scale.x, scale.y, scale.z );\n\n\t\t\t}\n\n\t\t\tif ( positionData.length > 0 ) tracks.push( new VectorKeyframeTrack( name + '.position', times, positionData ) );\n\t\t\tif ( quaternionData.length > 0 ) tracks.push( new QuaternionKeyframeTrack( name + '.quaternion', times, quaternionData ) );\n\t\t\tif ( scaleData.length > 0 ) tracks.push( new VectorKeyframeTrack( name + '.scale', times, scaleData ) );\n\n\t\t\treturn tracks;\n\n\t\t}\n\n\t\tfunction transformAnimationData( keyframes, property, defaultValue ) {\n\n\t\t\tvar keyframe;\n\n\t\t\tvar empty = true;\n\t\t\tvar i, l;\n\n\t\t\t// check, if values of a property are missing in our keyframes\n\n\t\t\tfor ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\tkeyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] === undefined ) {\n\n\t\t\t\t\tkeyframe.value[ property ] = null; // mark as missing\n\n\t\t\t\t} else {\n\n\t\t\t\t\tempty = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( empty === true ) {\n\n\t\t\t\t// no values at all, so we set a default value\n\n\t\t\t\tfor ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\t\tkeyframe = keyframes[ i ];\n\n\t\t\t\t\tkeyframe.value[ property ] = defaultValue;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// filling gaps\n\n\t\t\t\tcreateMissingKeyframes( keyframes, property );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createMissingKeyframes( keyframes, property ) {\n\n\t\t\tvar prev, next;\n\n\t\t\tfor ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] === null ) {\n\n\t\t\t\t\tprev = getPrev( keyframes, i, property );\n\t\t\t\t\tnext = getNext( keyframes, i, property );\n\n\t\t\t\t\tif ( prev === null ) {\n\n\t\t\t\t\t\tkeyframe.value[ property ] = next.value[ property ];\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( next === null ) {\n\n\t\t\t\t\t\tkeyframe.value[ property ] = prev.value[ property ];\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinterpolate( keyframe, prev, next, property );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getPrev( keyframes, i, property ) {\n\n\t\t\twhile ( i >= 0 ) {\n\n\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] !== null ) return keyframe;\n\n\t\t\t\ti --;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfunction getNext( keyframes, i, property ) {\n\n\t\t\twhile ( i < keyframes.length ) {\n\n\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] !== null ) return keyframe;\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfunction interpolate( key, prev, next, property ) {\n\n\t\t\tif ( ( next.time - prev.time ) === 0 ) {\n\n\t\t\t\tkey.value[ property ] = prev.value[ property ];\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tkey.value[ property ] = ( ( key.time - prev.time ) * ( next.value[ property ] - prev.value[ property ] ) / ( next.time - prev.time ) ) + prev.value[ property ];\n\n\t\t}\n\n\t\t// animation clips\n\n\t\tfunction parseAnimationClip( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'id' ) || 'default',\n\t\t\t\tstart: parseFloat( xml.getAttribute( 'start' ) || 0 ),\n\t\t\t\tend: parseFloat( xml.getAttribute( 'end' ) || 0 ),\n\t\t\t\tanimations: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'instance_animation':\n\t\t\t\t\t\tdata.animations.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.clips[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildAnimationClip( data ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar name = data.name;\n\t\t\tvar duration = ( data.end - data.start ) || - 1;\n\t\t\tvar animations = data.animations;\n\n\t\t\tfor ( var i = 0, il = animations.length; i < il; i ++ ) {\n\n\t\t\t\tvar animationTracks = getAnimation( animations[ i ] );\n\n\t\t\t\tfor ( var j = 0, jl = animationTracks.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttracks.push( animationTracks[ j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, duration, tracks );\n\n\t\t}\n\n\t\tfunction getAnimationClip( id ) {\n\n\t\t\treturn getBuild( library.clips[ id ], buildAnimationClip );\n\n\t\t}\n\n\t\t// controller\n\n\t\tfunction parseController( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'skin':\n\t\t\t\t\t\t// there is exactly one skin per controller\n\t\t\t\t\t\tdata.id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tdata.skin = parseSkin( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'morph':\n\t\t\t\t\t\tdata.id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Morph target animation not supported yet.' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.controllers[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseSkin( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tsources: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'bind_shape_matrix':\n\t\t\t\t\t\tdata.bindShapeMatrix = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tvar id = child.getAttribute( 'id' );\n\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'joints':\n\t\t\t\t\t\tdata.joints = parseJoints( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertex_weights':\n\t\t\t\t\t\tdata.vertexWeights = parseVertexWeights( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseJoints( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tinputs: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tdata.inputs[ semantic ] = id;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseVertexWeights( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tinputs: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tvar offset = parseInt( child.getAttribute( 'offset' ) );\n\t\t\t\t\t\tdata.inputs[ semantic ] = { id: id, offset: offset };\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vcount':\n\t\t\t\t\t\tdata.vcount = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v':\n\t\t\t\t\t\tdata.v = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildController( data ) {\n\n\t\t\tvar build = {\n\t\t\t\tid: data.id\n\t\t\t};\n\n\t\t\tvar geometry = library.geometries[ build.id ];\n\n\t\t\tif ( data.skin !== undefined ) {\n\n\t\t\t\tbuild.skin = buildSkin( data.skin );\n\n\t\t\t\t// we enhance the 'sources' property of the corresponding geometry with our skin data\n\n\t\t\t\tgeometry.sources.skinIndices = build.skin.indices;\n\t\t\t\tgeometry.sources.skinWeights = build.skin.weights;\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildSkin( data ) {\n\n\t\t\tvar BONE_LIMIT = 4;\n\n\t\t\tvar build = {\n\t\t\t\tjoints: [], // this must be an array to preserve the joint order\n\t\t\t\tindices: {\n\t\t\t\t\tarray: [],\n\t\t\t\t\tstride: BONE_LIMIT\n\t\t\t\t},\n\t\t\t\tweights: {\n\t\t\t\t\tarray: [],\n\t\t\t\t\tstride: BONE_LIMIT\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar sources = data.sources;\n\t\t\tvar vertexWeights = data.vertexWeights;\n\n\t\t\tvar vcount = vertexWeights.vcount;\n\t\t\tvar v = vertexWeights.v;\n\t\t\tvar jointOffset = vertexWeights.inputs.JOINT.offset;\n\t\t\tvar weightOffset = vertexWeights.inputs.WEIGHT.offset;\n\n\t\t\tvar jointSource = data.sources[ data.joints.inputs.JOINT ];\n\t\t\tvar inverseSource = data.sources[ data.joints.inputs.INV_BIND_MATRIX ];\n\n\t\t\tvar weights = sources[ vertexWeights.inputs.WEIGHT.id ].array;\n\t\t\tvar stride = 0;\n\n\t\t\tvar i, j, l;\n\n\t\t\t// procces skin data for each vertex\n\n\t\t\tfor ( i = 0, l = vcount.length; i < l; i ++ ) {\n\n\t\t\t\tvar jointCount = vcount[ i ]; // this is the amount of joints that affect a single vertex\n\t\t\t\tvar vertexSkinData = [];\n\n\t\t\t\tfor ( j = 0; j < jointCount; j ++ ) {\n\n\t\t\t\t\tvar skinIndex = v[ stride + jointOffset ];\n\t\t\t\t\tvar weightId = v[ stride + weightOffset ];\n\t\t\t\t\tvar skinWeight = weights[ weightId ];\n\n\t\t\t\t\tvertexSkinData.push( { index: skinIndex, weight: skinWeight } );\n\n\t\t\t\t\tstride += 2;\n\n\t\t\t\t}\n\n\t\t\t\t// we sort the joints in descending order based on the weights.\n\t\t\t\t// this ensures, we only procced the most important joints of the vertex\n\n\t\t\t\tvertexSkinData.sort( descending );\n\n\t\t\t\t// now we provide for each vertex a set of four index and weight values.\n\t\t\t\t// the order of the skin data matches the order of vertices\n\n\t\t\t\tfor ( j = 0; j < BONE_LIMIT; j ++ ) {\n\n\t\t\t\t\tvar d = vertexSkinData[ j ];\n\n\t\t\t\t\tif ( d !== undefined ) {\n\n\t\t\t\t\t\tbuild.indices.array.push( d.index );\n\t\t\t\t\t\tbuild.weights.array.push( d.weight );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbuild.indices.array.push( 0 );\n\t\t\t\t\t\tbuild.weights.array.push( 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// setup bind matrix\n\n\t\t\tif ( data.bindShapeMatrix ) {\n\n\t\t\t\tbuild.bindMatrix = new Matrix4().fromArray( data.bindShapeMatrix ).transpose();\n\n\t\t\t} else {\n\n\t\t\t\tbuild.bindMatrix = new Matrix4().identity();\n\n\t\t\t}\n\n\t\t\t// process bones and inverse bind matrix data\n\n\t\t\tfor ( i = 0, l = jointSource.array.length; i < l; i ++ ) {\n\n\t\t\t\tvar name = jointSource.array[ i ];\n\t\t\t\tvar boneInverse = new Matrix4().fromArray( inverseSource.array, i * inverseSource.stride ).transpose();\n\n\t\t\t\tbuild.joints.push( { name: name, boneInverse: boneInverse } );\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t\t// array sort function\n\n\t\t\tfunction descending( a, b ) {\n\n\t\t\t\treturn b.weight - a.weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getController( id ) {\n\n\t\t\treturn getBuild( library.controllers[ id ], buildController );\n\n\t\t}\n\n\t\t// image\n\n\t\tfunction parseImage( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tinit_from: getElementsByTagName( xml, 'init_from' )[ 0 ].textContent\n\t\t\t};\n\n\t\t\tlibrary.images[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildImage( data ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\treturn data.init_from;\n\n\t\t}\n\n\t\tfunction getImage( id ) {\n\n\t\t\tvar data = library.images[ id ];\n\n\t\t\tif ( data !== undefined ) {\n\n\t\t\t\treturn getBuild( data, buildImage );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find image with ID:', id );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// effect\n\n\t\tfunction parseEffect( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'profile_COMMON':\n\t\t\t\t\t\tdata.profile = parseEffectProfileCOMMON( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.effects[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseEffectProfileCOMMON( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tsurfaces: {},\n\t\t\t\tsamplers: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'newparam':\n\t\t\t\t\t\tparseEffectNewparam( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\tdata.technique = parseEffectTechnique( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tdata.extra = parseEffectExtra( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectNewparam( xml, data ) {\n\n\t\t\tvar sid = xml.getAttribute( 'sid' );\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'surface':\n\t\t\t\t\t\tdata.surfaces[ sid ] = parseEffectSurface( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'sampler2D':\n\t\t\t\t\t\tdata.samplers[ sid ] = parseEffectSampler( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseEffectSurface( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'init_from':\n\t\t\t\t\t\tdata.init_from = child.textContent;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectSampler( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tdata.source = child.textContent;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectTechnique( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'constant':\n\t\t\t\t\tcase 'lambert':\n\t\t\t\t\tcase 'blinn':\n\t\t\t\t\tcase 'phong':\n\t\t\t\t\t\tdata.type = child.nodeName;\n\t\t\t\t\t\tdata.parameters = parseEffectParameters( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameters( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'emission':\n\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\tcase 'specular':\n\t\t\t\t\tcase 'bump':\n\t\t\t\t\tcase 'ambient':\n\t\t\t\t\tcase 'shininess':\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseEffectParameter( child );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tdata[ child.nodeName ] = {\n\t\t\t\t\t\t\topaque: child.getAttribute( 'opaque' ),\n\t\t\t\t\t\t\tdata: parseEffectParameter( child )\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameter( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'float':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tdata[ child.nodeName ] = { id: child.getAttribute( 'texture' ), extra: parseEffectParameterTexture( child ) };\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameterTexture( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\ttechnique: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tparseEffectParameterTextureExtra( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameterTextureExtra( xml, data ) {\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\tparseEffectParameterTextureExtraTechnique( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseEffectParameterTextureExtraTechnique( xml, data ) {\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'repeatU':\n\t\t\t\t\tcase 'repeatV':\n\t\t\t\t\tcase 'offsetU':\n\t\t\t\t\tcase 'offsetV':\n\t\t\t\t\t\tdata.technique[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'wrapU':\n\t\t\t\t\tcase 'wrapV':\n\n\t\t\t\t\t\t// some files have values for wrapU/wrapV which become NaN via parseInt\n\n\t\t\t\t\t\tif ( child.textContent.toUpperCase() === 'TRUE' ) {\n\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = 1;\n\n\t\t\t\t\t\t} else if ( child.textContent.toUpperCase() === 'FALSE' ) {\n\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = 0;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = parseInt( child.textContent );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseEffectExtra( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\tdata.technique = parseEffectExtraTechnique( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectExtraTechnique( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'double_sided':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseInt( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildEffect( data ) {\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction getEffect( id ) {\n\n\t\t\treturn getBuild( library.effects[ id ], buildEffect );\n\n\t\t}\n\n\t\t// material\n\n\t\tfunction parseMaterial( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' )\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'instance_effect':\n\t\t\t\t\t\tdata.url = parseId( child.getAttribute( 'url' ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.materials[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction getTextureLoader( image ) {\n\n\t\t\tvar loader;\n\n\t\t\tvar extension = image.slice( ( image.lastIndexOf( '.' ) - 1 >>> 0 ) + 2 ); // http://www.jstips.co/en/javascript/get-file-extension/\n\t\t\textension = extension.toLowerCase();\n\n\t\t\tswitch ( extension ) {\n\n\t\t\t\tcase 'tga':\n\t\t\t\t\tloader = tgaLoader;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tloader = textureLoader;\n\n\t\t\t}\n\n\t\t\treturn loader;\n\n\t\t}\n\n\t\tfunction buildMaterial( data ) {\n\n\t\t\tvar effect = getEffect( data.url );\n\t\t\tvar technique = effect.profile.technique;\n\t\t\tvar extra = effect.profile.extra;\n\n\t\t\tvar material;\n\n\t\t\tswitch ( technique.type ) {\n\n\t\t\t\tcase 'phong':\n\t\t\t\tcase 'blinn':\n\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'lambert':\n\t\t\t\t\tmaterial = new MeshLambertMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmaterial = new MeshBasicMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tmaterial.name = data.name || '';\n\n\t\t\tfunction getTexture( textureObject ) {\n\n\t\t\t\tvar sampler = effect.profile.samplers[ textureObject.id ];\n\t\t\t\tvar image = null;\n\n\t\t\t\t// get image\n\n\t\t\t\tif ( sampler !== undefined ) {\n\n\t\t\t\t\tvar surface = effect.profile.surfaces[ sampler.source ];\n\t\t\t\t\timage = getImage( surface.init_from );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).' );\n\t\t\t\t\timage = getImage( textureObject.id );\n\n\t\t\t\t}\n\n\t\t\t\t// create texture if image is avaiable\n\n\t\t\t\tif ( image !== null ) {\n\n\t\t\t\t\tvar loader = getTextureLoader( image );\n\n\t\t\t\t\tif ( loader !== undefined ) {\n\n\t\t\t\t\t\tvar texture = loader.load( image );\n\n\t\t\t\t\t\tvar extra = textureObject.extra;\n\n\t\t\t\t\t\tif ( extra !== undefined && extra.technique !== undefined && isEmpty( extra.technique ) === false ) {\n\n\t\t\t\t\t\t\tvar technique = extra.technique;\n\n\t\t\t\t\t\t\ttexture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n\t\t\t\t\t\t\ttexture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n\n\t\t\t\t\t\t\ttexture.offset.set( technique.offsetU || 0, technique.offsetV || 0 );\n\t\t\t\t\t\t\ttexture.repeat.set( technique.repeatU || 1, technique.repeatV || 1 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\t\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Loader for texture %s not found.', image );\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id );\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar parameters = technique.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvar parameter = parameters[ key ];\n\n\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\t\tif ( parameter.color ) material.color.fromArray( parameter.color );\n\t\t\t\t\t\tif ( parameter.texture ) material.map = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specular':\n\t\t\t\t\t\tif ( parameter.color && material.specular ) material.specular.fromArray( parameter.color );\n\t\t\t\t\t\tif ( parameter.texture ) material.specularMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bump':\n\t\t\t\t\t\tif ( parameter.texture ) material.normalMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ambient':\n\t\t\t\t\t\tif ( parameter.texture ) material.lightMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shininess':\n\t\t\t\t\t\tif ( parameter.float && material.shininess ) material.shininess = parameter.float;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'emission':\n\t\t\t\t\t\tif ( parameter.color && material.emissive ) material.emissive.fromArray( parameter.color );\n\t\t\t\t\t\tif ( parameter.texture ) material.emissiveMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar transparent = parameters[ 'transparent' ];\n\t\t\tvar transparency = parameters[ 'transparency' ];\n\n\t\t\t// <transparency> does not exist but <transparent>\n\n\t\t\tif ( transparency === undefined && transparent ) {\n\n\t\t\t\ttransparency = {\n\t\t\t\t\tfloat: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// <transparent> does not exist but <transparency>\n\n\t\t\tif ( transparent === undefined && transparency ) {\n\n\t\t\t\ttransparent = {\n\t\t\t\t\topaque: 'A_ONE',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcolor: [ 1, 1, 1, 1 ]\n\t\t\t\t\t} };\n\n\t\t\t}\n\n\t\t\tif ( transparent && transparency ) {\n\n\t\t\t\t// handle case if a texture exists but no color\n\n\t\t\t\tif ( transparent.data.texture ) {\n\n\t\t\t\t\t// we do not set an alpha map (see #13792)\n\n\t\t\t\t\tmaterial.transparent = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = transparent.data.color;\n\n\t\t\t\t\tswitch ( transparent.opaque ) {\n\n\t\t\t\t\t\tcase 'A_ONE':\n\t\t\t\t\t\t\tmaterial.opacity = color[ 3 ] * transparency.float;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'RGB_ZERO':\n\t\t\t\t\t\t\tmaterial.opacity = 1 - ( color[ 0 ] * transparency.float );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'A_ZERO':\n\t\t\t\t\t\t\tmaterial.opacity = 1 - ( color[ 3 ] * transparency.float );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'RGB_ONE':\n\t\t\t\t\t\t\tmaterial.opacity = color[ 0 ] * transparency.float;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material.opacity < 1 ) material.transparent = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1 ) {\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getMaterial( id ) {\n\n\t\t\treturn getBuild( library.materials[ id ], buildMaterial );\n\n\t\t}\n\n\t\t// camera\n\n\t\tfunction parseCamera( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' )\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'optics':\n\t\t\t\t\t\tdata.optics = parseCameraOptics( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.cameras[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseCameraOptics( xml ) {\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\treturn parseCameraTechnique( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {};\n\n\t\t}\n\n\t\tfunction parseCameraTechnique( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'perspective':\n\t\t\t\t\tcase 'orthographic':\n\n\t\t\t\t\t\tdata.technique = child.nodeName;\n\t\t\t\t\t\tdata.parameters = parseCameraParameters( child );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseCameraParameters( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'xfov':\n\t\t\t\t\tcase 'yfov':\n\t\t\t\t\tcase 'xmag':\n\t\t\t\t\tcase 'ymag':\n\t\t\t\t\tcase 'znear':\n\t\t\t\t\tcase 'zfar':\n\t\t\t\t\tcase 'aspect_ratio':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildCamera( data ) {\n\n\t\t\tvar camera;\n\n\t\t\tswitch ( data.optics.technique ) {\n\n\t\t\t\tcase 'perspective':\n\t\t\t\t\tcamera = new PerspectiveCamera(\n\t\t\t\t\t\tdata.optics.parameters.yfov,\n\t\t\t\t\t\tdata.optics.parameters.aspect_ratio,\n\t\t\t\t\t\tdata.optics.parameters.znear,\n\t\t\t\t\t\tdata.optics.parameters.zfar\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'orthographic':\n\t\t\t\t\tvar ymag = data.optics.parameters.ymag;\n\t\t\t\t\tvar xmag = data.optics.parameters.xmag;\n\t\t\t\t\tvar aspectRatio = data.optics.parameters.aspect_ratio;\n\n\t\t\t\t\txmag = ( xmag === undefined ) ? ( ymag * aspectRatio ) : xmag;\n\t\t\t\t\tymag = ( ymag === undefined ) ? ( xmag / aspectRatio ) : ymag;\n\n\t\t\t\t\txmag *= 0.5;\n\t\t\t\t\tymag *= 0.5;\n\n\t\t\t\t\tcamera = new OrthographicCamera(\n\t\t\t\t\t\t- xmag, xmag, ymag, - ymag, // left, right, top, bottom\n\t\t\t\t\t\tdata.optics.parameters.znear,\n\t\t\t\t\t\tdata.optics.parameters.zfar\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tcamera.name = data.name || '';\n\n\t\t\treturn camera;\n\n\t\t}\n\n\t\tfunction getCamera( id ) {\n\n\t\t\tvar data = library.cameras[ id ];\n\n\t\t\tif ( data !== undefined ) {\n\n\t\t\t\treturn getBuild( data, buildCamera );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find camera with ID:', id );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// light\n\n\t\tfunction parseLight( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tdata = parseLightTechnique( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.lights[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseLightTechnique( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'directional':\n\t\t\t\t\tcase 'point':\n\t\t\t\t\tcase 'spot':\n\t\t\t\t\tcase 'ambient':\n\n\t\t\t\t\t\tdata.technique = child.nodeName;\n\t\t\t\t\t\tdata.parameters = parseLightParameters( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseLightParameters( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.color = new Color().fromArray( array );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'falloff_angle':\n\t\t\t\t\t\tdata.falloffAngle = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'quadratic_attenuation':\n\t\t\t\t\t\tvar f = parseFloat( child.textContent );\n\t\t\t\t\t\tdata.distance = f ? Math.sqrt( 1 / f ) : 0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildLight( data ) {\n\n\t\t\tvar light;\n\n\t\t\tswitch ( data.technique ) {\n\n\t\t\t\tcase 'directional':\n\t\t\t\t\tlight = new DirectionalLight();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'point':\n\t\t\t\t\tlight = new PointLight();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'spot':\n\t\t\t\t\tlight = new SpotLight();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ambient':\n\t\t\t\t\tlight = new AmbientLight();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( data.parameters.color ) light.color.copy( data.parameters.color );\n\t\t\tif ( data.parameters.distance ) light.distance = data.parameters.distance;\n\n\t\t\treturn light;\n\n\t\t}\n\n\t\tfunction getLight( id ) {\n\n\t\t\tvar data = library.lights[ id ];\n\n\t\t\tif ( data !== undefined ) {\n\n\t\t\t\treturn getBuild( data, buildLight );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find light with ID:', id );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// geometry\n\n\t\tfunction parseGeometry( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ),\n\t\t\t\tsources: {},\n\t\t\t\tvertices: {},\n\t\t\t\tprimitives: []\n\t\t\t};\n\n\t\t\tvar mesh = getElementsByTagName( xml, 'mesh' )[ 0 ];\n\n\t\t\t// the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\t\t\tif ( mesh === undefined ) return;\n\n\t\t\tfor ( var i = 0; i < mesh.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = mesh.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tvar id = child.getAttribute( 'id' );\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertices':\n\t\t\t\t\t\t// data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n\t\t\t\t\t\tdata.vertices = parseGeometryVertices( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'polygons':\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'lines':\n\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\tcase 'polylist':\n\t\t\t\t\tcase 'triangles':\n\t\t\t\t\t\tdata.primitives.push( parseGeometryPrimitive( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.geometries[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseSource( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tarray: [],\n\t\t\t\tstride: 3\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'float_array':\n\t\t\t\t\t\tdata.array = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Name_array':\n\t\t\t\t\t\tdata.array = parseStrings( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tvar accessor = getElementsByTagName( child, 'accessor' )[ 0 ];\n\n\t\t\t\t\t\tif ( accessor !== undefined ) {\n\n\t\t\t\t\t\t\tdata.stride = parseInt( accessor.getAttribute( 'stride' ) );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseGeometryVertices( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tdata[ child.getAttribute( 'semantic' ) ] = parseId( child.getAttribute( 'source' ) );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseGeometryPrimitive( xml ) {\n\n\t\t\tvar primitive = {\n\t\t\t\ttype: xml.nodeName,\n\t\t\t\tmaterial: xml.getAttribute( 'material' ),\n\t\t\t\tcount: parseInt( xml.getAttribute( 'count' ) ),\n\t\t\t\tinputs: {},\n\t\t\t\tstride: 0,\n\t\t\t\thasUV: false\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tvar offset = parseInt( child.getAttribute( 'offset' ) );\n\t\t\t\t\t\tvar set = parseInt( child.getAttribute( 'set' ) );\n\t\t\t\t\t\tvar inputname = ( set > 0 ? semantic + set : semantic );\n\t\t\t\t\t\tprimitive.inputs[ inputname ] = { id: id, offset: offset };\n\t\t\t\t\t\tprimitive.stride = Math.max( primitive.stride, offset + 1 );\n\t\t\t\t\t\tif ( semantic === 'TEXCOORD' ) primitive.hasUV = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vcount':\n\t\t\t\t\t\tprimitive.vcount = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'p':\n\t\t\t\t\t\tprimitive.p = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn primitive;\n\n\t\t}\n\n\t\tfunction groupPrimitives( primitives ) {\n\n\t\t\tvar build = {};\n\n\t\t\tfor ( var i = 0; i < primitives.length; i ++ ) {\n\n\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\tif ( build[ primitive.type ] === undefined ) build[ primitive.type ] = [];\n\n\t\t\t\tbuild[ primitive.type ].push( primitive );\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction checkUVCoordinates( primitives ) {\n\n\t\t\tvar count = 0;\n\n\t\t\tfor ( var i = 0, l = primitives.length; i < l; i ++ ) {\n\n\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\tif ( primitive.hasUV === true ) {\n\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( count > 0 && count < primitives.length ) {\n\n\t\t\t\tprimitives.uvsNeedsFix = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildGeometry( data ) {\n\n\t\t\tvar build = {};\n\n\t\t\tvar sources = data.sources;\n\t\t\tvar vertices = data.vertices;\n\t\t\tvar primitives = data.primitives;\n\n\t\t\tif ( primitives.length === 0 ) return {};\n\n\t\t\t// our goal is to create one buffer geometry for a single type of primitives\n\t\t\t// first, we group all primitives by their type\n\n\t\t\tvar groupedPrimitives = groupPrimitives( primitives );\n\n\t\t\tfor ( var type in groupedPrimitives ) {\n\n\t\t\t\tvar primitiveType = groupedPrimitives[ type ];\n\n\t\t\t\t// second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n\t\t\t\tcheckUVCoordinates( primitiveType );\n\n\t\t\t\t// third, create a buffer geometry for each type of primitives\n\n\t\t\t\tbuild[ type ] = buildGeometryType( primitiveType, sources, vertices );\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildGeometryType( primitives, sources, vertices ) {\n\n\t\t\tvar build = {};\n\n\t\t\tvar position = { array: [], stride: 0 };\n\t\t\tvar normal = { array: [], stride: 0 };\n\t\t\tvar uv = { array: [], stride: 0 };\n\t\t\tvar uv2 = { array: [], stride: 0 };\n\t\t\tvar color = { array: [], stride: 0 };\n\n\t\t\tvar skinIndex = { array: [], stride: 4 };\n\t\t\tvar skinWeight = { array: [], stride: 4 };\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar materialKeys = [];\n\n\t\t\tvar start = 0;\n\n\t\t\tfor ( var p = 0; p < primitives.length; p ++ ) {\n\n\t\t\t\tvar primitive = primitives[ p ];\n\t\t\t\tvar inputs = primitive.inputs;\n\n\t\t\t\t// groups\n\n\t\t\t\tvar count = 0;\n\n\t\t\t\tswitch ( primitive.type ) {\n\n\t\t\t\t\tcase 'lines':\n\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\t\tcount = primitive.count * 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'triangles':\n\t\t\t\t\t\tcount = primitive.count * 3;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'polylist':\n\n\t\t\t\t\t\tfor ( var g = 0; g < primitive.count; g ++ ) {\n\n\t\t\t\t\t\t\tvar vc = primitive.vcount[ g ];\n\n\t\t\t\t\t\t\tswitch ( vc ) {\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tcount += 3; // single triangle\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tcount += 6; // quad, subdivided into two triangles\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tcount += ( vc - 2 ) * 3; // polylist with more than four vertices\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unknow primitive type:', primitive.type );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addGroup( start, count, p );\n\t\t\t\tstart += count;\n\n\t\t\t\t// material\n\n\t\t\t\tif ( primitive.material ) {\n\n\t\t\t\t\tmaterialKeys.push( primitive.material );\n\n\t\t\t\t}\n\n\t\t\t\t// geometry data\n\n\t\t\t\tfor ( var name in inputs ) {\n\n\t\t\t\t\tvar input = inputs[ name ];\n\n\t\t\t\t\tswitch ( name )\t{\n\n\t\t\t\t\t\tcase 'VERTEX':\n\t\t\t\t\t\t\tfor ( var key in vertices ) {\n\n\t\t\t\t\t\t\t\tvar id = vertices[ key ];\n\n\t\t\t\t\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\t\t\t\t\tcase 'POSITION':\n\t\t\t\t\t\t\t\t\t\tvar prevLength = position.array.length;\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, position.array );\n\t\t\t\t\t\t\t\t\t\tposition.stride = sources[ id ].stride;\n\n\t\t\t\t\t\t\t\t\t\tif ( sources.skinWeights && sources.skinIndices ) {\n\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources.skinIndices, input.offset, skinIndex.array );\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources.skinWeights, input.offset, skinWeight.array );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// see #3803\n\n\t\t\t\t\t\t\t\t\t\tif ( primitive.hasUV === false && primitives.uvsNeedsFix === true ) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar count = ( position.array.length - prevLength ) / position.stride;\n\n\t\t\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// fill missing uv coordinates\n\n\t\t\t\t\t\t\t\t\t\t\t\tuv.array.push( 0, 0 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'NORMAL':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, normal.array );\n\t\t\t\t\t\t\t\t\t\tnormal.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, color.array );\n\t\t\t\t\t\t\t\t\t\tcolor.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'TEXCOORD':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, uv.array );\n\t\t\t\t\t\t\t\t\t\tuv.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'TEXCOORD1':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, uv2.array );\n\t\t\t\t\t\t\t\t\t\tuv.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'NORMAL':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, normal.array );\n\t\t\t\t\t\t\tnormal.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, color.array );\n\t\t\t\t\t\t\tcolor.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TEXCOORD':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, uv.array );\n\t\t\t\t\t\t\tuv.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TEXCOORD1':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, uv2.array );\n\t\t\t\t\t\t\tuv2.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tif ( position.array.length > 0 ) geometry.addAttribute( 'position', new Float32BufferAttribute( position.array, position.stride ) );\n\t\t\tif ( normal.array.length > 0 ) geometry.addAttribute( 'normal', new Float32BufferAttribute( normal.array, normal.stride ) );\n\t\t\tif ( color.array.length > 0 ) geometry.addAttribute( 'color', new Float32BufferAttribute( color.array, color.stride ) );\n\t\t\tif ( uv.array.length > 0 ) geometry.addAttribute( 'uv', new Float32BufferAttribute( uv.array, uv.stride ) );\n\t\t\tif ( uv2.array.length > 0 ) geometry.addAttribute( 'uv2', new Float32BufferAttribute( uv2.array, uv2.stride ) );\n\n\t\t\tif ( skinIndex.array.length > 0 ) geometry.addAttribute( 'skinIndex', new Float32BufferAttribute( skinIndex.array, skinIndex.stride ) );\n\t\t\tif ( skinWeight.array.length > 0 ) geometry.addAttribute( 'skinWeight', new Float32BufferAttribute( skinWeight.array, skinWeight.stride ) );\n\n\t\t\tbuild.data = geometry;\n\t\t\tbuild.type = primitives[ 0 ].type;\n\t\t\tbuild.materialKeys = materialKeys;\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildGeometryData( primitive, source, offset, array ) {\n\n\t\t\tvar indices = primitive.p;\n\t\t\tvar stride = primitive.stride;\n\t\t\tvar vcount = primitive.vcount;\n\n\t\t\tfunction pushVector( i ) {\n\n\t\t\t\tvar index = indices[ i + offset ] * sourceStride;\n\t\t\t\tvar length = index + sourceStride;\n\n\t\t\t\tfor ( ; index < length; index ++ ) {\n\n\t\t\t\t\tarray.push( sourceArray[ index ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar sourceArray = source.array;\n\t\t\tvar sourceStride = source.stride;\n\n\t\t\tif ( primitive.vcount !== undefined ) {\n\n\t\t\t\tvar index = 0;\n\n\t\t\t\tfor ( var i = 0, l = vcount.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar count = vcount[ i ];\n\n\t\t\t\t\tif ( count === 4 ) {\n\n\t\t\t\t\t\tvar a = index + stride * 0;\n\t\t\t\t\t\tvar b = index + stride * 1;\n\t\t\t\t\t\tvar c = index + stride * 2;\n\t\t\t\t\t\tvar d = index + stride * 3;\n\n\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( d );\n\t\t\t\t\t\tpushVector( b ); pushVector( c ); pushVector( d );\n\n\t\t\t\t\t} else if ( count === 3 ) {\n\n\t\t\t\t\t\tvar a = index + stride * 0;\n\t\t\t\t\t\tvar b = index + stride * 1;\n\t\t\t\t\t\tvar c = index + stride * 2;\n\n\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( c );\n\n\t\t\t\t\t} else if ( count > 4 ) {\n\n\t\t\t\t\t\tfor ( var k = 1, kl = ( count - 2 ); k <= kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar a = index + stride * 0;\n\t\t\t\t\t\t\tvar b = index + stride * k;\n\t\t\t\t\t\t\tvar c = index + stride * ( k + 1 );\n\n\t\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( c );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tindex += stride * count;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += stride ) {\n\n\t\t\t\t\tpushVector( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getGeometry( id ) {\n\n\t\t\treturn getBuild( library.geometries[ id ], buildGeometry );\n\n\t\t}\n\n\t\t// kinematics\n\n\t\tfunction parseKinematicsModel( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\tjoints: {},\n\t\t\t\tlinks: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tparseKinematicsTechniqueCommon( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.kinematicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildKinematicsModel( data ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction getKinematicsModel( id ) {\n\n\t\t\treturn getBuild( library.kinematicsModels[ id ], buildKinematicsModel );\n\n\t\t}\n\n\t\tfunction parseKinematicsTechniqueCommon( xml, data ) {\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'joint':\n\t\t\t\t\t\tdata.joints[ child.getAttribute( 'sid' ) ] = parseKinematicsJoint( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'link':\n\t\t\t\t\t\tdata.links.push( parseKinematicsLink( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseKinematicsJoint( xml ) {\n\n\t\t\tvar data;\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'prismatic':\n\t\t\t\t\tcase 'revolute':\n\t\t\t\t\t\tdata = parseKinematicsJointParameter( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsJointParameter( xml, data ) {\n\n\t\t\tvar data = {\n\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\taxis: new Vector3(),\n\t\t\t\tlimits: {\n\t\t\t\t\tmin: 0,\n\t\t\t\t\tmax: 0\n\t\t\t\t},\n\t\t\t\ttype: xml.nodeName,\n\t\t\t\tstatic: false,\n\t\t\t\tzeroPosition: 0,\n\t\t\t\tmiddlePosition: 0\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'axis':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.axis.fromArray( array );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'limits':\n\t\t\t\t\t\tvar max = child.getElementsByTagName( 'max' )[ 0 ];\n\t\t\t\t\t\tvar min = child.getElementsByTagName( 'min' )[ 0 ];\n\n\t\t\t\t\t\tdata.limits.max = parseFloat( max.textContent );\n\t\t\t\t\t\tdata.limits.min = parseFloat( min.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// if min is equal to or greater than max, consider the joint static\n\n\t\t\tif ( data.limits.min >= data.limits.max ) {\n\n\t\t\t\tdata.static = true;\n\n\t\t\t}\n\n\t\t\t// calculate middle position\n\n\t\t\tdata.middlePosition = ( data.limits.min + data.limits.max ) / 2.0;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsLink( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\tattachments: [],\n\t\t\t\ttransforms: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'attachment_full':\n\t\t\t\t\t\tdata.attachments.push( parseKinematicsAttachment( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tdata.transforms.push( parseKinematicsTransform( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsAttachment( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tjoint: xml.getAttribute( 'joint' ).split( '/' ).pop(),\n\t\t\t\ttransforms: [],\n\t\t\t\tlinks: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'link':\n\t\t\t\t\t\tdata.links.push( parseKinematicsLink( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tdata.transforms.push( parseKinematicsTransform( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsTransform( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\ttype: xml.nodeName\n\t\t\t};\n\n\t\t\tvar array = parseFloats( xml.textContent );\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'matrix':\n\t\t\t\t\tdata.obj = new Matrix4();\n\t\t\t\t\tdata.obj.fromArray( array ).transpose();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'translate':\n\t\t\t\t\tdata.obj = new Vector3();\n\t\t\t\t\tdata.obj.fromArray( array );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'rotate':\n\t\t\t\t\tdata.obj = new Vector3();\n\t\t\t\t\tdata.obj.fromArray( array );\n\t\t\t\t\tdata.angle = _Math.degToRad( array[ 3 ] );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// physics\n\n\t\tfunction parsePhysicsModel( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\trigidBodies: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'rigid_body':\n\t\t\t\t\t\tdata.rigidBodies[ child.getAttribute( 'name' ) ] = {};\n\t\t\t\t\t\tparsePhysicsRigidBody( child, data.rigidBodies[ child.getAttribute( 'name' ) ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.physicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parsePhysicsRigidBody( xml, data ) {\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tparsePhysicsTechniqueCommon( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parsePhysicsTechniqueCommon( xml, data ) {\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'inertia':\n\t\t\t\t\t\tdata.inertia = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mass':\n\t\t\t\t\t\tdata.mass = parseFloats( child.textContent )[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// scene\n\n\t\tfunction parseKinematicsScene( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tbindJointAxis: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'bind_joint_axis':\n\t\t\t\t\t\tdata.bindJointAxis.push( parseKinematicsBindJointAxis( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.kinematicsScenes[ parseId( xml.getAttribute( 'url' ) ) ] = data;\n\n\t\t}\n\n\t\tfunction parseKinematicsBindJointAxis( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\ttarget: xml.getAttribute( 'target' ).split( '/' ).pop()\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'axis':\n\t\t\t\t\t\tvar param = child.getElementsByTagName( 'param' )[ 0 ];\n\t\t\t\t\t\tdata.axis = param.textContent;\n\t\t\t\t\t\tvar tmpJointIndex = data.axis.split( 'inst_' ).pop().split( 'axis' )[ 0 ];\n\t\t\t\t\t\tdata.jointIndex = tmpJointIndex.substr( 0, tmpJointIndex.length - 1 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildKinematicsScene( data ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction getKinematicsScene( id ) {\n\n\t\t\treturn getBuild( library.kinematicsScenes[ id ], buildKinematicsScene );\n\n\t\t}\n\n\t\tfunction setupKinematics() {\n\n\t\t\tvar kinematicsModelId = Object.keys( library.kinematicsModels )[ 0 ];\n\t\t\tvar kinematicsSceneId = Object.keys( library.kinematicsScenes )[ 0 ];\n\t\t\tvar visualSceneId = Object.keys( library.visualScenes )[ 0 ];\n\n\t\t\tif ( kinematicsModelId === undefined || kinematicsSceneId === undefined ) return;\n\n\t\t\tvar kinematicsModel = getKinematicsModel( kinematicsModelId );\n\t\t\tvar kinematicsScene = getKinematicsScene( kinematicsSceneId );\n\t\t\tvar visualScene = getVisualScene( visualSceneId );\n\n\t\t\tvar bindJointAxis = kinematicsScene.bindJointAxis;\n\t\t\tvar jointMap = {};\n\n\t\t\tfor ( var i = 0, l = bindJointAxis.length; i < l; i ++ ) {\n\n\t\t\t\tvar axis = bindJointAxis[ i ];\n\n\t\t\t\t// the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n\t\t\t\tvar targetElement = collada.querySelector( '[sid=\"' + axis.target + '\"]' );\n\n\t\t\t\tif ( targetElement ) {\n\n\t\t\t\t\t// get the parent of the transfrom element\n\n\t\t\t\t\tvar parentVisualElement = targetElement.parentElement;\n\n\t\t\t\t\t// connect the joint of the kinematics model with the element in the visual scene\n\n\t\t\t\t\tconnect( axis.jointIndex, parentVisualElement );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction connect( jointIndex, visualElement ) {\n\n\t\t\t\tvar visualElementName = visualElement.getAttribute( 'name' );\n\t\t\t\tvar joint = kinematicsModel.joints[ jointIndex ];\n\n\t\t\t\tvisualScene.traverse( function ( object ) {\n\n\t\t\t\t\tif ( object.name === visualElementName ) {\n\n\t\t\t\t\t\tjointMap[ jointIndex ] = {\n\t\t\t\t\t\t\tobject: object,\n\t\t\t\t\t\t\ttransforms: buildTransformList( visualElement ),\n\t\t\t\t\t\t\tjoint: joint,\n\t\t\t\t\t\t\tposition: joint.zeroPosition\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar m0 = new Matrix4();\n\n\t\t\tkinematics = {\n\n\t\t\t\tjoints: kinematicsModel && kinematicsModel.joints,\n\n\t\t\t\tgetJointValue: function ( jointIndex ) {\n\n\t\t\t\t\tvar jointData = jointMap[ jointIndex ];\n\n\t\t\t\t\tif ( jointData ) {\n\n\t\t\t\t\t\treturn jointData.position;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetJointValue: function ( jointIndex, value ) {\n\n\t\t\t\t\tvar jointData = jointMap[ jointIndex ];\n\n\t\t\t\t\tif ( jointData ) {\n\n\t\t\t\t\t\tvar joint = jointData.joint;\n\n\t\t\t\t\t\tif ( value > joint.limits.max || value < joint.limits.min ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').' );\n\n\t\t\t\t\t\t} else if ( joint.static ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' is static.' );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar object = jointData.object;\n\t\t\t\t\t\t\tvar axis = joint.axis;\n\t\t\t\t\t\t\tvar transforms = jointData.transforms;\n\n\t\t\t\t\t\t\tmatrix.identity();\n\n\t\t\t\t\t\t\t// each update, we have to apply all transforms in the correct order\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < transforms.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar transform = transforms[ i ];\n\n\t\t\t\t\t\t\t\t// if there is a connection of the transform node with a joint, apply the joint value\n\n\t\t\t\t\t\t\t\tif ( transform.sid && transform.sid.indexOf( jointIndex ) !== - 1 ) {\n\n\t\t\t\t\t\t\t\t\tswitch ( joint.type ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'revolute':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeRotationAxis( axis, _Math.degToRad( value ) ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'prismatic':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeTranslation( axis.x * value, axis.y * value, axis.z * value ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unknown joint type: ' + joint.type );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tswitch ( transform.type ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( transform.obj );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.scale( transform.obj );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeRotationAxis( transform.obj, transform.angle ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tobject.matrix.copy( matrix );\n\t\t\t\t\t\t\tobject.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\t\t\t\tjointMap[ jointIndex ].position = value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.log( 'THREE.ColladaLoader: ' + jointIndex + ' does not exist.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction buildTransformList( node ) {\n\n\t\t\tvar transforms = [];\n\n\t\t\tvar xml = collada.querySelector( '[id=\"' + node.id + '\"]' );\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvar matrix = new Matrix4().fromArray( array ).transpose();\n\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\tobj: matrix\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvar vector = new Vector3().fromArray( array );\n\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\tobj: vector\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvar vector = new Vector3().fromArray( array );\n\t\t\t\t\t\tvar angle = _Math.degToRad( array[ 3 ] );\n\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\tobj: vector,\n\t\t\t\t\t\t\tangle: angle\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn transforms;\n\n\t\t}\n\n\t\t// nodes\n\n\t\tfunction prepareNodes( xml ) {\n\n\t\t\tvar elements = xml.getElementsByTagName( 'node' );\n\n\t\t\t// ensure all node elements have id attributes\n\n\t\t\tfor ( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\tvar element = elements[ i ];\n\n\t\t\t\tif ( element.hasAttribute( 'id' ) === false ) {\n\n\t\t\t\t\telement.setAttribute( 'id', generateId() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar matrix = new Matrix4();\n\t\tvar vector = new Vector3();\n\n\t\tfunction parseNode( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\ttype: xml.getAttribute( 'type' ),\n\t\t\t\tid: xml.getAttribute( 'id' ),\n\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\tmatrix: new Matrix4(),\n\t\t\t\tnodes: [],\n\t\t\t\tinstanceCameras: [],\n\t\t\t\tinstanceControllers: [],\n\t\t\t\tinstanceLights: [],\n\t\t\t\tinstanceGeometries: [],\n\t\t\t\tinstanceNodes: [],\n\t\t\t\ttransforms: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'node':\n\t\t\t\t\t\tdata.nodes.push( child.getAttribute( 'id' ) );\n\t\t\t\t\t\tparseNode( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_camera':\n\t\t\t\t\t\tdata.instanceCameras.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_controller':\n\t\t\t\t\t\tdata.instanceControllers.push( parseNodeInstance( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_light':\n\t\t\t\t\t\tdata.instanceLights.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_geometry':\n\t\t\t\t\t\tdata.instanceGeometries.push( parseNodeInstance( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_node':\n\t\t\t\t\t\tdata.instanceNodes.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.matrix.multiply( matrix.fromArray( array ).transpose() );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvector.fromArray( array );\n\t\t\t\t\t\tdata.matrix.multiply( matrix.makeTranslation( vector.x, vector.y, vector.z ) );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvar angle = _Math.degToRad( array[ 3 ] );\n\t\t\t\t\t\tdata.matrix.multiply( matrix.makeRotationAxis( vector.fromArray( array ), angle ) );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.matrix.scale( vector.fromArray( array ) );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasNode( data.id ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id );\n\n\t\t\t} else {\n\n\t\t\t\tlibrary.nodes[ data.id ] = data;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseNodeInstance( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tid: parseId( xml.getAttribute( 'url' ) ),\n\t\t\t\tmaterials: {},\n\t\t\t\tskeletons: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'bind_material':\n\t\t\t\t\t\tvar instances = child.getElementsByTagName( 'instance_material' );\n\n\t\t\t\t\t\tfor ( var j = 0; j < instances.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar instance = instances[ j ];\n\t\t\t\t\t\t\tvar symbol = instance.getAttribute( 'symbol' );\n\t\t\t\t\t\t\tvar target = instance.getAttribute( 'target' );\n\n\t\t\t\t\t\t\tdata.materials[ symbol ] = parseId( target );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'skeleton':\n\t\t\t\t\t\tdata.skeletons.push( parseId( child.textContent ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildSkeleton( skeletons, joints ) {\n\n\t\t\tvar boneData = [];\n\t\t\tvar sortedBoneData = [];\n\n\t\t\tvar i, j, data;\n\n\t\t\t// a skeleton can have multiple root bones. collada expresses this\n\t\t\t// situtation with multiple \"skeleton\" tags per controller instance\n\n\t\t\tfor ( i = 0; i < skeletons.length; i ++ ) {\n\n\t\t\t\tvar skeleton = skeletons[ i ];\n\n\t\t\t\tvar root;\n\n\t\t\t\tif ( hasNode( skeleton ) ) {\n\n\t\t\t\t\troot = getNode( skeleton );\n\t\t\t\t\tbuildBoneHierarchy( root, joints, boneData );\n\n\t\t\t\t} else if ( hasVisualScene( skeleton ) ) {\n\n\t\t\t\t\t// handle case where the skeleton refers to the visual scene (#13335)\n\n\t\t\t\t\tvar visualScene = library.visualScenes[ skeleton ];\n\t\t\t\t\tvar children = visualScene.children;\n\n\t\t\t\t\tfor ( var j = 0; j < children.length; j ++ ) {\n\n\t\t\t\t\t\tvar child = children[ j ];\n\n\t\t\t\t\t\tif ( child.type === 'JOINT' ) {\n\n\t\t\t\t\t\t\tvar root = getNode( child.id );\n\t\t\t\t\t\t\tbuildBoneHierarchy( root, joints, boneData );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// sort bone data (the order is defined in the corresponding controller)\n\n\t\t\tfor ( i = 0; i < joints.length; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < boneData.length; j ++ ) {\n\n\t\t\t\t\tdata = boneData[ j ];\n\n\t\t\t\t\tif ( data.bone.name === joints[ i ].name ) {\n\n\t\t\t\t\t\tsortedBoneData[ i ] = data;\n\t\t\t\t\t\tdata.processed = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add unprocessed bone data at the end of the list\n\n\t\t\tfor ( i = 0; i < boneData.length; i ++ ) {\n\n\t\t\t\tdata = boneData[ i ];\n\n\t\t\t\tif ( data.processed === false ) {\n\n\t\t\t\t\tsortedBoneData.push( data );\n\t\t\t\t\tdata.processed = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// setup arrays for skeleton creation\n\n\t\t\tvar bones = [];\n\t\t\tvar boneInverses = [];\n\n\t\t\tfor ( i = 0; i < sortedBoneData.length; i ++ ) {\n\n\t\t\t\tdata = sortedBoneData[ i ];\n\n\t\t\t\tbones.push( data.bone );\n\t\t\t\tboneInverses.push( data.boneInverse );\n\n\t\t\t}\n\n\t\t\treturn new Skeleton( bones, boneInverses );\n\n\t\t}\n\n\t\tfunction buildBoneHierarchy( root, joints, boneData ) {\n\n\t\t\t// setup bone data from visual scene\n\n\t\t\troot.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isBone === true ) {\n\n\t\t\t\t\tvar boneInverse;\n\n\t\t\t\t\t// retrieve the boneInverse from the controller data\n\n\t\t\t\t\tfor ( var i = 0; i < joints.length; i ++ ) {\n\n\t\t\t\t\t\tvar joint = joints[ i ];\n\n\t\t\t\t\t\tif ( joint.name === object.name ) {\n\n\t\t\t\t\t\t\tboneInverse = joint.boneInverse;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( boneInverse === undefined ) {\n\n\t\t\t\t\t\t// Unfortunately, there can be joints in the visual scene that are not part of the\n\t\t\t\t\t\t// corresponding controller. In this case, we have to create a dummy boneInverse matrix\n\t\t\t\t\t\t// for the respective bone. This bone won't affect any vertices, because there are no skin indices\n\t\t\t\t\t\t// and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n\t\t\t\t\t\t// ensure a correct animation of the model.\n\n\t\t\t\t\t\tboneInverse = new Matrix4();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tboneData.push( { bone: object, boneInverse: boneInverse, processed: false } );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction buildNode( data ) {\n\n\t\t\tvar objects = [];\n\n\t\t\tvar matrix = data.matrix;\n\t\t\tvar nodes = data.nodes;\n\t\t\tvar type = data.type;\n\t\t\tvar instanceCameras = data.instanceCameras;\n\t\t\tvar instanceControllers = data.instanceControllers;\n\t\t\tvar instanceLights = data.instanceLights;\n\t\t\tvar instanceGeometries = data.instanceGeometries;\n\t\t\tvar instanceNodes = data.instanceNodes;\n\n\t\t\t// nodes\n\n\t\t\tfor ( var i = 0, l = nodes.length; i < l; i ++ ) {\n\n\t\t\t\tobjects.push( getNode( nodes[ i ] ) );\n\n\t\t\t}\n\n\t\t\t// instance cameras\n\n\t\t\tfor ( var i = 0, l = instanceCameras.length; i < l; i ++ ) {\n\n\t\t\t\tvar instanceCamera = getCamera( instanceCameras[ i ] );\n\n\t\t\t\tif ( instanceCamera !== null ) {\n\n\t\t\t\t\tobjects.push( instanceCamera.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance controllers\n\n\t\t\tfor ( var i = 0, l = instanceControllers.length; i < l; i ++ ) {\n\n\t\t\t\tvar instance = instanceControllers[ i ];\n\t\t\t\tvar controller = getController( instance.id );\n\t\t\t\tvar geometries = getGeometry( controller.id );\n\t\t\t\tvar newObjects = buildObjects( geometries, instance.materials );\n\n\t\t\t\tvar skeletons = instance.skeletons;\n\t\t\t\tvar joints = controller.skin.joints;\n\n\t\t\t\tvar skeleton = buildSkeleton( skeletons, joints );\n\n\t\t\t\tfor ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar object = newObjects[ j ];\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\tobject.bind( skeleton, controller.skin.bindMatrix );\n\t\t\t\t\t\tobject.normalizeSkinWeights();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance lights\n\n\t\t\tfor ( var i = 0, l = instanceLights.length; i < l; i ++ ) {\n\n\t\t\t\tvar instanceLight = getLight( instanceLights[ i ] );\n\n\t\t\t\tif ( instanceLight !== null ) {\n\n\t\t\t\t\tobjects.push( instanceLight.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance geometries\n\n\t\t\tfor ( var i = 0, l = instanceGeometries.length; i < l; i ++ ) {\n\n\t\t\t\tvar instance = instanceGeometries[ i ];\n\n\t\t\t\t// a single geometry instance in collada can lead to multiple object3Ds.\n\t\t\t\t// this is the case when primitives are combined like triangles and lines\n\n\t\t\t\tvar geometries = getGeometry( instance.id );\n\t\t\t\tvar newObjects = buildObjects( geometries, instance.materials );\n\n\t\t\t\tfor ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tobjects.push( newObjects[ j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance nodes\n\n\t\t\tfor ( var i = 0, l = instanceNodes.length; i < l; i ++ ) {\n\n\t\t\t\tobjects.push( getNode( instanceNodes[ i ] ).clone() );\n\n\t\t\t}\n\n\t\t\tvar object;\n\n\t\t\tif ( nodes.length === 0 && objects.length === 1 ) {\n\n\t\t\t\tobject = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tobject = ( type === 'JOINT' ) ? new Bone() : new Group();\n\n\t\t\t\tfor ( var i = 0; i < objects.length; i ++ ) {\n\n\t\t\t\t\tobject.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( object.name === '' ) {\n\n\t\t\t\tobject.name = ( type === 'JOINT' ) ? data.sid : data.name;\n\n\t\t\t}\n\n\t\t\tobject.matrix.copy( matrix );\n\t\t\tobject.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\treturn object;\n\n\t\t}\n\n\t\tvar fallbackMaterial = new MeshBasicMaterial( { color: 0xff00ff } );\n\n\t\tfunction resolveMaterialBinding( keys, instanceMaterials ) {\n\n\t\t\tvar materials = [];\n\n\t\t\tfor ( var i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\tvar id = instanceMaterials[ keys[ i ] ];\n\n\t\t\t\tif ( id === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[ i ] );\n\t\t\t\t\tmaterials.push( fallbackMaterial );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterials.push( getMaterial( id ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t}\n\n\t\tfunction buildObjects( geometries, instanceMaterials ) {\n\n\t\t\tvar objects = [];\n\n\t\t\tfor ( var type in geometries ) {\n\n\t\t\t\tvar geometry = geometries[ type ];\n\n\t\t\t\tvar materials = resolveMaterialBinding( geometry.materialKeys, instanceMaterials );\n\n\t\t\t\t// handle case if no materials are defined\n\n\t\t\t\tif ( materials.length === 0 ) {\n\n\t\t\t\t\tif ( type === 'lines' || type === 'linestrips' ) {\n\n\t\t\t\t\t\tmaterials.push( new LineBasicMaterial() );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials.push( new MeshPhongMaterial() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// regard skinning\n\n\t\t\t\tvar skinning = ( geometry.data.attributes.skinIndex !== undefined );\n\n\t\t\t\tif ( skinning ) {\n\n\t\t\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tmaterials[ i ].skinning = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// choose between a single or multi materials (material array)\n\n\t\t\t\tvar material = ( materials.length === 1 ) ? materials[ 0 ] : materials;\n\n\t\t\t\t// now create a specific 3D object\n\n\t\t\t\tvar object;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'lines':\n\t\t\t\t\t\tobject = new LineSegments( geometry.data, material );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\t\tobject = new Line( geometry.data, material );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'triangles':\n\t\t\t\t\tcase 'polylist':\n\t\t\t\t\t\tif ( skinning ) {\n\n\t\t\t\t\t\t\tobject = new SkinnedMesh( geometry.data, material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tobject = new Mesh( geometry.data, material );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tobjects.push( object );\n\n\t\t\t}\n\n\t\t\treturn objects;\n\n\t\t}\n\n\t\tfunction hasNode( id ) {\n\n\t\t\treturn library.nodes[ id ] !== undefined;\n\n\t\t}\n\n\t\tfunction getNode( id ) {\n\n\t\t\treturn getBuild( library.nodes[ id ], buildNode );\n\n\t\t}\n\n\t\t// visual scenes\n\n\t\tfunction parseVisualScene( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ),\n\t\t\t\tchildren: []\n\t\t\t};\n\n\t\t\tprepareNodes( xml );\n\n\t\t\tvar elements = getElementsByTagName( xml, 'node' );\n\n\t\t\tfor ( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\tdata.children.push( parseNode( elements[ i ] ) );\n\n\t\t\t}\n\n\t\t\tlibrary.visualScenes[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildVisualScene( data ) {\n\n\t\t\tvar group = new Group();\n\t\t\tgroup.name = data.name;\n\n\t\t\tvar children = data.children;\n\n\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tvar child = children[ i ];\n\n\t\t\t\tgroup.add( getNode( child.id ) );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tfunction hasVisualScene( id ) {\n\n\t\t\treturn library.visualScenes[ id ] !== undefined;\n\n\t\t}\n\n\t\tfunction getVisualScene( id ) {\n\n\t\t\treturn getBuild( library.visualScenes[ id ], buildVisualScene );\n\n\t\t}\n\n\t\t// scenes\n\n\t\tfunction parseScene( xml ) {\n\n\t\t\tvar instance = getElementsByTagName( xml, 'instance_visual_scene' )[ 0 ];\n\t\t\treturn getVisualScene( parseId( instance.getAttribute( 'url' ) ) );\n\n\t\t}\n\n\t\tfunction setupAnimations() {\n\n\t\t\tvar clips = library.clips;\n\n\t\t\tif ( isEmpty( clips ) === true ) {\n\n\t\t\t\tif ( isEmpty( library.animations ) === false ) {\n\n\t\t\t\t\t// if there are animations but no clips, we create a default clip for playback\n\n\t\t\t\t\tvar tracks = [];\n\n\t\t\t\t\tfor ( var id in library.animations ) {\n\n\t\t\t\t\t\tvar animationTracks = getAnimation( id );\n\n\t\t\t\t\t\tfor ( var i = 0, l = animationTracks.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\ttracks.push( animationTracks[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimations.push( new AnimationClip( 'default', - 1, tracks ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var id in clips ) {\n\n\t\t\t\t\tanimations.push( getAnimationClip( id ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the parser error element into text with each child elements text\n\t\t// separated by new lines.\n\n\t\tfunction parserErrorToText( parserError ) {\n\n\t\t\tvar result = '';\n\t\t\tvar stack = [ parserError ];\n\n\t\t\twhile ( stack.length ) {\n\n\t\t\t\tvar node = stack.shift();\n\n\t\t\t\tif ( node.nodeType === Node.TEXT_NODE ) {\n\n\t\t\t\t\tresult += node.textContent;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult += '\\n';\n\t\t\t\t\tstack.push.apply( stack, node.childNodes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result.trim();\n\n\t\t}\n\n\t\tif ( text.length === 0 ) {\n\n\t\t\treturn { scene: new Scene() };\n\n\t\t}\n\n\t\tvar xml = new DOMParser().parseFromString( text, 'application/xml' );\n\n\t\tvar collada = getElementsByTagName( xml, 'COLLADA' )[ 0 ];\n\n\t\tvar parserError = xml.getElementsByTagName( 'parsererror' )[ 0 ];\n\t\tif ( parserError !== undefined ) {\n\n\t\t\t// Chrome will return parser error with a div in it\n\n\t\t\tvar errorElement = getElementsByTagName( parserError, 'div' )[ 0 ];\n\t\t\tvar errorText;\n\n\t\t\tif ( errorElement ) {\n\n\t\t\t\terrorText = errorElement.textContent;\n\n\t\t\t} else {\n\n\t\t\t\terrorText = parserErrorToText( parserError );\n\n\t\t\t}\n\n\t\t\tconsole.error( 'THREE.ColladaLoader: Failed to parse collada file.\\n', errorText );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// metadata\n\n\t\tvar version = collada.getAttribute( 'version' );\n\t\tconsole.log( 'THREE.ColladaLoader: File version', version );\n\n\t\tvar asset = parseAsset( getElementsByTagName( collada, 'asset' )[ 0 ] );\n\t\tvar textureLoader = new TextureLoader( this.manager );\n\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\tvar tgaLoader;\n\n\t\tif ( TGALoader ) {\n\n\t\t\ttgaLoader = new TGALoader( this.manager );\n\t\t\ttgaLoader.setPath( this.resourcePath || path );\n\n\t\t}\n\n\t\t//\n\n\t\tvar animations = [];\n\t\tvar kinematics = {};\n\t\tvar count = 0;\n\n\t\t//\n\n\t\tvar library = {\n\t\t\tanimations: {},\n\t\t\tclips: {},\n\t\t\tcontrollers: {},\n\t\t\timages: {},\n\t\t\teffects: {},\n\t\t\tmaterials: {},\n\t\t\tcameras: {},\n\t\t\tlights: {},\n\t\t\tgeometries: {},\n\t\t\tnodes: {},\n\t\t\tvisualScenes: {},\n\t\t\tkinematicsModels: {},\n\t\t\tphysicsModels: {},\n\t\t\tkinematicsScenes: {}\n\t\t};\n\n\t\tparseLibrary( collada, 'library_animations', 'animation', parseAnimation );\n\t\tparseLibrary( collada, 'library_animation_clips', 'animation_clip', parseAnimationClip );\n\t\tparseLibrary( collada, 'library_controllers', 'controller', parseController );\n\t\tparseLibrary( collada, 'library_images', 'image', parseImage );\n\t\tparseLibrary( collada, 'library_effects', 'effect', parseEffect );\n\t\tparseLibrary( collada, 'library_materials', 'material', parseMaterial );\n\t\tparseLibrary( collada, 'library_cameras', 'camera', parseCamera );\n\t\tparseLibrary( collada, 'library_lights', 'light', parseLight );\n\t\tparseLibrary( collada, 'library_geometries', 'geometry', parseGeometry );\n\t\tparseLibrary( collada, 'library_nodes', 'node', parseNode );\n\t\tparseLibrary( collada, 'library_visual_scenes', 'visual_scene', parseVisualScene );\n\t\tparseLibrary( collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel );\n\t\tparseLibrary( collada, 'library_physics_models', 'physics_model', parsePhysicsModel );\n\t\tparseLibrary( collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene );\n\n\t\tbuildLibrary( library.animations, buildAnimation );\n\t\tbuildLibrary( library.clips, buildAnimationClip );\n\t\tbuildLibrary( library.controllers, buildController );\n\t\tbuildLibrary( library.images, buildImage );\n\t\tbuildLibrary( library.effects, buildEffect );\n\t\tbuildLibrary( library.materials, buildMaterial );\n\t\tbuildLibrary( library.cameras, buildCamera );\n\t\tbuildLibrary( library.lights, buildLight );\n\t\tbuildLibrary( library.geometries, buildGeometry );\n\t\tbuildLibrary( library.visualScenes, buildVisualScene );\n\n\t\tsetupAnimations();\n\t\tsetupKinematics();\n\n\t\tvar scene = parseScene( getElementsByTagName( collada, 'scene' )[ 0 ] );\n\n\t\tif ( asset.upAxis === 'Z_UP' ) {\n\n\t\t\tscene.quaternion.setFromEuler( new Euler( - Math.PI / 2, 0, 0 ) );\n\n\t\t}\n\n\t\tscene.scale.multiplyScalar( asset.unit );\n\n\t\treturn {\n\t\t\tanimations: animations,\n\t\t\tkinematics: kinematics,\n\t\t\tlibrary: library,\n\t\t\tscene: scene\n\t\t};\n\n\t}\n\n};\n\nexport { ColladaLoader };"]},"metadata":{},"sourceType":"module"}
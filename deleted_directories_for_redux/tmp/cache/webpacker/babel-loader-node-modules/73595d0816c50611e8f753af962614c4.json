{"ast":null,"code":"// import * as THREE from '../build/three.module.js';\nimport * as THREE from 'three';\nimport { OrbitControls } from './kmz/jsm/controls/OrbitControls.js';\nimport { KMZLoader } from './kmz/jsm/loaders/KMZLoader.js';\nvar camera, scene, renderer, cube;\ninit();\n\nfunction init() {\n  scene = new THREE.Scene();\n  var geometry = new THREE.BoxGeometry(100, 100, 100);\n  var material = new THREE.MeshBasicMaterial({\n    color: 0x00ff00\n  }); // §\n\n  cube = new THREE.Mesh(geometry, material);\n  scene.add(cube);\n  scene.background = new THREE.Color(0x999999);\n  var light = new THREE.DirectionalLight(0xffffff);\n  light.position.set(0.5, 1.0, 0.5).normalize();\n  scene.add(light);\n  camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 500);\n  camera.position.y = 5;\n  camera.position.z = 10;\n  scene.add(camera);\n  var grid = new THREE.GridHelper(50, 50, 0xffffff, 0x555555);\n  scene.add(grid);\n  renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n  var loader = new KMZLoader(); // 2 or 1\n\n  loader.load('/kmz_models/1.kmz', function (kmz) {\n    kmz.scene.position.y = 0.5;\n    scene.add(kmz.scene);\n    render();\n  });\n  var controls = new OrbitControls(camera, renderer.domElement);\n  controls.addEventListener('change', render);\n  controls.update();\n  window.addEventListener('resize', onWindowResize, false);\n}\n\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  render();\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}\n\n$(document).on('eZii/moveCube', function (e) {\n  // would be cool to ddo the following using a small neural network like rubygemms brainz\n  // then the layeres of the network could be be printed\n  // and understdoo\n  // maybe by converting them to markov chains // What are hiddden markov chains?\n  var DIRECTION_INDDEX_PRE_BRAINZ = {\n    'north': [1, 0, 0, 0],\n    'east': [0, 1, 0, 0],\n    'south': [0, 0, 1, 0],\n    'west': [0, 0, 0, 1]\n  };\n\n  function dIRECTION_INDDEX_POST_BRAINZ(a) {\n    if (a === [1, 0, 0, 0]) return west;\n    if (a === [0, 1, 0, 0]) return west; // if b ? ⚕\n\n    if (a === [0, 0, 1, 0]) return west;\n    if (a === [0, 0, 0, 1]) return west;\n  }\n\n  var direction_index_pre = DIRECTION_INDDEX_PRE_BRAINZ[e.direction];\n  var direction_index = dIRECTION_INDDEX_POST_BRAINZ(direction_index_pre);\n\n  switch (direction_index) {\n    case 0:\n      cube.position.z -= 10; // probablly reversed because of initial \"LOOK_AT\" of this scene §CHANGE_SOON\n\n      break;\n\n    case 1:\n      cube.position.x += 10;\n      break;\n\n    case 2:\n      cube.position.z += 10; // probablly reversed because of initial \"LOOK_AT\" of this scene §CHANGE_SOON\n\n      break;\n\n    case 3:\n      cube.position.x -= 10;\n      break;\n  }\n\n  render();\n});\n\nfunction moveCube(cardinalPoint) {\n  cube.position.z += 1;\n}","map":{"version":3,"sources":["/Users/lemonandroid/Banal Dropbox/random/ezii-os/app/javascript/packs/kmz.js.erb"],"names":["THREE","OrbitControls","KMZLoader","camera","scene","renderer","cube","init","Scene","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","add","background","Color","light","DirectionalLight","position","set","normalize","PerspectiveCamera","window","innerWidth","innerHeight","y","z","grid","GridHelper","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","document","body","appendChild","domElement","loader","load","kmz","render","controls","addEventListener","update","onWindowResize","aspect","updateProjectionMatrix","$","on","e","DIRECTION_INDDEX_PRE_BRAINZ","dIRECTION_INDDEX_POST_BRAINZ","a","west","direction_index_pre","direction","direction_index","x","moveCube","cardinalPoint"],"mappings":"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","sourcesContent":["\n// import * as THREE from '../build/three.module.js';\nimport * as THREE from 'three';\nimport { OrbitControls } from './kmz/jsm/controls/OrbitControls.js';\nimport { KMZLoader } from './kmz/jsm/loaders/KMZLoader.js';\n\n\t\t\t\nvar camera, scene, renderer, cube;\ninit();\nfunction init() {\n\tscene = new THREE.Scene();\n\t\n\tvar geometry = new THREE.BoxGeometry( 100, 100, 100 );\n\tvar material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );\n\t\n\t// §\n\tcube = new THREE.Mesh( geometry, material );\n\tscene.add( cube );\n\t\n\t\n\tscene.background = new THREE.Color( 0x999999 );\n\tvar light = new THREE.DirectionalLight( 0xffffff );\n\tlight.position.set( 0.5, 1.0, 0.5 ).normalize();\n\tscene.add( light );\n\tcamera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 500 );\n\tcamera.position.y = 5;\n\tcamera.position.z = 10;\n\tscene.add( camera );\n\tvar grid = new THREE.GridHelper( 50, 50, 0xffffff, 0x555555 );\n\tscene.add( grid );\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\tdocument.body.appendChild( renderer.domElement );\n\tvar loader = new KMZLoader();\n\t\n\t// 2 or 1\n\tloader.load( '/kmz_models/1.kmz', function ( kmz ) {\n\t\tkmz.scene.position.y = 0.5;\n\t\tscene.add( kmz.scene );\n\t\trender();\n\t} );\n\tvar controls = new OrbitControls( camera, renderer.domElement );\n\tcontrols.addEventListener( 'change', render );\n\tcontrols.update();\n\twindow.addEventListener( 'resize', onWindowResize, false );\n}\nfunction onWindowResize() {\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trender();\n}\nfunction render() {\n\trenderer.render( scene, camera );\n}\n\n\n$(document).on('eZii/moveCube', function(e) {\n\t// would be cool to ddo the following using a small neural network like rubygemms brainz\n\t// then the layeres of the network could be be printed\n\t// and understdoo\n\t// maybe by converting them to markov chains // What are hiddden markov chains?\n\t\n\t\n\n\tconst DIRECTION_INDDEX_PRE_BRAINZ = {\n\t\t'north': [1, 0, 0, 0],\n\t\t'east': [0, 1, 0, 0],\n\t\t'south': [0, 0, 1, 0],\n\t\t'west': [0, 0, 0, 1]\n\t}\n\n\n\tfunction dIRECTION_INDDEX_POST_BRAINZ(a) {\n\t\tif(a === [1, 0, 0, 0]) return west\n\t\tif(a === [0, 1, 0, 0]) return west // if b ? ⚕\n\t\tif(a === [0, 0, 1, 0]) return west\n\t\tif(a === [0, 0, 0, 1]) return west\n\t}\n\n\n\tlet direction_index_pre = DIRECTION_INDDEX_PRE_BRAINZ[e.direction]\n\tlet direction_index = dIRECTION_INDDEX_POST_BRAINZ(direction_index_pre)\n\n\tswitch (direction_index) {\n\tcase 0:\n\t\t\tcube.position.z -= 10; // probablly reversed because of initial \"LOOK_AT\" of this scene §CHANGE_SOON\n\t\tbreak;\n\tcase 1:\n\t\t\tcube.position.x += 10;\n\t\tbreak;\n\tcase 2:\n\t\t\tcube.position.z += 10; // probablly reversed because of initial \"LOOK_AT\" of this scene §CHANGE_SOON\n\t\tbreak;\n\tcase 3:\n\t\t\tcube.position.x -= 10;\n\t\tbreak;\n\t}\n\n\n\trender()\n})\n\nfunction moveCube(cardinalPoint) {\n\tcube.position.z += 1;\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"///#source 1 1 /js/source/wheelnav.core.js\n\n/* ======================================================================================= */\n\n/*                                   wheelnav.js - v1.7.1                                  */\n\n/* ======================================================================================= */\n\n/* This is a small JavaScript library for animated SVG based wheel navigation.             */\n\n/* Requires Raphaël JavaScript Vector Library (http://dmitrybaranovskiy.github.io/raphael/)*/\n\n/* ======================================================================================= */\n\n/* Check http://wheelnavjs.softwaretailoring.net for samples.                              */\n\n/* Fork https://github.com/softwaretailoring/wheelnav for contribution.                    */\n\n/* ======================================================================================= */\n\n/* Copyright © 2014-2017 Gábor Berkesi (http://softwaretailoring.net)                      */\n\n/* Licensed under MIT (https://github.com/softwaretailoring/wheelnav/blob/master/LICENSE)  */\n\n/* ======================================================================================= */\n\n/* ======================================================================================= */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/core.html          */\n\n/* ======================================================================================= */\nwheelnav = function wheelnav(divId, raphael, divWidth, divHeight) {\n  this.holderId = \"wheel\";\n\n  if (divId !== undefined && divId !== null) {\n    this.holderId = divId;\n  }\n\n  var holderDiv = document.getElementById(divId);\n\n  if ((holderDiv === null || holderDiv === undefined) && (raphael === undefined || raphael === null)) {\n    return this;\n  } //Prepare raphael object and set the width\n\n\n  var canvasWidth;\n  var clearContent = true;\n\n  if (raphael === undefined || raphael === null) {\n    var removeChildrens = [];\n\n    for (var i = 0; i < holderDiv.children.length; i++) {\n      if (holderDiv.children[i].localName === \"svg\") {\n        removeChildrens.push(holderDiv.children[i]);\n      }\n    }\n\n    for (var i = 0; i < removeChildrens.length; i++) {\n      holderDiv.removeChild(removeChildrens[i]);\n    }\n\n    if (divWidth !== undefined && divWidth !== null) {\n      if (divHeight === undefined || divHeight === null) {\n        divHeight = divWidth;\n      }\n\n      this.raphael = new Raphael(divId, divWidth, divHeight);\n      canvasWidth = divWidth;\n    } else {\n      this.raphael = new Raphael(divId);\n      canvasWidth = holderDiv.clientWidth;\n    }\n\n    this.raphael.setViewBox(0, 0, this.raphael.width, this.raphael.height, true);\n  } else {\n    //The divId parameter has to be the identifier of the wheelnav in this case.\n    this.raphael = raphael;\n    canvasWidth = this.raphael.width;\n    clearContent = false;\n  } //Public properties\n\n\n  this.centerX = canvasWidth / 2;\n  this.centerY = canvasWidth / 2;\n  this.wheelRadius = canvasWidth / 2;\n  this.navAngle = 0;\n  this.sliceAngle = null;\n  this.titleRotateAngle = null;\n  this.initTitleRotate = false;\n  this.clickModeRotate = true;\n  this.rotateRound = false;\n  this.rotateRoundCount = 0;\n  this.clickModeSpreadOff = false;\n  this.animatetimeCalculated = false; // In clickModeRotate, when animatetimeCalculated is true, the navItem.animatetime calculated by wheelnav.animatetime and current rotationAngle. In this case, the wheelnav.animatetime belongs to the full rotation.\n\n  this.animateRepeatCount = 0;\n  this.clockwise = true;\n  this.multiSelect = false;\n  this.hoverPercent = 1;\n  this.selectedPercent = 1;\n  this.clickablePercentMin = 0;\n  this.clickablePercentMax = 1;\n  this.currentPercent = null;\n  this.cssMode = false;\n  this.selectedToFront = true;\n  this.selectedNavItemIndex = 0;\n  this.navItemCount = 0;\n  this.navItemCountLabeled = false;\n  this.navItemCountLabelOffset = 0;\n  this.navItems = [];\n  this.navItemsEnabled = true;\n  this.animateFinishFunction = null; // These settings are useful when navItem.sliceAngle < 360 / this.navItemCount\n\n  this.navItemsContinuous = false;\n  this.navItemsCentered = true; // This is reasoned when this.navItemsContinuous = false;\n\n  this.colors = colorpalette.defaultpalette;\n  this.titleSpreadScale = null; //Spreader settings\n\n  this.spreaderEnable = false;\n  this.spreaderRadius = 20;\n  this.spreaderStartAngle = 0;\n  this.spreaderSliceAngle = 360;\n  this.spreaderPathFunction = spreaderPath().PieSpreader;\n  this.spreaderPathCustom = null;\n  this.spreaderInPercent = 1;\n  this.spreaderOutPercent = 1;\n  this.spreaderInTitle = \"+\";\n  this.spreaderOutTitle = \"-\";\n  this.spreaderTitleFont = null;\n  this.spreaderPathInAttr = null;\n  this.spreaderPathOutAttr = null;\n  this.spreaderTitleInAttr = null;\n  this.spreaderTitleOutAttr = null;\n  this.spreaderInTitleWidth = null;\n  this.spreaderInTitleHeight = null;\n  this.spreaderOutTitleWidth = null;\n  this.spreaderOutTitleHeight = null; //Percents\n\n  this.minPercent = 0.01;\n  this.maxPercent = 1;\n  this.initPercent = 1; //Marker settings\n\n  this.markerEnable = false;\n  this.markerPathFunction = markerPath().TriangleMarker;\n  this.markerPathCustom = null; //Private properties\n\n  this.currentClick = 0;\n  this.animateLocked = false; //NavItem default settings. These are configurable between initWheel() and createWheel().\n\n  this.slicePathAttr = null;\n  this.sliceHoverAttr = null;\n  this.sliceSelectedAttr = null;\n  this.titleFont = '100 24px Impact, Charcoal, sans-serif';\n  this.titleAttr = null;\n  this.titleHoverAttr = null;\n  this.titleSelectedAttr = null; //When navTitle start with 'imgsrc:' it can parse as URL of image or data URI. These properties are available for images and paths.\n\n  this.titleWidth = null;\n  this.titleHeight = null;\n  this.titleHoverWidth = null;\n  this.titleHoverHeight = null;\n  this.titleSelectedWidth = null;\n  this.titleSelectedHeight = null;\n  this.linePathAttr = null;\n  this.lineHoverAttr = null;\n  this.lineSelectedAttr = null;\n  this.slicePathCustom = null;\n  this.sliceClickablePathCustom = null;\n  this.sliceSelectedPathCustom = null;\n  this.sliceHoverPathCustom = null;\n  this.sliceInitPathCustom = null;\n  this.sliceTransformCustom = null;\n  this.sliceSelectedTransformCustom = null;\n  this.sliceHoverTransformCustom = null;\n  this.sliceInitTransformCustom = null;\n  this.animateeffect = null;\n  this.animatetime = null;\n\n  if (slicePath()[\"PieSlice\"] !== undefined) {\n    this.slicePathFunction = slicePath().PieSlice;\n  } else {\n    this.slicePathFunction = slicePath().NullSlice;\n  }\n\n  this.sliceClickablePathFunction = null;\n  this.sliceTransformFunction = null;\n  this.sliceSelectedPathFunction = null;\n  this.sliceSelectedTransformFunction = null;\n  this.sliceHoverPathFunction = null;\n  this.sliceHoverTransformFunction = null;\n  this.sliceInitPathFunction = null;\n  this.sliceInitTransformFunction = null;\n  this.keynavigateEnabled = false;\n  this.keynavigateOnlyFocus = false;\n  this.keynavigateDownCode = 37; // left arrow\n\n  this.keynavigateDownCodeAlt = 40; // down arrow\n\n  this.keynavigateUpCode = 39; // right arrow\n\n  this.keynavigateUpCodeAlt = 38; // up arrow\n\n  this.parseWheel(holderDiv);\n  return this;\n};\n\nwheelnav.prototype.initWheel = function (titles) {\n  //Init slices and titles\n  this.styleWheel();\n  var navItem;\n\n  if (this.navItemCount === 0) {\n    if (titles === undefined || titles === null || !Array.isArray(titles)) {\n      titles = [\"title-0\", \"title-1\", \"title-2\", \"title-3\"];\n    }\n\n    this.navItemCount = titles.length;\n  } else {\n    titles = null;\n  }\n\n  for (i = 0; i < this.navItemCount; i++) {\n    var itemTitle = \"\";\n\n    if (this.navItemCountLabeled) {\n      itemTitle = (i + this.navItemCountLabelOffset).toString();\n    } else {\n      if (titles !== null) {\n        itemTitle = titles[i];\n      } else {\n        itemTitle = \"\";\n      }\n    }\n\n    navItem = new wheelnavItem(this, itemTitle, i);\n    this.navItems.push(navItem);\n  } //Init colors\n\n\n  var colorIndex = 0;\n\n  for (i = 0; i < this.navItems.length; i++) {\n    this.navItems[i].fillAttr = this.colors[colorIndex];\n    colorIndex++;\n\n    if (colorIndex === this.colors.length) {\n      colorIndex = 0;\n    }\n  }\n};\n\nwheelnav.prototype.createWheel = function (titles, withSpread) {\n  if (this.currentPercent === null) {\n    if (withSpread) {\n      this.currentPercent = this.minPercent;\n    } else {\n      this.currentPercent = this.maxPercent;\n    }\n  }\n\n  if (this.navItems.length === 0) {\n    this.initWheel(titles);\n  }\n\n  if (this.selectedNavItemIndex !== null) {\n    this.navItems[this.selectedNavItemIndex].selected = true;\n  }\n\n  for (i = 0; i < this.navItemCount; i++) {\n    this.navItems[i].createNavItem();\n  }\n\n  if (this.keynavigateEnabled) {\n    var thiswheelnav = this;\n    var keyelement = window;\n\n    if (this.keynavigateOnlyFocus) {\n      keyelement = document.getElementById(this.holderId);\n\n      if (!keyelement.hasAttribute(\"tabindex\")) {\n        keyelement.setAttribute(\"tabindex\", 0);\n      }\n    }\n\n    keyelement.addEventListener(\"keydown\", this.keyNavigateFunction = function (e) {\n      e = e || window.e;\n      var keyCodeEvent = e.which || e.keyCode;\n\n      if ([thiswheelnav.keynavigateDownCode, thiswheelnav.keynavigateDownCodeAlt, thiswheelnav.keynavigateUpCode, thiswheelnav.keynavigateUpCodeAlt].indexOf(e.keyCode) > -1) {\n        e.preventDefault();\n      }\n\n      var keynavigate = null;\n\n      if (keyCodeEvent === thiswheelnav.keynavigateUpCode || keyCodeEvent === thiswheelnav.keynavigateUpCodeAlt) {\n        if (thiswheelnav.currentClick === thiswheelnav.navItemCount - 1) {\n          keynavigate = 0;\n        } else {\n          keynavigate = thiswheelnav.currentClick + 1;\n        }\n      }\n\n      if (keyCodeEvent === thiswheelnav.keynavigateDownCode || keyCodeEvent === thiswheelnav.keynavigateDownCodeAlt) {\n        if (thiswheelnav.currentClick === 0) {\n          keynavigate = thiswheelnav.navItemCount - 1;\n        } else {\n          keynavigate = thiswheelnav.currentClick - 1;\n        }\n      }\n\n      if (keynavigate !== null) {\n        thiswheelnav.navigateWheel(keynavigate);\n      }\n    });\n  }\n\n  this.spreader = new spreader(this);\n  this.marker = new marker(this);\n  this.refreshWheel();\n\n  if (withSpread !== undefined) {\n    this.spreadWheel();\n  }\n\n  return this;\n};\n\nwheelnav.prototype.removeWheel = function () {\n  this.raphael.remove();\n\n  if (this.keynavigateEnabled) {\n    var keyelement = window;\n\n    if (this.keynavigateOnlyFocus) {\n      keyelement = document.getElementById(this.holderId);\n\n      if (keyelement.hasAttribute(\"tabindex\")) {\n        keyelement.removeAttribute(\"tabindex\");\n      }\n    }\n\n    keyelement.removeEventListener(\"keydown\", this.keyNavigateFunction);\n  }\n};\n\nwheelnav.prototype.refreshWheel = function (withPathAndTransform) {\n  for (i = 0; i < this.navItemCount; i++) {\n    var navItem = this.navItems[i];\n    navItem.setWheelSettings(withPathAndTransform);\n    navItem.refreshNavItem(withPathAndTransform);\n  }\n\n  this.marker.setCurrentTransform();\n  this.spreader.setCurrentTransform();\n};\n\nwheelnav.prototype.navigateWheel = function (clicked) {\n  this.animateUnlock(true);\n\n  if (this.clickModeRotate) {\n    this.animateLocked = true;\n  }\n\n  var navItem;\n\n  for (i = 0; i < this.navItemCount; i++) {\n    navItem = this.navItems[i];\n    navItem.hovered = false;\n\n    if (i === clicked) {\n      if (this.multiSelect) {\n        navItem.selected = !navItem.selected;\n      } else {\n        navItem.selected = true;\n        this.selectedNavItemIndex = i;\n      }\n    } else {\n      if (!this.multiSelect) {\n        navItem.selected = false;\n      }\n    }\n\n    if (this.clickModeRotate) {\n      var rotationAngle = this.navItems[clicked].navAngle - this.navItems[this.currentClick].navAngle;\n\n      if (this.rotateRound) {\n        if (this.clockwise && rotationAngle < 0) {\n          rotationAngle = 360 + rotationAngle;\n        }\n\n        if (!this.clockwise && rotationAngle > 0) {\n          rotationAngle = rotationAngle - 360;\n        }\n      }\n\n      navItem.currentRotateAngle -= rotationAngle;\n      var currentAnimateTime;\n\n      if (this.animatetime != null) {\n        currentAnimateTime = this.animatetime;\n      } else {\n        currentAnimateTime = 1500;\n      }\n\n      if (this.animatetimeCalculated && clicked !== this.currentClick) {\n        navItem.animatetime = currentAnimateTime * (Math.abs(rotationAngle) / 360);\n      }\n\n      if (this.rotateRoundCount > 0) {\n        if (this.clockwise) {\n          navItem.currentRotateAngle -= this.rotateRoundCount * 360;\n        } else {\n          navItem.currentRotateAngle += this.rotateRoundCount * 360;\n        }\n\n        navItem.animatetime = currentAnimateTime * (this.rotateRoundCount + 1);\n      }\n    }\n  }\n\n  for (i = 0; i < this.navItemCount; i++) {\n    navItem = this.navItems[i];\n    navItem.setCurrentTransform(true, true);\n    navItem.refreshNavItem();\n  }\n\n  this.currentClick = clicked;\n\n  if (this.clickModeSpreadOff) {\n    this.currentPercent = this.maxPercent;\n    this.spreadWheel();\n  } else {\n    if (clicked !== null && !this.clickModeRotate) {\n      this.marker.setCurrentTransform(this.navItems[this.currentClick].navAngle);\n    } else {\n      this.marker.setCurrentTransform();\n    }\n\n    this.spreader.setCurrentTransform(true);\n  }\n\n  if (clicked !== null && this.navItems[clicked].navigateFunction !== null) {\n    this.navItems[clicked].navigateFunction();\n  }\n};\n\nwheelnav.prototype.spreadWheel = function () {\n  this.animateUnlock(true);\n  this.animateLocked = true;\n\n  if (this.currentPercent === this.maxPercent || this.currentPercent === null) {\n    this.currentPercent = this.minPercent;\n  } else {\n    this.currentPercent = this.maxPercent;\n  }\n\n  for (i = 0; i < this.navItemCount; i++) {\n    var navItem = this.navItems[i];\n    navItem.hovered = false;\n    navItem.setCurrentTransform(true, false);\n  }\n\n  this.marker.setCurrentTransform();\n  this.spreader.setCurrentTransform();\n  return this;\n};\n\nwheelnav.prototype.animateUnlock = function (force, withFinishFunction) {\n  if (force !== undefined && force === true) {\n    for (var f = 0; f < this.navItemCount; f++) {\n      this.navItems[f].navSliceUnderAnimation = false;\n      this.navItems[f].navTitleUnderAnimation = false;\n      this.navItems[f].navLineUnderAnimation = false;\n      this.navItems[f].navSlice.stop();\n      this.navItems[f].navLine.stop();\n      this.navItems[f].navTitle.stop();\n    }\n  } else {\n    for (var i = 0; i < this.navItemCount; i++) {\n      if (this.navItems[i].navSliceUnderAnimation === true || this.navItems[i].navTitleUnderAnimation === true || this.navItems[i].navLineUnderAnimation === true) {\n        return;\n      }\n    }\n\n    this.animateLocked = false;\n\n    if (this.animateFinishFunction !== null && withFinishFunction !== undefined && withFinishFunction === true) {\n      this.animateFinishFunction();\n    }\n  }\n};\n\nwheelnav.prototype.setTooltips = function (tooltips) {\n  if (tooltips !== undefined && tooltips !== null && Array.isArray(tooltips) && tooltips.length <= this.navItems.length) {\n    for (var i = 0; i < tooltips.length; i++) {\n      this.navItems[i].setTooltip(tooltips[i]);\n    }\n  }\n};\n\nwheelnav.prototype.getItemId = function (index) {\n  return \"wheelnav-\" + this.holderId + \"-item-\" + index;\n};\n\nwheelnav.prototype.getSliceId = function (index) {\n  return \"wheelnav-\" + this.holderId + \"-slice-\" + index;\n};\n\nwheelnav.prototype.getClickableSliceId = function (index) {\n  return \"wheelnav-\" + this.holderId + \"-clickableslice-\" + index;\n};\n\nwheelnav.prototype.getTitleId = function (index) {\n  return \"wheelnav-\" + this.holderId + \"-title-\" + index;\n};\n\nwheelnav.prototype.getLineId = function (index) {\n  return \"wheelnav-\" + this.holderId + \"-line-\" + index;\n};\n\nwheelnav.prototype.getSpreaderId = function () {\n  return \"wheelnav-\" + this.holderId + \"-spreader\";\n};\n\nwheelnav.prototype.getSpreaderTitleId = function () {\n  return \"wheelnav-\" + this.holderId + \"-spreadertitle\";\n};\n\nwheelnav.prototype.getMarkerId = function () {\n  return \"wheelnav-\" + this.holderId + \"-marker\";\n}; ///#source 1 1 /js/source/wheelnav.parse.js\n\n/* ======================================================================================= */\n\n/* Parse html5 data- attributes, the onmouseup events and anchor links                     */\n\n/* ======================================================================================= */\n\n/* ======================================================================================= */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/html5.html         */\n\n/* ======================================================================================= */\n\n\nwheelnav.prototype.parseWheel = function (holderDiv) {\n  if (holderDiv !== undefined && holderDiv !== null) {\n    //data-wheelnav attribute is required\n    var wheelnavData = holderDiv.hasAttribute(\"data-wheelnav\");\n\n    if (wheelnavData) {\n      var parsedNavItems = [];\n      var parsedNavItemsHref = [];\n      var parsedNavItemsOnmouseup = [];\n      var onlyInit = false; //data-wheelnav-slicepath\n\n      var wheelnavSlicepath = holderDiv.getAttribute(\"data-wheelnav-slicepath\");\n\n      if (wheelnavSlicepath !== null) {\n        if (slicePath()[wheelnavSlicepath] !== undefined) {\n          this.slicePathFunction = slicePath()[wheelnavSlicepath];\n        }\n      } //data-wheelnav-colors\n\n\n      var wheelnavColors = holderDiv.getAttribute(\"data-wheelnav-colors\");\n\n      if (wheelnavColors !== null) {\n        this.colors = wheelnavColors.split(',');\n      } //data-wheelnav-wheelradius\n\n\n      var wheelnavWheelradius = holderDiv.getAttribute(\"data-wheelnav-wheelradius\");\n\n      if (wheelnavWheelradius !== null) {\n        this.wheelRadius = Number(wheelnavWheelradius);\n      } //data-wheelnav-navangle\n\n\n      var wheelnavNavangle = holderDiv.getAttribute(\"data-wheelnav-navangle\");\n\n      if (wheelnavNavangle !== null) {\n        this.navAngle = Number(wheelnavNavangle);\n      } //data-wheelnav-rotateoff\n\n\n      var wheelnavRotateOff = holderDiv.getAttribute(\"data-wheelnav-rotateoff\");\n\n      if (wheelnavRotateOff !== null) {\n        this.clickModeRotate = false;\n      } //data-wheelnav-cssmode\n\n\n      var wheelnavCssmode = holderDiv.getAttribute(\"data-wheelnav-cssmode\");\n\n      if (wheelnavCssmode !== null) {\n        this.cssMode = true;\n      } //data-wheelnav-spreader\n\n\n      var wheelnavSpreader = holderDiv.getAttribute(\"data-wheelnav-spreader\");\n\n      if (wheelnavSpreader !== null) {\n        this.spreaderEnable = true;\n      } //data-wheelnav-spreaderradius\n\n\n      var wheelnavSpreaderRadius = holderDiv.getAttribute(\"data-wheelnav-spreaderradius\");\n\n      if (wheelnavSpreaderRadius !== null) {\n        this.spreaderRadius = Number(wheelnavSpreaderRadius);\n      } //data-wheelnav-spreaderpath\n\n\n      var wheelnavSpreaderPath = holderDiv.getAttribute(\"data-wheelnav-spreaderpath\");\n\n      if (wheelnavSpreaderPath !== null) {\n        if (markerPath()[wheelnavSpreaderPath] !== undefined) {\n          this.spreaderPathFunction = spreaderPath()[wheelnavSpreaderPath];\n        }\n      } //data-wheelnav-marker\n\n\n      var wheelnavMarker = holderDiv.getAttribute(\"data-wheelnav-marker\");\n\n      if (wheelnavMarker !== null) {\n        this.markerEnable = true;\n      } //data-wheelnav-markerpath\n\n\n      var wheelnavMarkerPath = holderDiv.getAttribute(\"data-wheelnav-markerpath\");\n\n      if (wheelnavMarkerPath !== null) {\n        if (markerPath()[wheelnavMarkerPath] !== undefined) {\n          this.markerPathFunction = markerPath()[wheelnavMarkerPath];\n        }\n      } //data-wheelnav-titlewidth\n\n\n      var wheelnavTitleWidth = holderDiv.getAttribute(\"data-wheelnav-titlewidth\");\n\n      if (wheelnavTitleWidth !== null) {\n        this.titleWidth = Number(wheelnavTitleWidth);\n      } //data-wheelnav-titleheight\n\n\n      var wheelnavTitleHeight = holderDiv.getAttribute(\"data-wheelnav-titleheight\");\n\n      if (wheelnavTitleHeight !== null) {\n        this.titleHeight = Number(wheelnavTitleHeight);\n      } //data-wheelnav-keynav\n\n\n      var wheelnavKeynav = holderDiv.getAttribute(\"data-wheelnav-keynav\");\n\n      if (wheelnavKeynav !== null) {\n        this.keynavigateEnabled = true;\n      } //data-wheelnav-keynavonlyfocus\n\n\n      var wheelnavKeynavOnlyfocus = holderDiv.getAttribute(\"data-wheelnav-keynavonlyfocus\");\n\n      if (wheelnavKeynavOnlyfocus !== null) {\n        this.keynavigateOnlyFocus = true;\n      } //data-wheelnav-keynavdowncode\n\n\n      var wheelnavKeynavDowncode = holderDiv.getAttribute(\"data-wheelnav-keynavdowncode\");\n\n      if (wheelnavKeynavDowncode !== null) {\n        this.keynavigateDownCode = Number(wheelnavKeynavDowncode);\n      } //data-wheelnav-keynavdowncodealt\n\n\n      var wheelnavKeynavDowncodeAlt = holderDiv.getAttribute(\"data-wheelnav-keynavdowncodealt\");\n\n      if (wheelnavKeynavDowncodeAlt !== null) {\n        this.keynavigateDownCodeAlt = Number(wheelnavKeynavDowncodeAlt);\n      } //data-wheelnav-keynavupcode\n\n\n      var wheelnavKeynavUpcode = holderDiv.getAttribute(\"data-wheelnav-keynavupcode\");\n\n      if (wheelnavKeynavUpcode !== null) {\n        this.keynavigateUpCode = Number(wheelnavKeynavUpcode);\n      } //data-wheelnav-keynavupcodealt\n\n\n      var wheelnavKeynavUpcodeAlt = holderDiv.getAttribute(\"data-wheelnav-keynavupcodealt\");\n\n      if (wheelnavKeynavUpcodeAlt !== null) {\n        this.keynavigateUpCodeAlt = Number(wheelnavKeynavUpcodeAlt);\n      } //data-wheelnav-init\n\n\n      var wheelnavOnlyinit = holderDiv.getAttribute(\"data-wheelnav-init\");\n\n      if (wheelnavOnlyinit !== null) {\n        onlyInit = true;\n      }\n\n      for (var i = 0; i < holderDiv.children.length; i++) {\n        var wheelnavNavitemtext = holderDiv.children[i].getAttribute(\"data-wheelnav-navitemtext\");\n        var wheelnavNavitemicon = holderDiv.children[i].getAttribute(\"data-wheelnav-navitemicon\");\n        var wheelnavNavitemimg = holderDiv.children[i].getAttribute(\"data-wheelnav-navitemimg\");\n\n        if (wheelnavNavitemtext !== null || wheelnavNavitemicon !== null || wheelnavNavitemimg !== null) {\n          //data-wheelnav-navitemtext\n          if (wheelnavNavitemtext !== null) {\n            parsedNavItems.push(wheelnavNavitemtext);\n          } //data-wheelnav-navitemicon\n          else if (wheelnavNavitemicon !== null) {\n              if (icon[wheelnavNavitemicon] !== undefined) {\n                parsedNavItems.push(icon[wheelnavNavitemicon]);\n              } else {\n                parsedNavItems.push(wheelnavNavitemicon);\n              }\n            } else if (wheelnavNavitemimg !== null) {\n              parsedNavItems.push(\"imgsrc:\" + wheelnavNavitemimg);\n            } else {\n              //data-wheelnav-navitemtext or data-wheelnav-navitemicon or data-wheelnav-navitemimg is required\n              continue;\n            } //onmouseup event of navitem element for call it in the navigateFunction\n\n\n          if (holderDiv.children[i].onmouseup !== undefined) {\n            parsedNavItemsOnmouseup.push(holderDiv.children[i].onmouseup);\n          } else {\n            parsedNavItemsOnmouseup.push(null);\n          } //parse inner <a> tag in navitem element for use href in navigateFunction\n\n\n          var foundHref = false;\n\n          for (var j = 0; j < holderDiv.children[i].children.length; j++) {\n            if (holderDiv.children[i].children[j].getAttribute('href') !== undefined) {\n              parsedNavItemsHref.push(holderDiv.children[i].children[j].getAttribute('href'));\n            }\n          }\n\n          if (!foundHref) {\n            parsedNavItemsHref.push(null);\n          }\n        }\n      }\n\n      if (parsedNavItems.length > 0) {\n        this.initWheel(parsedNavItems);\n\n        for (var i = 0; i < parsedNavItemsOnmouseup.length; i++) {\n          this.navItems[i].navigateFunction = parsedNavItemsOnmouseup[i];\n          this.navItems[i].navigateHref = parsedNavItemsHref[i];\n        }\n\n        if (!onlyInit) {\n          this.createWheel();\n        }\n      }\n    }\n\n    var removeChildrens = [];\n\n    for (var i = 0; i < holderDiv.children.length; i++) {\n      if (holderDiv.children[i].localName !== \"svg\") {\n        removeChildrens.push(holderDiv.children[i]);\n      }\n    }\n\n    for (var i = 0; i < removeChildrens.length; i++) {\n      holderDiv.removeChild(removeChildrens[i]);\n    }\n  }\n}; ///#source 1 1 /js/source/wheelnav.navItem.js\n\n/* ======================================================================================= */\n\n/* Navigation item                                                                         */\n\n/* ======================================================================================= */\n\n/* ======================================================================================= */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/navItem.html       */\n\n/* ======================================================================================= */\n\n\nwheelnavItem = function wheelnavItem(wheelnav, title, itemIndex) {\n  this.wheelnav = wheelnav;\n  this.wheelItemIndex = itemIndex;\n\n  if (wheelnav.clockwise) {\n    this.itemIndex = itemIndex;\n  } else {\n    this.itemIndex = -itemIndex;\n  }\n\n  this.enabled = wheelnav.navItemsEnabled;\n  this.selected = false;\n  this.hovered = false; //Private properties\n\n  this.navItem = null;\n  this.navSlice = null;\n  this.navTitle = null;\n  this.navLine = null;\n  this.navClickableSlice = null;\n  this.navSliceCurrentTransformString = null;\n  this.navTitleCurrentTransformString = null;\n  this.navLineCurrentTransformString = null;\n  this.navSliceUnderAnimation = false;\n  this.navTitleUnderAnimation = false;\n  this.navLineUnderAnimation = false;\n  this.currentRotateAngle = 0;\n  this.setTitle(title);\n  this.tooltip = null; //Default settings\n\n  this.fillAttr = \"#CCC\";\n  this.titleFont = this.wheelnav.titleFont;\n  this.navigateHref = null;\n  this.navigateFunction = null; //When navTitle start with 'imgsrc:' it can parse as URL of image or data URI. These properties are available for images and paths. Use after initWheel(), before createWheel()\n\n  this.titleWidth = null;\n  this.titleHeight = null;\n  this.titleHoverWidth = null;\n  this.titleHoverHeight = null;\n  this.titleSelectedWidth = null;\n  this.titleSelectedHeight = null; //Wheelnav properties\n\n  this.animateeffect = null;\n  this.animatetime = null;\n  this.sliceInitPathFunction = null;\n  this.sliceClickablePathFunction = null;\n  this.slicePathFunction = null;\n  this.sliceSelectedPathFunction = null;\n  this.sliceHoverPathFunction = null;\n  this.sliceTransformFunction = null;\n  this.sliceSelectedTransformFunction = null;\n  this.sliceHoverTransformFunction = null;\n  this.sliceInitTransformFunction = null;\n  this.slicePathCustom = null;\n  this.sliceClickablePathCustom = null;\n  this.sliceSelectedPathCustom = null;\n  this.sliceHoverPathCustom = null;\n  this.sliceInitPathCustom = null;\n  this.sliceTransformCustom = null;\n  this.sliceSelectedTransformCustom = null;\n  this.sliceHoverTransformCustom = null;\n  this.sliceInitTransformCustom = null;\n  this.initPercent = null;\n  this.minPercent = null;\n  this.maxPercent = null;\n  this.hoverPercent = null;\n  this.selectedPercent = null;\n  this.clickablePercentMin = null;\n  this.clickablePercentMax = null;\n  this.titleSpreadScale = null;\n  this.sliceAngle = null;\n  this.titleRotateAngle = null; //Default navitem styles\n\n  this.styleNavItem();\n  return this;\n};\n\nwheelnavItem.prototype.createNavItem = function () {\n  //Wheel settings\n  this.setWheelSettings(false); //Set href navigation\n\n  if (this.navigateHref !== null) {\n    this.navigateFunction = function () {\n      window.location.href = this.navigateHref;\n    };\n  } //Set colors\n\n\n  if (!this.wheelnav.cssMode) {\n    this.slicePathAttr.fill = this.fillAttr;\n    this.sliceHoverAttr.fill = this.fillAttr;\n    this.sliceSelectedAttr.fill = this.fillAttr;\n  } //Set attrs\n\n\n  if (!this.enabled) {\n    if (!this.wheelnav.cssMode) {\n      this.slicePathAttr.cursor = \"default\";\n      this.sliceHoverAttr.cursor = \"default\";\n      this.titleAttr.cursor = \"default\";\n      this.titleHoverAttr.cursor = \"default\";\n      this.linePathAttr.cursor = \"default\";\n      this.lineHoverAttr.cursor = \"default\";\n    }\n\n    this.sliceClickablePathAttr.cursor = \"default\";\n    this.sliceClickableHoverAttr.cursor = \"default\";\n  } //Set angles\n\n\n  var prevItemIndex = this.wheelItemIndex - 1;\n  var wheelSliceAngle = 360 / this.wheelnav.navItemCount;\n\n  if (this.sliceAngle === null) {\n    this.sliceAngle = 360 / this.wheelnav.navItemCount;\n  }\n\n  if (this.wheelnav.clockwise) {\n    if (this.wheelnav.navItemsContinuous) {\n      if (this.itemIndex === 0) {\n        this.baseAngle = this.itemIndex * this.sliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle);\n      } else {\n        this.baseAngle = this.wheelnav.navItems[prevItemIndex].baseAngle + this.wheelnav.navItems[prevItemIndex].sliceAngle;\n      }\n    } else {\n      if (this.wheelnav.navItemsCentered) {\n        this.baseAngle = this.itemIndex * wheelSliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle);\n      } else {\n        this.baseAngle = this.itemIndex * wheelSliceAngle + (-wheelSliceAngle / 2 + this.wheelnav.navAngle);\n        this.currentRotateAngle += wheelSliceAngle / 2 - this.wheelnav.navItems[0].sliceAngle / 2;\n      }\n    }\n  } else {\n    if (this.wheelnav.navItemsContinuous) {\n      if (this.itemIndex === 0) {\n        this.baseAngle = this.itemIndex * this.sliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle);\n      } else {\n        this.baseAngle = this.wheelnav.navItems[prevItemIndex].baseAngle - this.wheelnav.navItems[this.wheelItemIndex].sliceAngle;\n      }\n    } else {\n      if (this.wheelnav.navItemsCentered) {\n        this.baseAngle = this.itemIndex * wheelSliceAngle + (-this.sliceAngle / 2 + this.wheelnav.navAngle);\n      } else {\n        this.baseAngle = this.itemIndex * wheelSliceAngle + (-wheelSliceAngle / 2 + this.wheelnav.navAngle) + (wheelSliceAngle - this.sliceAngle);\n        this.currentRotateAngle -= wheelSliceAngle / 2 - this.wheelnav.navItems[0].sliceAngle / 2;\n      }\n    }\n  }\n\n  this.navAngle = this.baseAngle + this.sliceAngle / 2;\n\n  if (this.wheelnav.animatetimeCalculated) {\n    this.animatetime = this.wheelnav.animatetime / this.wheelnav.navItemCount;\n  }\n\n  this.initPathsAndTransforms();\n  var sliceInitPath = this.sliceInitPath; //Create slice\n\n  this.navSlice = this.wheelnav.raphael.path(sliceInitPath.slicePathString);\n  this.navSlice.attr(this.slicePathAttr);\n  this.navSlice.id = this.wheelnav.getSliceId(this.wheelItemIndex);\n  this.navSlice.node.id = this.navSlice.id; //Create linepath\n\n  this.navLine = this.wheelnav.raphael.path(sliceInitPath.linePathString);\n  this.navLine.attr(this.linePathAttr);\n  this.navLine.id = this.wheelnav.getLineId(this.wheelItemIndex);\n  this.navLine.node.id = this.navLine.id; //Create title\n\n  var currentTitle = this.initNavTitle; //Title defined by path\n\n  if (wheelnavTitle().isPathTitle(this.title)) {\n    this.navTitle = this.wheelnav.raphael.path(currentTitle.path);\n  } //Title defined by image\n  else if (wheelnavTitle().isImageTitle(this.title)) {\n      this.navTitle = this.wheelnav.raphael.image(currentTitle.src, sliceInitPath.titlePosX - this.titleWidth / 2, sliceInitPath.titlePosY - this.titleHeight / 2, this.titleWidth, this.titleHeight);\n    } //Title defined by text\n    else {\n        this.navTitle = this.wheelnav.raphael.text(sliceInitPath.titlePosX, sliceInitPath.titlePosY, currentTitle.title);\n      }\n\n  this.navTitle.attr(this.titleAttr);\n  this.navTitle.id = this.wheelnav.getTitleId(this.wheelItemIndex);\n  this.navTitle.node.id = this.navTitle.id; //Set transforms\n\n  this.navSliceCurrentTransformString = \"\";\n\n  if (this.initTransform.sliceTransformString !== \"\") {\n    this.navSliceCurrentTransformString += this.initTransform.sliceTransformString;\n  }\n\n  this.navLineCurrentTransformString = \"\";\n\n  if (this.initTransform.lineTransformString !== \"\") {\n    this.navLineCurrentTransformString += this.initTransform.lineTransformString;\n  }\n\n  this.navTitleCurrentTransformString = \"\";\n  this.navTitleCurrentTransformString += this.getTitleRotateString(this.wheelnav.initTitleRotate);\n\n  if (this.initTransform.titleTransformString !== \"\") {\n    this.navTitleCurrentTransformString += this.initTransform.titleTransformString;\n  }\n\n  if (this.wheelnav.currentPercent < 0.05) {\n    this.navTitleCurrentTransformString += \",s0.05\";\n  }\n\n  if (this.navTitleSizeTransform !== undefined) {\n    this.navTitleCurrentTransformString += this.navTitleSizeTransform;\n  }\n\n  this.navSlice.attr({\n    transform: this.navSliceCurrentTransformString\n  });\n  this.navLine.attr({\n    transform: this.navLineCurrentTransformString\n  });\n  this.navTitle.attr({\n    transform: this.navTitleCurrentTransformString\n  }); //Create item set\n\n  this.navItem = this.wheelnav.raphael.set();\n\n  if (this.sliceClickablePathFunction !== null) {\n    //Create clickable slice\n    var sliceClickablePath = this.getCurrentClickablePath();\n    this.navClickableSlice = this.wheelnav.raphael.path(sliceClickablePath.slicePathString).attr(this.sliceClickablePathAttr).toBack();\n    this.navClickableSlice.id = this.wheelnav.getClickableSliceId(this.wheelItemIndex);\n    this.navClickableSlice.node.id = this.navClickableSlice.id;\n    this.navItem.push(this.navSlice, this.navLine, this.navTitle, this.navClickableSlice);\n  } else {\n    this.navItem.push(this.navSlice, this.navLine, this.navTitle);\n  }\n\n  this.setTooltip(this.tooltip);\n  this.navItem.id = this.wheelnav.getItemId(this.wheelItemIndex);\n  var thisWheelNav = this.wheelnav;\n  var thisNavItem = this;\n  var thisItemIndex = this.wheelItemIndex;\n\n  if (this.enabled) {\n    this.navItem.mouseup(function () {\n      thisWheelNav.navigateWheel(thisItemIndex);\n    });\n    this.navItem.mouseover(function () {\n      if (thisNavItem.hovered !== true) {\n        thisNavItem.hoverEffect(thisItemIndex, true);\n      }\n    });\n    this.navItem.mouseout(function () {\n      thisNavItem.hovered = false;\n      thisNavItem.hoverEffect(thisItemIndex, false);\n    });\n  }\n\n  this.setCurrentTransform(true, false);\n};\n\nwheelnavItem.prototype.hoverEffect = function (hovered, isEnter) {\n  if (this.wheelnav.animateLocked === false) {\n    if (isEnter) {\n      if (!this.selected) {\n        this.hovered = true;\n      }\n    }\n\n    this.refreshNavItem();\n\n    if (this.hoverPercent !== 1 || this.sliceHoverPathFunction !== null || this.sliceHoverTransformFunction !== null || this.titleHover !== this.title || this.titleHoverWidth !== this.titleWidth || this.titleHoverHeight !== this.titleHeight) {\n      this.setCurrentTransform(false, false);\n    }\n\n    this.wheelnav.marker.setCurrentTransform();\n    this.wheelnav.spreader.setCurrentTransform(true);\n  }\n};\n\nwheelnavItem.prototype.setCurrentTransform = function (locked, withFinishFunction) {\n  if (!this.wheelnav.clickModeRotate || !this.navSliceUnderAnimation && !this.navTitleUnderAnimation && !this.navLineUnderAnimation) {\n    if (locked !== undefined && locked === true) {\n      this.navSliceUnderAnimation = true;\n      this.navTitleUnderAnimation = true;\n      this.navLineUnderAnimation = true;\n    } //Set transforms\n    //  Slice\n\n\n    this.navSliceCurrentTransformString = \"\";\n\n    if (this.wheelnav.clickModeRotate) {\n      this.navSliceCurrentTransformString += this.getItemRotateString();\n    }\n\n    if (this.selected) {\n      if (this.selectTransform.sliceTransformString !== undefined) {\n        this.navSliceCurrentTransformString += this.selectTransform.sliceTransformString;\n      }\n    } else if (this.hovered) {\n      if (this.hoverTransform.sliceTransformString !== undefined) {\n        this.navSliceCurrentTransformString += this.hoverTransform.sliceTransformString;\n      }\n    }\n\n    if (this.sliceTransform.sliceTransformString !== undefined) {\n      this.navSliceCurrentTransformString += this.sliceTransform.sliceTransformString;\n    } //  Line\n\n\n    this.navLineCurrentTransformString = \"\";\n\n    if (this.wheelnav.clickModeRotate) {\n      this.navLineCurrentTransformString += this.getItemRotateString();\n    }\n\n    if (this.selected) {\n      if (this.selectTransform.lineTransformString !== undefined) {\n        this.navLineCurrentTransformString += this.selectTransform.lineTransformString;\n      }\n    } else if (this.hovered) {\n      if (this.hoverTransform.lineTransformString !== undefined) {\n        this.navLineCurrentTransformString += this.hoverTransform.lineTransformString;\n      }\n    }\n\n    if (this.sliceTransform.lineTransformString !== undefined) {\n      this.navLineCurrentTransformString += this.sliceTransform.lineTransformString;\n    } //  Title\n\n\n    this.navTitleCurrentTransformString = \"\";\n    this.navTitleCurrentTransformString += this.getTitleRotateString(true);\n\n    if (this.selected) {\n      if (this.navTitleSizeSelectedTransform !== undefined) {\n        this.navTitleCurrentTransformString += this.navTitleSizeSelectedTransform;\n      }\n\n      if (this.selectTransform.titleTransformString === \"\" || this.selectTransform.titleTransformString === undefined) {\n        this.navTitleCurrentTransformString += \",s1\";\n      } else {\n        this.navTitleCurrentTransformString += \",\" + this.selectTransform.titleTransformString;\n      }\n\n      if (this.wheelnav.currentPercent < 0.05) {\n        this.navTitleCurrentTransformString += \",s0.05\";\n      }\n    } else if (this.hovered) {\n      if (this.navTitleSizeHoverTransform !== undefined) {\n        this.navTitleCurrentTransformString += this.navTitleSizeHoverTransform;\n      }\n\n      if (this.hoverTransform.titleTransformString === \"\" || this.hoverTransform.titleTransformString === undefined) {\n        this.navTitleCurrentTransformString += \",s1\";\n      } else {\n        this.navTitleCurrentTransformString += \",\" + this.hoverTransform.titleTransformString;\n      }\n    } else if (this.wheelnav.currentPercent < 0.05) {\n      this.navTitleCurrentTransformString += \",s0.05\";\n    } else if (this.titleSpreadScale) {\n      this.navTitleCurrentTransformString += \",s\" + this.wheelnav.currentPercent;\n    } else {\n      if (this.navTitleSizeTransform !== undefined) {\n        this.navTitleCurrentTransformString += this.navTitleSizeTransform;\n      }\n\n      if (this.sliceTransform.titleTransformString === \"\" || this.sliceTransform.titleTransformString === undefined) {\n        this.navTitleCurrentTransformString += \",s1\";\n      } else {\n        this.navTitleCurrentTransformString += \",\" + this.sliceTransform.titleTransformString;\n      }\n    } //Set path\n\n\n    var slicePath = this.getCurrentPath();\n    var sliceTransformAttr = {};\n    sliceTransformAttr = {\n      path: slicePath.slicePathString,\n      transform: this.navSliceCurrentTransformString\n    };\n    var sliceClickableTransformAttr = {};\n\n    if (this.sliceClickablePathFunction !== null) {\n      var sliceClickablePath = this.getCurrentClickablePath();\n      sliceClickableTransformAttr = {\n        path: sliceClickablePath.slicePathString,\n        transform: this.navSliceCurrentTransformString\n      };\n    }\n\n    var lineTransformAttr = {};\n    lineTransformAttr = {\n      path: slicePath.linePathString,\n      transform: this.navLineCurrentTransformString\n    }; //Set title\n\n    var currentTitle = this.getCurrentTitle();\n    var titleTransformAttr = {};\n\n    if (wheelnavTitle().isPathTitle(currentTitle.title)) {\n      titleTransformAttr = {\n        path: currentTitle.path,\n        transform: this.navTitleCurrentTransformString\n      };\n    } else if (wheelnavTitle().isImageTitle(currentTitle.title)) {\n      titleTransformAttr = {\n        x: currentTitle.x,\n        y: currentTitle.y,\n        width: currentTitle.width,\n        height: currentTitle.height,\n        transform: this.navTitleCurrentTransformString\n      };\n      this.navTitle.attr({\n        src: currentTitle.src\n      });\n    } else {\n      titleTransformAttr = {\n        x: currentTitle.x,\n        y: currentTitle.y,\n        transform: this.navTitleCurrentTransformString\n      };\n\n      if (currentTitle.title !== null) {\n        this.navTitle.attr({\n          text: currentTitle.title\n        });\n      }\n    }\n\n    var thisNavItem = this;\n    var thisWheelnav = this.wheelnav; //Animate navitem\n\n    this.animSlice = Raphael.animation(sliceTransformAttr, this.animatetime, this.animateeffect, function () {\n      thisNavItem.navSliceUnderAnimation = false;\n      thisWheelnav.animateUnlock(false, withFinishFunction);\n    });\n    this.animLine = Raphael.animation(lineTransformAttr, this.animatetime, this.animateeffect, function () {\n      thisNavItem.navLineUnderAnimation = false;\n      thisWheelnav.animateUnlock(false, withFinishFunction);\n    });\n    this.animTitle = Raphael.animation(titleTransformAttr, this.animatetime, this.animateeffect, function () {\n      thisNavItem.navTitleUnderAnimation = false;\n      thisWheelnav.animateUnlock(false, withFinishFunction);\n    });\n\n    if (this.navClickableSlice !== null) {\n      this.animClickableSlice = Raphael.animation(sliceClickableTransformAttr, this.animatetime, this.animateeffect);\n    }\n\n    var animateRepeatCount = this.wheelnav.animateRepeatCount;\n\n    if (locked !== undefined && locked === true) {\n      if (this.wheelItemIndex === this.wheelnav.navItemCount - 1) {\n        for (i = 0; i < this.wheelnav.navItemCount; i++) {\n          var navItemSlice = this.wheelnav.navItems[i];\n          navItemSlice.navSlice.animate(navItemSlice.animSlice.repeat(animateRepeatCount));\n        }\n\n        for (i = 0; i < this.wheelnav.navItemCount; i++) {\n          var navItemLine = this.wheelnav.navItems[i];\n          navItemLine.navLine.animate(navItemLine.animLine.repeat(animateRepeatCount));\n        }\n\n        for (i = 0; i < this.wheelnav.navItemCount; i++) {\n          var navItemTitle = this.wheelnav.navItems[i];\n          navItemTitle.navTitle.animate(navItemTitle.animTitle.repeat(animateRepeatCount));\n        }\n\n        if (this.wheelnav.sliceClickablePathFunction !== null) {\n          for (i = 0; i < this.wheelnav.navItemCount; i++) {\n            var navItemClickableSlice = this.wheelnav.navItems[i];\n\n            if (navItemClickableSlice.navClickableSlice !== null) {\n              navItemClickableSlice.navClickableSlice.animate(navItemClickableSlice.animClickableSlice.repeat(animateRepeatCount));\n            }\n          }\n        }\n      }\n    } else {\n      this.navSlice.animate(this.animSlice.repeat(animateRepeatCount));\n      this.navLine.animate(this.animLine.repeat(animateRepeatCount));\n      this.navTitle.animate(this.animTitle.repeat(animateRepeatCount));\n\n      if (this.navClickableSlice !== null) {\n        this.navClickableSlice.animate(this.animClickableSlice.repeat(animateRepeatCount));\n      }\n    }\n  }\n};\n\nwheelnavItem.prototype.setTitle = function (title) {\n  if (title === undefined) {\n    this.title = null;\n  } else {\n    this.title = title;\n  }\n\n  this.titleHover = this.title;\n  this.titleSelected = this.title;\n};\n\nwheelnavItem.prototype.setTooltip = function (tooltip) {\n  if (tooltip !== null) {\n    this.navItem.attr({\n      title: tooltip\n    });\n  }\n};\n\nwheelnavItem.prototype.refreshNavItem = function (withPathAndTransform) {\n  if (this.selected) {\n    this.navSlice.attr(this.sliceSelectedAttr);\n    this.navLine.attr(this.lineSelectedAttr);\n    this.navTitle.attr(this.titleSelectedAttr);\n\n    if (this.navClickableSlice !== null) {\n      this.navClickableSlice.attr(this.sliceClickableSelectedAttr);\n    }\n\n    if (this.wheelnav.selectedToFront) {\n      this.navSlice.toFront();\n      this.navLine.toFront();\n      this.navTitle.toFront();\n\n      if (this.navClickableSlice !== null) {\n        this.navClickableSlice.toFront();\n      }\n    } else {\n      if (this.navClickableSlice !== null) {\n        this.navClickableSlice.toBack();\n      }\n\n      this.navTitle.toBack();\n      this.navLine.toBack();\n      this.navSlice.toBack();\n    }\n  } else if (this.hovered) {\n    this.navSlice.attr(this.sliceHoverAttr).toFront();\n    this.navLine.attr(this.lineHoverAttr).toFront();\n    this.navTitle.attr(this.titleHoverAttr).toFront();\n\n    if (this.navClickableSlice !== null) {\n      this.navClickableSlice.attr(this.sliceClickableHoverAttr).toFront();\n    }\n  } else {\n    this.navSlice.attr(this.slicePathAttr);\n    this.navLine.attr(this.linePathAttr);\n    this.navTitle.attr(this.titleAttr);\n\n    if (this.navClickableSlice !== null) {\n      this.navClickableSlice.attr(this.sliceClickablePathAttr);\n    }\n\n    if (this.navClickableSlice !== null) {\n      this.navClickableSlice.toBack();\n    }\n\n    ;\n    this.navTitle.toBack();\n    this.navLine.toBack();\n    this.navSlice.toBack();\n  }\n\n  if (withPathAndTransform !== undefined && withPathAndTransform === true) {\n    this.initPathsAndTransforms();\n    this.setCurrentTransform(false, false);\n  }\n};\n\nwheelnavItem.prototype.setWheelSettings = function (force) {\n  //Set slice from wheelnav\n  if (this.wheelnav.slicePathAttr !== null) {\n    this.slicePathAttr = JSON.parse(JSON.stringify(this.wheelnav.slicePathAttr));\n  }\n\n  if (this.wheelnav.sliceHoverAttr !== null) {\n    this.sliceHoverAttr = JSON.parse(JSON.stringify(this.wheelnav.sliceHoverAttr));\n  }\n\n  if (this.wheelnav.sliceSelectedAttr !== null) {\n    this.sliceSelectedAttr = JSON.parse(JSON.stringify(this.wheelnav.sliceSelectedAttr));\n  } //Set title from wheelnav\n\n\n  if (this.wheelnav.titleAttr !== null) {\n    this.titleAttr = JSON.parse(JSON.stringify(this.wheelnav.titleAttr));\n  }\n\n  if (this.wheelnav.titleHoverAttr !== null) {\n    this.titleHoverAttr = JSON.parse(JSON.stringify(this.wheelnav.titleHoverAttr));\n  }\n\n  if (this.wheelnav.titleSelectedAttr !== null) {\n    this.titleSelectedAttr = JSON.parse(JSON.stringify(this.wheelnav.titleSelectedAttr));\n  }\n\n  if (this.wheelnav.titleRotateAngle !== null && this.titleRotateAngle === null) {\n    this.titleRotateAngle = this.wheelnav.titleRotateAngle;\n  } // Size\n\n\n  if (this.wheelnav.titleWidth !== null && this.titleWidth === null) {\n    this.titleWidth = this.wheelnav.titleWidth;\n  }\n\n  if (this.wheelnav.titleHeight !== null && this.titleHeight === null) {\n    this.titleHeight = this.wheelnav.titleHeight;\n  }\n\n  if (this.titleWidth !== null && this.titleHeight === null) {\n    this.titleHeight = this.titleWidth;\n  }\n\n  if (this.titleWidth === null && this.titleHeight !== null) {\n    this.titleWidth = this.titleHeight;\n  }\n\n  if (wheelnavTitle().isImageTitle(this.title)) {\n    // Image default value\n    if (this.titleWidth === null) {\n      this.titleWidth = 32;\n    }\n\n    if (this.titleHeight === null) {\n      this.titleHeight = 32;\n    }\n  }\n\n  if (this.wheelnav.titleHoverWidth !== null && this.titleHoverWidth === null) {\n    this.titleHoverWidth = this.wheelnav.titleHoverWidth;\n  }\n\n  if (this.wheelnav.titleHoverHeight !== null && this.titleHoverHeight === null) {\n    this.titleHoverHeight = this.wheelnav.titleHoverHeight;\n  }\n\n  if (this.titleHoverWidth !== null && this.titleHoverHeight === null) {\n    this.titleHoverHeight = this.titleHoverWidth;\n  }\n\n  if (this.titleHoverWidth === null && this.titleHoverHeight !== null) {\n    this.titleHoverWidth = this.titleHoverHeight;\n  }\n\n  if (this.wheelnav.titleSelectedWidth !== null && this.titleSelectedWidth === null) {\n    this.titleSelectedWidth = this.wheelnav.titleSelectedWidth;\n  }\n\n  if (this.wheelnav.titleSelectedHeight !== null && this.titleSelectedHeight === null) {\n    this.titleSelectedHeight = this.wheelnav.titleSelectedHeight;\n  }\n\n  if (this.titleSelectedWidth !== null && this.titleSelectedHeight === null) {\n    this.titleSelectedHeight = this.titleSelectedWidth;\n  }\n\n  if (this.titleSelectedWidth === null && this.titleSelectedHeight !== null) {\n    this.titleSelectedWidth = this.titleSelectedHeight;\n  }\n\n  if (this.titleHoverHeight === null) {\n    this.titleHoverHeight = this.titleHeight;\n  }\n\n  if (this.titleHoverWidth === null) {\n    this.titleHoverWidth = this.titleWidth;\n  }\n\n  if (this.titleSelectedHeight === null) {\n    this.titleSelectedHeight = this.titleHeight;\n  }\n\n  if (this.titleSelectedWidth === null) {\n    this.titleSelectedWidth = this.titleWidth;\n  } //Set line from wheelnav\n\n\n  if (this.wheelnav.linePathAttr !== null) {\n    this.linePathAttr = JSON.parse(JSON.stringify(this.wheelnav.linePathAttr));\n  }\n\n  if (this.wheelnav.lineHoverAttr !== null) {\n    this.lineHoverAttr = JSON.parse(JSON.stringify(this.wheelnav.lineHoverAttr));\n  }\n\n  if (this.wheelnav.lineSelectedAttr !== null) {\n    this.lineSelectedAttr = JSON.parse(JSON.stringify(this.wheelnav.lineSelectedAttr));\n  } //Set animation from wheelnav\n\n\n  if (this.animateeffect === null || force) {\n    if (this.wheelnav.animateeffect !== null) {\n      this.animateeffect = this.wheelnav.animateeffect;\n    } else {\n      this.animateeffect = \"bounce\";\n    }\n  }\n\n  if (this.animatetime === null || force) {\n    if (this.wheelnav.animatetime !== null) {\n      this.animatetime = this.wheelnav.animatetime;\n    } else {\n      this.animatetime = 1500;\n    }\n  }\n\n  if (this.title !== null) {\n    if (this.sliceInitPathFunction === null || force) {\n      this.sliceInitPathFunction = this.wheelnav.sliceInitPathFunction;\n    }\n\n    if (this.sliceClickablePathFunction === null || force) {\n      this.sliceClickablePathFunction = this.wheelnav.sliceClickablePathFunction;\n    }\n\n    if (this.slicePathFunction === null || force) {\n      this.slicePathFunction = this.wheelnav.slicePathFunction;\n    }\n\n    if (this.sliceSelectedPathFunction === null || force) {\n      this.sliceSelectedPathFunction = this.wheelnav.sliceSelectedPathFunction;\n    }\n\n    if (this.sliceHoverPathFunction === null || force) {\n      this.sliceHoverPathFunction = this.wheelnav.sliceHoverPathFunction;\n    }\n\n    if (this.sliceTransformFunction === null || force) {\n      this.sliceTransformFunction = this.wheelnav.sliceTransformFunction;\n    }\n\n    if (this.sliceSelectedTransformFunction === null || force) {\n      this.sliceSelectedTransformFunction = this.wheelnav.sliceSelectedTransformFunction;\n    }\n\n    if (this.sliceHoverTransformFunction === null || force) {\n      this.sliceHoverTransformFunction = this.wheelnav.sliceHoverTransformFunction;\n    }\n\n    if (this.sliceInitTransformFunction === null || force) {\n      this.sliceInitTransformFunction = this.wheelnav.sliceInitTransformFunction;\n    }\n  } else {\n    this.sliceInitPathFunction = slicePath().NullInitSlice;\n    this.sliceClickablePathFunction = slicePath().NullSlice;\n    this.slicePathFunction = slicePath().NullSlice;\n    this.sliceSelectedPathFunction = null;\n    this.sliceHoverPathFunction = null;\n    this.sliceTransformFunction = null;\n    this.sliceSelectedTransformFunction = null;\n    this.sliceHoverTransformFunction = null;\n    this.sliceInitTransformFunction = null;\n  }\n\n  if (this.slicePathCustom === null || force) {\n    this.slicePathCustom = this.wheelnav.slicePathCustom;\n  }\n\n  if (this.sliceClickablePathCustom === null || force) {\n    this.sliceClickablePathCustom = this.wheelnav.sliceClickablePathCustom;\n  }\n\n  if (this.sliceSelectedPathCustom === null || force) {\n    this.sliceSelectedPathCustom = this.wheelnav.sliceSelectedPathCustom;\n  }\n\n  if (this.sliceHoverPathCustom === null || force) {\n    this.sliceHoverPathCustom = this.wheelnav.sliceHoverPathCustom;\n  }\n\n  if (this.sliceInitPathCustom === null || force) {\n    this.sliceInitPathCustom = this.wheelnav.sliceInitPathCustom;\n  }\n\n  if (this.sliceTransformCustom === null || force) {\n    this.sliceTransformCustom = this.wheelnav.sliceTransformCustom;\n  }\n\n  if (this.sliceSelectedTransformCustom === null || force) {\n    this.sliceSelectedTransformCustom = this.wheelnav.sliceSelectedTransformCustom;\n  }\n\n  if (this.sliceHoverTransformCustom === null || force) {\n    this.sliceHoverTransformCustom = this.wheelnav.sliceHoverTransformCustom;\n  }\n\n  if (this.sliceInitTransformCustom === null || force) {\n    this.sliceInitTransformCustom = this.wheelnav.sliceInitTransformCustom;\n  }\n\n  if (this.initPercent === null || force) {\n    this.initPercent = this.wheelnav.initPercent;\n  }\n\n  if (this.minPercent === null || force) {\n    this.minPercent = this.wheelnav.minPercent;\n  }\n\n  if (this.maxPercent === null || force) {\n    this.maxPercent = this.wheelnav.maxPercent;\n  }\n\n  if (this.hoverPercent === null || force) {\n    this.hoverPercent = this.wheelnav.hoverPercent;\n  }\n\n  if (this.selectedPercent === null || force) {\n    this.selectedPercent = this.wheelnav.selectedPercent;\n  }\n\n  if (this.clickablePercentMin === null || force) {\n    this.clickablePercentMin = this.wheelnav.clickablePercentMin;\n  }\n\n  if (this.clickablePercentMax === null || force) {\n    this.clickablePercentMax = this.wheelnav.clickablePercentMax;\n  }\n\n  if (this.titleSpreadScale === null || force) {\n    if (this.wheelnav.titleSpreadScale !== null) {\n      this.titleSpreadScale = this.wheelnav.titleSpreadScale;\n    } else {\n      this.titleSpreadScale = false;\n    }\n  }\n\n  if (this.sliceAngle === null || force) {\n    if (this.wheelnav.sliceAngle !== null) {\n      this.sliceAngle = this.wheelnav.sliceAngle;\n    }\n  }\n};\n\nwheelnavItem.prototype.initPathsAndTransforms = function () {\n  this.sliceHelper = new pathHelper();\n  this.sliceHelper.centerX = this.wheelnav.centerX;\n  this.sliceHelper.centerY = this.wheelnav.centerY;\n  this.sliceHelper.wheelRadius = this.wheelnav.wheelRadius;\n  this.sliceHelper.startAngle = this.baseAngle;\n  this.sliceHelper.sliceAngle = this.sliceAngle;\n  this.sliceHelper.itemIndex = this.itemIndex; //Set min/max sliecePaths\n  //Default - min\n\n  this.slicePathMin = this.slicePathFunction(this.sliceHelper, this.minPercent, this.slicePathCustom); //Default - max\n\n  this.slicePathMax = this.slicePathFunction(this.sliceHelper, this.maxPercent, this.slicePathCustom); //Selected - min\n\n  if (this.sliceSelectedPathFunction !== null) {\n    this.selectedSlicePathMin = this.sliceSelectedPathFunction(this.sliceHelper, this.selectedPercent * this.minPercent, this.sliceSelectedPathCustom);\n  } else {\n    this.selectedSlicePathMin = this.slicePathFunction(this.sliceHelper, this.selectedPercent * this.minPercent, this.sliceSelectedPathCustom);\n  } //Selected - max\n\n\n  if (this.sliceSelectedPathFunction !== null) {\n    this.selectedSlicePathMax = this.sliceSelectedPathFunction(this.sliceHelper, this.selectedPercent * this.maxPercent, this.sliceSelectedPathCustom);\n  } else {\n    this.selectedSlicePathMax = this.slicePathFunction(this.sliceHelper, this.selectedPercent * this.maxPercent, this.sliceSelectedPathCustom);\n  } //Hovered - min\n\n\n  if (this.sliceHoverPathFunction !== null) {\n    this.hoverSlicePathMin = this.sliceHoverPathFunction(this.sliceHelper, this.hoverPercent * this.minPercent, this.sliceHoverPathCustom);\n  } else {\n    this.hoverSlicePathMin = this.slicePathFunction(this.sliceHelper, this.hoverPercent * this.minPercent, this.sliceHoverPathCustom);\n  } //Hovered - max\n\n\n  if (this.sliceHoverPathFunction !== null) {\n    this.hoverSlicePathMax = this.sliceHoverPathFunction(this.sliceHelper, this.hoverPercent * this.maxPercent, this.sliceHoverPathCustom);\n  } else {\n    this.hoverSlicePathMax = this.slicePathFunction(this.sliceHelper, this.hoverPercent * this.maxPercent, this.sliceHoverPathCustom);\n  } //Set min/max sliececlickablePaths\n\n\n  if (this.sliceClickablePathFunction !== null) {\n    //Default - min\n    this.clickableSlicePathMin = this.sliceClickablePathFunction(this.sliceHelper, this.clickablePercentMin, this.sliceClickablePathCustom); //Default - max\n\n    this.clickableSlicePathMax = this.sliceClickablePathFunction(this.sliceHelper, this.clickablePercentMax, this.sliceClickablePathCustom);\n  } //Initial path\n\n\n  if (this.sliceInitPathFunction !== null) {\n    this.sliceInitPath = this.sliceInitPathFunction(this.sliceHelper, this.initPercent, this.sliceInitPathCustom);\n  } else {\n    if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {\n      this.sliceInitPath = this.slicePathFunction(this.sliceHelper, this.maxPercent, this.sliceInitPathCustom);\n    } else {\n      this.sliceInitPath = this.slicePathFunction(this.sliceHelper, this.minPercent, this.sliceInitPathCustom);\n    }\n  } //Set sliceTransforms\n  //Default\n\n\n  if (this.sliceTransformFunction !== null) {\n    this.sliceTransform = this.sliceTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.titleRotateAngle, this.itemIndex, this.sliceTransformCustom);\n  } else {\n    this.sliceTransform = sliceTransform().NullTransform;\n  } //Selected\n\n\n  if (this.sliceSelectedTransformFunction !== null) {\n    this.selectTransform = this.sliceSelectedTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.titleRotateAngle, this.itemIndex, this.sliceSelectedTransformCustom);\n  } else {\n    this.selectTransform = sliceTransform().NullTransform;\n  } //Hovered\n\n\n  if (this.sliceHoverTransformFunction !== null) {\n    this.hoverTransform = this.sliceHoverTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.titleRotateAngle, this.itemIndex, this.sliceHoverTransformCustom);\n  } else {\n    this.hoverTransform = sliceTransform().NullTransform;\n  } //Initial transform\n\n\n  if (this.sliceInitTransformFunction !== null) {\n    this.initTransform = this.sliceInitTransformFunction(this.wheelnav.centerX, this.wheelnav.centerY, this.wheelnav.wheelRadius, this.baseAngle, this.sliceAngle, this.titleRotateAngle, this.itemIndex, this.sliceInitTransformCustom);\n  } else {\n    this.initTransform = sliceTransform().NullTransform;\n  } //Set titles\n\n\n  if (wheelnavTitle().isPathTitle(this.title)) {\n    initNavTitle = new wheelnavTitle(this.title, this.wheelnav.raphael.raphael);\n    basicNavTitleMin = new wheelnavTitle(this.title, this.wheelnav.raphael.raphael);\n    basicNavTitleMax = new wheelnavTitle(this.title, this.wheelnav.raphael.raphael);\n    hoverNavTitleMin = new wheelnavTitle(this.titleHover, this.wheelnav.raphael.raphael);\n    hoverNavTitleMax = new wheelnavTitle(this.titleHover, this.wheelnav.raphael.raphael);\n    selectedNavTitleMin = new wheelnavTitle(this.titleSelected, this.wheelnav.raphael.raphael);\n    selectedNavTitleMax = new wheelnavTitle(this.titleSelected, this.wheelnav.raphael.raphael);\n    this.navTitleSizeTransform = basicNavTitleMax.getTitleSizeTransform(this.titleWidth, this.titleHeight);\n    this.navTitleSizeHoverTransform = hoverNavTitleMax.getTitleSizeTransform(this.titleHoverWidth, this.titleHoverHeight);\n    this.navTitleSizeSelectedTransform = selectedNavTitleMax.getTitleSizeTransform(this.titleSelectedWidth, this.titleSelectedHeight);\n  } else {\n    initNavTitle = new wheelnavTitle(this.title);\n    basicNavTitleMin = new wheelnavTitle(this.title);\n    basicNavTitleMax = new wheelnavTitle(this.title);\n    hoverNavTitleMin = new wheelnavTitle(this.titleHover);\n    hoverNavTitleMax = new wheelnavTitle(this.titleHover);\n    selectedNavTitleMin = new wheelnavTitle(this.titleSelected);\n    selectedNavTitleMax = new wheelnavTitle(this.titleSelected);\n  }\n\n  this.initNavTitle = initNavTitle.getTitlePercentAttr(this.sliceInitPath.titlePosX, this.sliceInitPath.titlePosY, this.titleWidth, this.titleHeight);\n  this.basicNavTitleMin = basicNavTitleMin.getTitlePercentAttr(this.slicePathMin.titlePosX, this.slicePathMin.titlePosY, this.titleWidth, this.titleHeight);\n  this.basicNavTitleMax = basicNavTitleMax.getTitlePercentAttr(this.slicePathMax.titlePosX, this.slicePathMax.titlePosY, this.titleWidth, this.titleHeight);\n  this.hoverNavTitleMin = hoverNavTitleMin.getTitlePercentAttr(this.hoverSlicePathMin.titlePosX, this.hoverSlicePathMin.titlePosY, this.titleHoverWidth, this.titleHoverHeight);\n  this.hoverNavTitleMax = hoverNavTitleMax.getTitlePercentAttr(this.hoverSlicePathMax.titlePosX, this.hoverSlicePathMax.titlePosY, this.titleHoverWidth, this.titleHoverHeight);\n  this.selectedNavTitleMin = selectedNavTitleMin.getTitlePercentAttr(this.selectedSlicePathMin.titlePosX, this.selectedSlicePathMin.titlePosY, this.titleSelectedWidth, this.titleSelectedHeight);\n  this.selectedNavTitleMax = selectedNavTitleMax.getTitlePercentAttr(this.selectedSlicePathMax.titlePosX, this.selectedSlicePathMax.titlePosY, this.titleSelectedWidth, this.titleSelectedHeight);\n};\n\nwheelnavItem.prototype.getCurrentPath = function () {\n  var slicePath;\n\n  if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {\n    if (this.selected) {\n      slicePath = this.selectedSlicePathMax;\n    } else {\n      if (this.hovered) {\n        slicePath = this.hoverSlicePathMax;\n      } else {\n        slicePath = this.slicePathMax;\n      }\n    }\n  } else {\n    if (this.selected) {\n      slicePath = this.selectedSlicePathMin;\n    } else {\n      if (this.hovered) {\n        slicePath = this.hoverSlicePathMin;\n      } else {\n        slicePath = this.slicePathMin;\n      }\n    }\n  }\n\n  return slicePath;\n};\n\nwheelnavItem.prototype.getCurrentClickablePath = function () {\n  var sliceClickablePath;\n\n  if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {\n    sliceClickablePath = this.clickableSlicePathMax;\n  } else {\n    sliceClickablePath = this.clickableSlicePathMin;\n  }\n\n  return sliceClickablePath;\n};\n\nwheelnavItem.prototype.getCurrentTitle = function () {\n  var currentTitle;\n\n  if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {\n    if (this.selected) {\n      currentTitle = this.selectedNavTitleMax;\n    } else {\n      if (this.hovered) {\n        currentTitle = this.hoverNavTitleMax;\n      } else {\n        currentTitle = this.basicNavTitleMax;\n      }\n    }\n  } else {\n    if (this.selected) {\n      currentTitle = this.selectedNavTitleMin;\n    } else {\n      if (this.hovered) {\n        currentTitle = this.hoverNavTitleMin;\n      } else {\n        currentTitle = this.basicNavTitleMin;\n      }\n    }\n  }\n\n  return currentTitle;\n};\n\nwheelnavItem.prototype.getItemRotateString = function () {\n  return \"r,\" + this.currentRotateAngle.toString() + \",\" + this.wheelnav.centerX + \",\" + this.wheelnav.centerY;\n};\n\nwheelnavItem.prototype.getTitleRotateString = function (withTitleRotateAngle) {\n  var titleRotate = \"\";\n  titleRotate += this.getItemRotateString();\n\n  if (this.titleRotateAngle !== null && withTitleRotateAngle) {\n    titleRotate += \",r,\" + (this.navAngle + this.titleRotateAngle).toString();\n  } else {\n    titleRotate += \",r,\" + (-this.currentRotateAngle).toString();\n  }\n\n  return titleRotate;\n};\n\nwheelnavTitle = function wheelnavTitle(title, raphael) {\n  this.title = title; //Calculate relative path\n\n  if (title !== null) {\n    if (raphael !== undefined) {\n      this.relativePath = raphael.pathToRelative(title);\n      var bbox = raphael.pathBBox(this.relativePath);\n      this.centerX = bbox.cx;\n      this.centerY = bbox.cy;\n      this.width = bbox.width;\n      this.height = bbox.height;\n      this.startX = this.relativePath[0][1];\n      this.startY = this.relativePath[0][2];\n    }\n\n    this.title = title;\n  } else {\n    this.title = \"\";\n  }\n\n  this.isPathTitle = function (title) {\n    if (title !== null && (title.substr(0, 1) === \"m\" || title.substr(0, 1) === \"M\") && (title.substr(title.length - 1, 1) === \"z\" || title.substr(title.length - 1, 1) === \"Z\") && (title.indexOf(\",\") > -1 || title.indexOf(\" \") > -1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  this.isImageTitle = function (title) {\n    if (title === undefined) {\n      title = this.title;\n    }\n\n    if (title !== null && title.substr(0, 7) === \"imgsrc:\") {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return this;\n};\n\nwheelnavTitle.prototype.getTitlePercentAttr = function (currentX, currentY, titlewidth, titleheight) {\n  var transformAttr = {};\n\n  if (this.relativePath !== undefined) {\n    var pathCx = currentX + (this.startX - this.centerX);\n    var pathCy = currentY + (this.startY - this.centerY);\n    this.relativePath[0][1] = pathCx;\n    this.relativePath[0][2] = pathCy;\n    transformAttr = {\n      path: this.relativePath,\n      title: this.title\n    };\n  } else {\n    if (this.isImageTitle()) {\n      transformAttr = {\n        x: currentX - titlewidth / 2,\n        y: currentY - titleheight / 2,\n        width: titlewidth,\n        height: titleheight,\n        title: this.title,\n        src: this.title.substr(7, this.title.length)\n      };\n    } else {\n      transformAttr = {\n        x: currentX,\n        y: currentY,\n        title: this.title\n      };\n    }\n  }\n\n  return transformAttr;\n};\n\nwheelnavTitle.prototype.getTitleSizeTransform = function (titlewidth, titleheight) {\n  var transformAttr = \"\"; //Calculate path width & height\n\n  if (titlewidth !== null && titleheight !== null) {\n    transformAttr = \"s\";\n\n    if (this.height > this.width) {\n      transformAttr += (titlewidth / this.height).toString() + \",\";\n      transformAttr += (titleheight / this.height).toString();\n    } else {\n      transformAttr += (titlewidth / this.width).toString() + \",\";\n      transformAttr += (titleheight / this.width).toString();\n    }\n  }\n\n  return transformAttr;\n}; ///#source 1 1 /js/source/wheelnav.style.js\n\n/* ======================================================================================= */\n\n/* Default styles and available css classes                                                */\n\n/* ======================================================================================= */\n\n/* ======================================================================================= */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/css3.html          */\n\n/* ======================================================================================= */\n\n\nwheelnav.prototype.styleWheel = function () {\n  if (!this.cssMode) {\n    if (this.spreaderPathInAttr === undefined || this.spreaderPathInAttr === null) {\n      this.spreaderPathInAttr = {\n        fill: \"#444\",\n        stroke: \"#444\",\n        \"stroke-width\": 2,\n        cursor: 'pointer'\n      };\n    }\n\n    if (this.spreaderPathOutAttr === undefined || this.spreaderPathOutAttr === null) {\n      this.spreaderPathOutAttr = {\n        fill: \"#444\",\n        stroke: \"#444\",\n        \"stroke-width\": 2,\n        cursor: 'pointer'\n      };\n    }\n\n    if (this.spreaderTitleInAttr === undefined || this.spreaderTitleInAttr === null) {\n      this.spreaderTitleInAttr = {\n        fill: \"#eee\",\n        stroke: \"#444\",\n        cursor: 'pointer'\n      };\n    }\n\n    if (this.spreaderTitleOutAttr === undefined || this.spreaderTitleOutAttr === null) {\n      this.spreaderTitleOutAttr = {\n        fill: \"#eee\",\n        stroke: \"#444\",\n        cursor: 'pointer'\n      };\n    }\n\n    if (this.markerAttr === undefined || this.markerAttr === null) {\n      this.markerAttr = {\n        stroke: \"#444\",\n        \"stroke-width\": 2\n      };\n    }\n  } else {\n    this.spreaderPathInAttr = {\n      \"class\": this.getSpreaderCssClass(\"in\")\n    };\n    this.spreaderPathOutAttr = {\n      \"class\": this.getSpreaderCssClass(\"out\")\n    };\n    this.spreaderTitleInAttr = {\n      \"class\": this.getSpreaderTitleCssClass(\"in\")\n    };\n    this.spreaderTitleOutAttr = {\n      \"class\": this.getSpreaderTitleCssClass(\"out\")\n    };\n    this.markerAttr = {\n      \"class\": this.getMarkerCssClass()\n    };\n  }\n};\n\nwheelnavItem.prototype.styleNavItem = function () {\n  if (!this.wheelnav.cssMode) {\n    this.slicePathAttr = {\n      stroke: \"#333\",\n      \"stroke-width\": 0,\n      cursor: 'pointer',\n      \"fill-opacity\": 1\n    };\n    this.sliceHoverAttr = {\n      stroke: \"#222\",\n      \"stroke-width\": 0,\n      cursor: 'pointer',\n      \"fill-opacity\": 0.77\n    };\n    this.sliceSelectedAttr = {\n      stroke: \"#111\",\n      \"stroke-width\": 0,\n      cursor: 'default',\n      \"fill-opacity\": 1\n    };\n    this.titleAttr = {\n      font: this.titleFont,\n      fill: \"#333\",\n      stroke: \"none\",\n      cursor: 'pointer'\n    };\n    this.titleHoverAttr = {\n      font: this.titleFont,\n      fill: \"#222\",\n      cursor: 'pointer',\n      stroke: \"none\"\n    };\n    this.titleSelectedAttr = {\n      font: this.titleFont,\n      fill: \"#fff\",\n      cursor: 'default'\n    };\n    this.linePathAttr = {\n      stroke: \"#444\",\n      \"stroke-width\": 1,\n      cursor: 'pointer'\n    };\n    this.lineHoverAttr = {\n      stroke: \"#222\",\n      \"stroke-width\": 2,\n      cursor: 'pointer'\n    };\n    this.lineSelectedAttr = {\n      stroke: \"#444\",\n      \"stroke-width\": 1,\n      cursor: 'default'\n    };\n  } else {\n    this.slicePathAttr = {\n      \"class\": this.wheelnav.getSliceCssClass(this.wheelItemIndex, \"basic\")\n    };\n    this.sliceHoverAttr = {\n      \"class\": this.wheelnav.getSliceCssClass(this.wheelItemIndex, \"hover\")\n    };\n    this.sliceSelectedAttr = {\n      \"class\": this.wheelnav.getSliceCssClass(this.wheelItemIndex, \"selected\")\n    };\n    this.titleAttr = {\n      \"class\": this.wheelnav.getTitleCssClass(this.wheelItemIndex, \"basic\")\n    };\n    this.titleHoverAttr = {\n      \"class\": this.wheelnav.getTitleCssClass(this.wheelItemIndex, \"hover\")\n    };\n    this.titleSelectedAttr = {\n      \"class\": this.wheelnav.getTitleCssClass(this.wheelItemIndex, \"selected\")\n    };\n    this.linePathAttr = {\n      \"class\": this.wheelnav.getLineCssClass(this.wheelItemIndex, \"basic\")\n    };\n    this.lineHoverAttr = {\n      \"class\": this.wheelnav.getLineCssClass(this.wheelItemIndex, \"hover\")\n    };\n    this.lineSelectedAttr = {\n      \"class\": this.wheelnav.getLineCssClass(this.wheelItemIndex, \"selected\")\n    };\n  }\n\n  this.sliceClickablePathAttr = {\n    fill: \"#FFF\",\n    stroke: \"#FFF\",\n    \"stroke-width\": 0,\n    cursor: 'pointer',\n    \"fill-opacity\": 0.01\n  };\n  this.sliceClickableHoverAttr = {\n    stroke: \"#FFF\",\n    \"stroke-width\": 0,\n    cursor: 'pointer'\n  };\n  this.sliceClickableSelectedAttr = {\n    stroke: \"#FFF\",\n    \"stroke-width\": 0,\n    cursor: 'default'\n  };\n};\n\nwheelnav.prototype.getSliceCssClass = function (index, subclass) {\n  return \"wheelnav-\" + this.holderId + \"-slice-\" + subclass + \"-\" + index;\n};\n\nwheelnav.prototype.getTitleCssClass = function (index, subclass) {\n  return \"wheelnav-\" + this.holderId + \"-title-\" + subclass + \"-\" + index;\n};\n\nwheelnav.prototype.getLineCssClass = function (index, subclass) {\n  return \"wheelnav-\" + this.holderId + \"-line-\" + subclass + \"-\" + index;\n};\n\nwheelnav.prototype.getSpreaderCssClass = function (state) {\n  return \"wheelnav-\" + this.holderId + \"-spreader-\" + state;\n};\n\nwheelnav.prototype.getSpreaderTitleCssClass = function (state) {\n  return \"wheelnav-\" + this.holderId + \"-spreadertitle-\" + state;\n};\n\nwheelnav.prototype.getMarkerCssClass = function () {\n  return \"wheelnav-\" + this.holderId + \"-marker\";\n}; ///#source 1 1 /js/source/wheelnav.pathHelper.js\n\n/* ======================================================================================= */\n\n/* Slice path helper functions                                                                  */\n\n/* ======================================================================================= */\n\n/* ======================================================================================= */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/slicePath.html     */\n\n/* ======================================================================================= */\n\n\nvar pathHelper = function pathHelper() {\n  this.sliceRadius = 0;\n  this.startAngle = 0;\n  this.middleAngle = 0;\n  this.endAngle = 0;\n  this.sliceAngle = 0;\n  this.startTheta = 0;\n  this.middleTheta = 0;\n  this.endTheta = 0;\n  this.titlePosX = 0;\n  this.titlePosY = 0;\n  this.titleRadius = 0;\n  this.titleTheta = 0;\n  this.custom = null;\n  this.centerX = 0;\n  this.centerY = 0;\n  this.wheelRadius = 0;\n  this.itemIndex = 0;\n  this.navItemCount = 0;\n  this.navAngle = 0;\n\n  this.setBaseValue = function (percent, custom) {\n    if (custom === null) {\n      custom = new slicePathCustomization();\n    } else {\n      this.custom = custom;\n    }\n\n    this.sliceRadius = this.wheelRadius * percent * 0.9;\n    this.middleAngle = this.startAngle + this.sliceAngle / 2;\n    this.endAngle = this.startAngle + this.sliceAngle;\n    this.startTheta = this.getTheta(this.startAngle);\n    this.middleTheta = this.getTheta(this.middleAngle);\n    this.endTheta = this.getTheta(this.endAngle);\n\n    if (custom !== null) {\n      if (custom.titleRadiusPercent !== null) {\n        this.titleRadius = this.sliceRadius * custom.titleRadiusPercent;\n      }\n\n      if (custom.titleSliceAnglePercent !== null) {\n        this.titleTheta = this.getTheta(this.startAngle + this.sliceAngle * custom.titleSliceAnglePercent);\n      }\n    } else {\n      this.titleRadius = this.sliceRadius * 0.5;\n      this.titleTheta = this.middleTheta;\n    }\n\n    this.setTitlePos();\n  };\n\n  this.setTitlePos = function () {\n    this.titlePosX = this.titleRadius * Math.cos(this.titleTheta) + this.centerX;\n    this.titlePosY = this.titleRadius * Math.sin(this.titleTheta) + this.centerY;\n  };\n\n  this.getX = function (angle, length) {\n    return length * Math.cos(this.getTheta(angle)) + this.centerX;\n  };\n\n  this.getY = function (angle, length) {\n    return length * Math.sin(this.getTheta(angle)) + this.centerY;\n  };\n\n  this.MoveTo = function (angle, length) {\n    return [\"M\", this.getX(angle, length), this.getY(angle, length)];\n  };\n\n  this.MoveToCenter = function () {\n    return [\"M\", this.centerX, this.centerY];\n  };\n\n  this.LineTo = function (angle, length, angleY, lengthY) {\n    if (angleY === undefined) {\n      angleY = angle;\n    }\n\n    if (lengthY === undefined) {\n      lengthY = length;\n    }\n\n    return [\"L\", this.getX(angle, length), this.getY(angleY, lengthY)];\n  };\n\n  this.ArcTo = function (arcRadius, angle, length) {\n    return [\"A\", arcRadius, arcRadius, 0, 0, 1, this.getX(angle, length), this.getY(angle, length)];\n  };\n\n  this.ArcBackTo = function (arcRadius, angle, length) {\n    return [\"A\", arcRadius, arcRadius, 0, 0, 0, this.getX(angle, length), this.getY(angle, length)];\n  };\n\n  this.StartSpreader = function (spreaderPathString, angle, length) {\n    if (this.endAngle - this.startAngle === 360) {\n      spreaderPathString.push(this.MoveTo(angle, length));\n    } else {\n      spreaderPathString.push(this.MoveToCenter());\n      spreaderPathString.push(this.LineTo(angle, length));\n    }\n  };\n\n  this.Close = function () {\n    return [\"z\"];\n  };\n\n  this.getTheta = function (angle) {\n    return angle % 360 * Math.PI / 180;\n  }; // Converts from degrees to radians.\n\n\n  this.radians = function (degrees) {\n    return degrees * Math.PI / 180;\n  }; // Converts from radians to degrees.\n\n\n  this.degrees = function (radians) {\n    return radians * 180 / Math.PI;\n  };\n\n  return this;\n};\n/* Custom properties\r\n    - titleRadiusPercent\r\n    - titleSliceAnglePercent\r\n*/\n\n\nvar slicePathCustomization = function slicePathCustomization() {\n  this.titleRadiusPercent = 0.5;\n  this.titleSliceAnglePercent = 0.5;\n  return this;\n};\n/* Custom properties\r\n    - titleRadiusPercent\r\n    - titleSliceAnglePercent\r\n    - spreaderPercent\r\n*/\n\n\nvar spreaderPathCustomization = function spreaderPathCustomization() {\n  this.titleRadiusPercent = 0;\n  this.titleSliceAnglePercent = 0.5;\n  this.spreaderPercent = 1;\n  return this;\n};\n/* Custom properties\r\n    - titleRadiusPercent\r\n    - titleSliceAnglePercent\r\n    - markerPercent\r\n*/\n\n\nvar markerPathCustomization = function markerPathCustomization() {\n  this.titleRadiusPercent = 1;\n  this.titleSliceAnglePercent = 0.5;\n  this.markerPercent = 1.05;\n  return this;\n}; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.js\n///#source 1 1 /js/source/slicePath/wheelnav.slicePathStart.js\n\n/* ======================================================================================= */\n\n/* Slice path definitions.                                                                 */\n\n/* ======================================================================================= */\n\n/* ======================================================================================= */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/slicePath.html     */\n\n/* ======================================================================================= */\n\n\nslicePath = function slicePath() {\n  this.NullSlice = function (helper, percent, custom) {\n    helper.setBaseValue(percent, custom);\n    return {\n      slicePathString: \"\",\n      linePathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  };\n\n  this.NullInitSlice = function (helper, percent, custom) {\n    helper.setBaseValue(percent, custom);\n    slicePathString = [helper.MoveToCenter(), helper.Close()];\n    return {\n      slicePathString: slicePathString,\n      linePathString: slicePathString,\n      titlePosX: helper.centerX,\n      titlePosY: helper.centerY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Pie.js\n\n\n  this.PieSliceCustomization = function () {\n    var custom = new slicePathCustomization();\n    custom.titleRadiusPercent = 0.6;\n    custom.arcBaseRadiusPercent = 1;\n    custom.arcRadiusPercent = 1;\n    custom.startRadiusPercent = 0;\n    return custom;\n  };\n\n  this.PieSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = PieSliceCustomization();\n    }\n\n    helper.setBaseValue(percent, custom);\n    var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;\n    var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;\n    slicePathString = [helper.MoveTo(helper.middleAngle, custom.startRadiusPercent * helper.sliceRadius), helper.LineTo(helper.startAngle, arcBaseRadius), helper.ArcTo(arcRadius, helper.middleAngle, arcBaseRadius), helper.ArcTo(arcRadius, helper.endAngle, arcBaseRadius), helper.Close()];\n    return {\n      slicePathString: slicePathString,\n      linePathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  };\n\n  this.FlowerSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = PieSliceCustomization();\n      custom.titleRadiusPercent = 0.5;\n      custom.arcBaseRadiusPercent = 0.65;\n      custom.arcRadiusPercent = 0.14;\n    }\n\n    var slicePath = PieSlice(helper, percent, custom);\n    return {\n      slicePathString: slicePath.slicePathString,\n      linePathString: \"\",\n      titlePosX: slicePath.titlePosX,\n      titlePosY: slicePath.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.PieArrow.js\n\n\n  this.PieArrowSliceCustomization = function () {\n    var custom = new slicePathCustomization();\n    custom.titleRadiusPercent = 0.6;\n    custom.arrowRadiusPercent = 1.1;\n    return custom;\n  };\n\n  this.PieArrowSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = PieArrowSliceCustomization();\n    }\n\n    helper.setBaseValue(percent, custom);\n    r = helper.sliceRadius;\n    arrowAngleStart = helper.startAngle + helper.sliceAngle * 0.45;\n    arrowAngleEnd = helper.startAngle + helper.sliceAngle * 0.55;\n    var arrowRadius = r * custom.arrowRadiusPercent;\n    slicePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, r), helper.ArcTo(r, arrowAngleStart, r), helper.LineTo(helper.middleAngle, arrowRadius), helper.LineTo(arrowAngleEnd, r), helper.ArcTo(r, helper.endAngle, r), helper.Close()];\n    return {\n      slicePathString: slicePathString,\n      linePathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  };\n\n  this.PieArrowBasePieSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = PieArrowSliceCustomization();\n    }\n\n    custom.arrowRadiusPercent = 1;\n    var slicePath = PieArrowSlice(helper, percent, custom);\n    return {\n      slicePathString: slicePath.slicePathString,\n      linePathString: \"\",\n      titlePosX: slicePath.titlePosX,\n      titlePosY: slicePath.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Donut.js\n\n\n  this.DonutSliceCustomization = function () {\n    var custom = new slicePathCustomization();\n    custom.minRadiusPercent = 0.37;\n    custom.maxRadiusPercent = 0.9;\n    return custom;\n  };\n\n  this.DonutSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = DonutSliceCustomization();\n    }\n\n    maxRadius = helper.wheelRadius * percent * custom.maxRadiusPercent;\n    minRadius = helper.wheelRadius * percent * custom.minRadiusPercent;\n    helper.setBaseValue(percent, custom);\n    helper.titleRadius = (maxRadius + minRadius) / 2;\n    helper.setTitlePos();\n    slicePathString = [helper.MoveTo(helper.startAngle, minRadius), helper.LineTo(helper.startAngle, maxRadius), helper.ArcTo(maxRadius, helper.middleAngle, maxRadius), helper.ArcTo(maxRadius, helper.endAngle, maxRadius), helper.LineTo(helper.endAngle, minRadius), helper.ArcBackTo(minRadius, helper.middleAngle, minRadius), helper.ArcBackTo(minRadius, helper.startAngle, minRadius), helper.Close()];\n    return {\n      slicePathString: slicePathString,\n      linePathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Cog.js\n\n\n  this.CogSliceCustomization = function () {\n    var custom = new slicePathCustomization();\n    custom.titleRadiusPercent = 0.55;\n    custom.isBasePieSlice = false;\n    return custom;\n  };\n\n  this.CogSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = CogSliceCustomization();\n    }\n\n    helper.setBaseValue(percent, custom);\n    r = helper.sliceRadius;\n    rbase = helper.wheelRadius * percent * 0.83;\n    percentAngle0625 = helper.startAngle + helper.sliceAngle * 0.0625;\n    percentAngle1250 = helper.startAngle + helper.sliceAngle * 0.125;\n    percentAngle1875 = helper.startAngle + helper.sliceAngle * 0.1875;\n    percentAngle2500 = helper.startAngle + helper.sliceAngle * 0.25;\n    percentAngle3125 = helper.startAngle + helper.sliceAngle * 0.3125;\n    percentAngle3750 = helper.startAngle + helper.sliceAngle * 0.375;\n    percentAngle4375 = helper.startAngle + helper.sliceAngle * 0.4375;\n    percentAngle5000 = helper.startAngle + helper.sliceAngle * 0.5;\n    percentAngle5625 = helper.startAngle + helper.sliceAngle * 0.5625;\n    percentAngle6250 = helper.startAngle + helper.sliceAngle * 0.625;\n    percentAngle6875 = helper.startAngle + helper.sliceAngle * 0.6875;\n    percentAngle7500 = helper.startAngle + helper.sliceAngle * 0.75;\n    percentAngle8125 = helper.startAngle + helper.sliceAngle * 0.8125;\n    percentAngle8750 = helper.startAngle + helper.sliceAngle * 0.875;\n    percentAngle9375 = helper.startAngle + helper.sliceAngle * 0.9375;\n    percentAngle9687 = helper.startAngle + helper.sliceAngle * 0.96875;\n\n    if (custom.isBasePieSlice) {\n      r = rbase;\n      slicePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, r), helper.ArcTo(r, percentAngle0625, r), helper.ArcTo(r, percentAngle1250, r), helper.ArcTo(r, percentAngle1875, r), helper.ArcTo(r, percentAngle2500, r), helper.ArcTo(r, percentAngle3125, r), helper.ArcTo(r, percentAngle3750, r), helper.ArcTo(r, percentAngle4375, r), helper.ArcTo(r, percentAngle5000, r), helper.ArcTo(r, percentAngle5625, r), helper.ArcTo(r, percentAngle6250, r), helper.ArcTo(r, percentAngle6875, r), helper.ArcTo(r, percentAngle7500, r), helper.ArcTo(r, percentAngle8125, r), helper.ArcTo(r, percentAngle8750, r), helper.ArcTo(r, percentAngle9375, r), helper.ArcTo(r, percentAngle9687, r), helper.ArcTo(r, helper.endAngle, r), helper.Close()];\n    } else {\n      slicePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, r), helper.ArcTo(r, percentAngle0625, r), helper.LineTo(percentAngle0625, rbase), helper.ArcTo(rbase, percentAngle1875, rbase), helper.LineTo(percentAngle1875, r), helper.ArcTo(r, percentAngle3125, r), helper.LineTo(percentAngle3125, rbase), helper.ArcTo(rbase, percentAngle4375, rbase), helper.LineTo(percentAngle4375, r), helper.ArcTo(r, percentAngle5625, r), helper.LineTo(percentAngle5625, rbase), helper.ArcTo(rbase, percentAngle6875, rbase), helper.LineTo(percentAngle6875, r), helper.ArcTo(r, percentAngle8125, r), helper.LineTo(percentAngle8125, rbase), helper.ArcTo(rbase, percentAngle9375, rbase), helper.LineTo(percentAngle9375, r), helper.ArcTo(r, helper.endAngle, r), helper.Close()];\n    }\n\n    return {\n      slicePathString: slicePathString,\n      linePathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  };\n\n  this.CogBasePieSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = CogSliceCustomization();\n    }\n\n    custom.isBasePieSlice = true;\n    var slicePath = CogSlice(helper, percent, custom);\n    return {\n      slicePathString: slicePath.slicePathString,\n      linePathString: \"\",\n      titlePosX: slicePath.titlePosX,\n      titlePosY: slicePath.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Star.js\n\n\n  this.StarSliceCustomization = function () {\n    var custom = new slicePathCustomization();\n    custom.titleRadiusPercent = 0.44;\n    custom.minRadiusPercent = 0.5;\n    custom.isBasePieSlice = false;\n    return custom;\n  };\n\n  this.StarSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = StarSliceCustomization();\n    }\n\n    helper.setBaseValue(percent, custom);\n    r = helper.wheelRadius * percent;\n    rbase = r * custom.minRadiusPercent;\n\n    if (custom.isBasePieSlice) {\n      r = helper.sliceRadius;\n      slicePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, r), helper.ArcTo(r, helper.middleAngle, r), helper.ArcTo(r, helper.endAngle, r), helper.Close()];\n    } else {\n      slicePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, rbase), helper.LineTo(helper.middleAngle, r), helper.LineTo(helper.endAngle, rbase), helper.Close()];\n    }\n\n    return {\n      slicePathString: slicePathString,\n      linePathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  };\n\n  this.StarBasePieSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = StarSliceCustomization();\n    }\n\n    custom.titleRadiusPercent = 0.6;\n    custom.isBasePieSlice = true;\n    var slicePath = StarSlice(helper, percent, custom);\n    return {\n      slicePathString: slicePath.slicePathString,\n      linePathString: \"\",\n      titlePosX: slicePath.titlePosX,\n      titlePosY: slicePath.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Menu.js\n\n\n  this.MenuSliceCustomization = function () {\n    var custom = new slicePathCustomization();\n    custom.menuRadius = 35;\n    custom.titleRadiusPercent = 0.63;\n    custom.isSelectedLine = false;\n    custom.lineBaseRadiusPercent = 0;\n    return custom;\n  };\n\n  this.MenuSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = MenuSliceCustomization();\n    }\n\n    helper.setBaseValue(percent, custom);\n    x = helper.centerX;\n    y = helper.centerY;\n    var r = helper.wheelRadius * percent;\n    helper.titleRadius = r * custom.titleRadiusPercent;\n    helper.setTitlePos();\n    var menuRadius = percent * custom.menuRadius;\n\n    if (percent <= 0.05) {\n      menuRadius = 10;\n    }\n\n    middleTheta = helper.middleTheta;\n    slicePathString = [[\"M\", helper.titlePosX - menuRadius * Math.cos(middleTheta), helper.titlePosY - menuRadius * Math.sin(middleTheta)], [\"A\", menuRadius, menuRadius, 0, 0, 1, helper.titlePosX + menuRadius * Math.cos(middleTheta), helper.titlePosY + menuRadius * Math.sin(middleTheta)], [\"A\", menuRadius, menuRadius, 0, 0, 1, helper.titlePosX - menuRadius * Math.cos(middleTheta), helper.titlePosY - menuRadius * Math.sin(middleTheta)], [\"z\"]];\n\n    if (percent <= 0.05) {\n      linePathString = [[\"M\", x, y], [\"A\", 1, 1, 0, 0, 1, x + 1, y + 1]];\n    } else {\n      if (!custom.isSelectedLine) {\n        linePathString = [helper.MoveTo(helper.middleAngle, custom.lineBaseRadiusPercent * r), helper.ArcTo(r / 2, helper.middleAngle, helper.titleRadius - menuRadius)];\n      } else {\n        linePathString = [helper.MoveTo(helper.middleAngle, custom.lineBaseRadiusPercent * r), helper.ArcTo(r / 3, helper.middleAngle, helper.titleRadius - menuRadius)];\n      }\n    }\n\n    return {\n      slicePathString: slicePathString,\n      linePathString: linePathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  };\n\n  this.MenuSliceSelectedLine = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = MenuSliceCustomization();\n    }\n\n    custom.isSelectedLine = true;\n    var slicePath = MenuSlice(helper, percent, custom);\n    return {\n      slicePathString: slicePath.slicePathString,\n      linePathString: slicePath.linePathString,\n      titlePosX: slicePath.titlePosX,\n      titlePosY: slicePath.titlePosY\n    };\n  };\n\n  this.MenuSliceWithoutLine = function (helper, percent, custom) {\n    var slicePath = MenuSlice(helper, percent, custom);\n    return {\n      slicePathString: slicePath.slicePathString,\n      linePathString: \"\",\n      titlePosX: slicePath.titlePosX,\n      titlePosY: slicePath.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Line.js\n\n\n  this.LineSlice = function (helper, percent, custom) {\n    helper.setBaseValue(percent, custom);\n    r = helper.sliceRadius;\n\n    if (helper.sliceAngle > 60 && helper.sliceAngle < 180) {\n      helper.titleRadius = r * (180 / helper.sliceAngle / 5);\n      helper.setTitlePos();\n    } else {\n      helper.titleRadius = r * 0.55;\n      helper.setTitlePos();\n    }\n\n    if (helper.sliceAngle < 180) {\n      slicePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, r), helper.LineTo(helper.endAngle, r), helper.Close()];\n    } else {\n      if (helper.startAngle === 180 || helper.startAngle === 0 || helper.startAngle === -180 || helper.startAngle === 360) {\n        slicePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, r), helper.LineTo(helper.startAngle, r, helper.middleAngle, r), helper.LineTo(helper.endAngle, r, helper.middleAngle, r), helper.LineTo(helper.endAngle, r), helper.Close()];\n      } else {\n        slicePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, r), helper.LineTo(helper.middleAngle, r, helper.startAngle, r), helper.LineTo(helper.middleAngle, r, helper.endAngle, r), helper.LineTo(helper.endAngle, r), helper.Close()];\n      }\n    }\n\n    return {\n      slicePathString: slicePathString,\n      linePathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Eye.js\n\n\n  this.EyeSliceCustomization = function () {\n    var custom = new slicePathCustomization();\n    custom.titleRadiusPercent = 0.68;\n    return custom;\n  };\n\n  this.EyeSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = EyeSliceCustomization();\n    }\n\n    helper.setBaseValue(percent, custom);\n    r = helper.wheelRadius * percent * 0.7;\n\n    if (percent === 0) {\n      r = 0.01;\n    }\n\n    startAngle = helper.startAngle;\n    endAngle = helper.endAngle;\n\n    if (helper.sliceAngle === 180) {\n      startAngle = helper.startAngle + helper.sliceAngle / 4;\n      endAngle = helper.startAngle + helper.sliceAngle - helper.sliceAngle / 4;\n    }\n\n    slicePathString = [helper.MoveTo(endAngle, r), helper.ArcTo(r, startAngle, r), helper.ArcTo(r, endAngle, r), helper.Close()];\n    return {\n      slicePathString: slicePathString,\n      linePathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Wheel.js\n\n\n  this.WheelSlice = function (helper, percent, custom) {\n    helper.setBaseValue(percent, custom);\n    x = helper.centerX;\n    y = helper.centerY;\n    r = helper.sliceRadius;\n    startTheta = helper.startTheta;\n    middleTheta = helper.middleTheta;\n    endTheta = helper.endTheta;\n    var innerRadiusPercent;\n    var startendRadiusPercent;\n\n    if (helper.sliceAngle < 120) {\n      helper.titleRadius = r * 0.57;\n      innerRadiusPercent = 0.9;\n      middleRadiusPercent = 0.87;\n      startendRadiusPercent = 0.87;\n    } else if (helper.sliceAngle < 180) {\n      helper.titleRadius = r * 0.52;\n      innerRadiusPercent = 0.91;\n      middleRadiusPercent = 0.87;\n      startendRadiusPercent = 0.87;\n    } else {\n      helper.titleRadius = r * 0.45;\n      innerRadiusPercent = 0.873;\n      middleRadiusPercent = 0.87;\n      startendRadiusPercent = 0.94;\n    }\n\n    slicePathString = [helper.MoveTo(helper.middleAngle, r * 0.07), [\"L\", r * 0.07 * Math.cos(middleTheta) + r * startendRadiusPercent * Math.cos(startTheta) + x, r * 0.07 * Math.sin(middleTheta) + r * startendRadiusPercent * Math.sin(startTheta) + y], [\"A\", r * innerRadiusPercent, r * innerRadiusPercent, 0, 0, 1, r * 0.07 * Math.cos(middleTheta) + r * middleRadiusPercent * Math.cos(middleTheta) + x, r * 0.07 * Math.sin(middleTheta) + r * middleRadiusPercent * Math.sin(middleTheta) + y], [\"A\", r * innerRadiusPercent, r * innerRadiusPercent, 0, 0, 1, r * 0.07 * Math.cos(middleTheta) + r * startendRadiusPercent * Math.cos(endTheta) + x, r * 0.07 * Math.sin(middleTheta) + r * startendRadiusPercent * Math.sin(endTheta) + y], helper.Close()];\n    linePathString = [helper.MoveTo(helper.startAngle, r), helper.ArcTo(r, helper.middleAngle, r), helper.ArcTo(r, helper.endAngle, r), helper.ArcBackTo(r, helper.middleAngle, r), helper.ArcBackTo(r, helper.startAngle, r)];\n    helper.setTitlePos();\n    return {\n      slicePathString: slicePathString,\n      linePathString: linePathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.OuterStroke.js\n\n\n  this.OuterStrokeSlice = function (helper, percent, custom) {\n    helper.setBaseValue(percent, custom);\n    x = helper.centerX;\n    y = helper.centerY;\n    r = helper.sliceRadius;\n    innerRadius = r / 4;\n\n    if (helper.sliceAngle < 120) {\n      helper.titleRadius = r * 0.57;\n    } else if (helper.sliceAngle < 180) {\n      helper.titleRadius = r * 0.52;\n    } else {\n      helper.titleRadius = r * 0.45;\n    }\n\n    linePathString = [helper.MoveTo(helper.startAngle, innerRadius), helper.LineTo(helper.startAngle, r), helper.MoveTo(helper.endAngle, innerRadius), helper.LineTo(helper.endAngle, r)];\n    slicePathString = [helper.MoveTo(helper.startAngle, r), helper.ArcTo(r, helper.middleAngle, r), helper.ArcTo(r, helper.endAngle, r), helper.ArcBackTo(r, helper.middleAngle, r), helper.ArcBackTo(r, helper.startAngle, r), helper.MoveTo(helper.startAngle, innerRadius), helper.ArcTo(innerRadius, helper.middleAngle, innerRadius), helper.ArcTo(innerRadius, helper.endAngle, innerRadius), helper.ArcBackTo(innerRadius, helper.middleAngle, innerRadius), helper.ArcBackTo(innerRadius, helper.startAngle, innerRadius)];\n    helper.setTitlePos();\n    return {\n      slicePathString: slicePathString,\n      linePathString: linePathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Tab.js\n\n\n  this.TabSlice = function (helper, percent, custom) {\n    var rOriginal = helper.wheelRadius * 0.9;\n    var navItemCount = 360 / helper.sliceAngle;\n    var itemSize = 2 * rOriginal / navItemCount;\n    x = helper.centerX;\n    y = helper.centerY;\n    itemIndex = helper.itemIndex;\n    titlePosX = x;\n    titlePosY = itemIndex * itemSize + y + itemSize / 2 - rOriginal;\n    slicePathString = [[\"M\", x - itemSize / 2, itemIndex * itemSize + y - rOriginal], [\"L\", itemSize / 2 + x, itemIndex * itemSize + y - rOriginal], [\"L\", itemSize / 2 + x, (itemIndex + 1) * itemSize + y - rOriginal], [\"L\", x - itemSize / 2, (itemIndex + 1) * itemSize + y - rOriginal], [\"z\"]];\n    return {\n      slicePathString: slicePathString,\n      linePathString: \"\",\n      titlePosX: titlePosX,\n      titlePosY: titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.YinYang.js\n\n\n  this.YinYangSlice = function (helper, percent, custom) {\n    helper.setBaseValue(percent, custom);\n    r = helper.sliceRadius;\n    slicePathString = [helper.MoveToCenter(), helper.ArcTo(r / 2, helper.startAngle, r), helper.ArcTo(r, helper.middleAngle, r), helper.ArcTo(r, helper.endAngle, r), helper.ArcBackTo(r / 2, 0, 0), helper.Close()];\n    titlePosX = helper.getX(helper.startAngle, r / 2);\n    titlePosY = helper.getY(helper.startAngle, r / 2);\n    return {\n      slicePathString: slicePathString,\n      linePathString: slicePathString,\n      titlePosX: titlePosX,\n      titlePosY: titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Web.js\n\n\n  this.WebSlice = function (helper, percent, custom) {\n    helper.setBaseValue(percent, custom);\n    r = helper.sliceRadius;\n    helper.titleRadius = r * 0.55;\n    helper.setTitlePos();\n    linePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, r * 1.1), helper.MoveToCenter(), helper.LineTo(helper.endAngle, r * 1.1), helper.MoveTo(helper.startAngle, r * 0.15), helper.LineTo(helper.endAngle, r * 0.15), helper.MoveTo(helper.startAngle, r * 0.35), helper.LineTo(helper.endAngle, r * 0.35), helper.MoveTo(helper.startAngle, r * 0.55), helper.LineTo(helper.endAngle, r * 0.55), helper.MoveTo(helper.startAngle, r * 0.75), helper.LineTo(helper.endAngle, r * 0.75), helper.MoveTo(helper.startAngle, r * 0.95), helper.LineTo(helper.endAngle, r * 0.95), helper.Close()];\n    return {\n      slicePathString: \"\",\n      linePathString: linePathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Winter.js\n\n\n  this.WinterSliceCustomization = function () {\n    var custom = new slicePathCustomization();\n    custom.titleRadiusPercent = 0.85;\n    custom.arcRadiusPercent = 1;\n    return custom;\n  };\n\n  this.WinterSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = WinterSliceCustomization();\n    }\n\n    helper.setBaseValue(percent, custom);\n    sliceAngle = helper.sliceAngle;\n    parallelAngle = helper.startAngle + sliceAngle / 4;\n    parallelAngle2 = helper.startAngle + sliceAngle / 4 * 3;\n    borderAngle1 = helper.startAngle + sliceAngle / 200;\n    borderAngle2 = helper.startAngle + sliceAngle / 2 - sliceAngle / 200;\n    borderAngle3 = helper.startAngle + sliceAngle / 2 + sliceAngle / 200;\n    borderAngle4 = helper.startAngle + sliceAngle - sliceAngle / 200;\n    var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;\n    slicePathString = [helper.MoveToCenter(), helper.MoveTo(parallelAngle, arcRadius / 100), helper.LineTo(borderAngle1, arcRadius / 2), helper.LineTo(parallelAngle, arcRadius - arcRadius / 100), helper.LineTo(borderAngle2, arcRadius / 2), helper.LineTo(parallelAngle, arcRadius / 100), helper.MoveTo(parallelAngle2, arcRadius / 100), helper.LineTo(borderAngle4, arcRadius / 2), helper.LineTo(parallelAngle2, arcRadius - arcRadius / 100), helper.LineTo(borderAngle3, arcRadius / 2), helper.LineTo(parallelAngle2, arcRadius / 100), helper.Close()];\n    linePathString = [helper.MoveTo(parallelAngle, arcRadius), helper.LineTo(borderAngle2, arcRadius / 2), helper.MoveTo(borderAngle3, arcRadius / 2), helper.LineTo(parallelAngle2, arcRadius)];\n    return {\n      slicePathString: slicePathString,\n      linePathString: linePathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePath.Tutorial.js\n\n\n  this.TutorialSliceCustomization = function () {\n    var custom = new slicePathCustomization();\n    custom.titleRadiusPercent = 0.6;\n    custom.isMoveTo = false;\n    custom.isLineTo = false;\n    custom.isArcTo = false;\n    custom.isArcBackTo = false;\n    return custom;\n  };\n\n  this.TutorialSlice = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = TutorialSliceCustomization();\n    }\n\n    helper.setBaseValue(percent, custom);\n    slicePathString = [];\n    slicePathString.push(helper.MoveToCenter());\n\n    if (custom.isMoveTo === true) {\n      slicePathString.push(helper.MoveTo(helper.middleAngle, helper.sliceRadius / 4));\n    }\n\n    if (custom.isLineTo) {\n      slicePathString.push(helper.LineTo(helper.startAngle, helper.sliceRadius));\n    }\n\n    if (custom.isArcTo) {\n      slicePathString.push(helper.ArcTo(helper.sliceRadius, helper.middleAngle, helper.sliceRadius));\n    }\n\n    if (custom.isArcBackTo) {\n      slicePathString.push(helper.ArcBackTo(helper.sliceRadius, helper.endAngle, helper.sliceRadius));\n    }\n\n    slicePathString.push(helper.Close());\n    linePathString = [helper.MoveToCenter(), helper.LineTo(helper.startAngle, helper.sliceRadius), helper.ArcTo(helper.sliceRadius, helper.middleAngle, helper.sliceRadius), helper.ArcTo(helper.sliceRadius, helper.endAngle, helper.sliceRadius), helper.Close()];\n    return {\n      slicePathString: slicePathString,\n      linePathString: linePathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/slicePath/wheelnav.slicePathEnd.js\n\n\n  return this;\n}; ///#source 1 1 /js/source/wheelnav.sliceTransform.js\n\n/* ======================================================================================== */\n\n/* Slice transform definitions                                                              */\n\n/* ======================================================================================== */\n\n/* ======================================================================================== */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/sliceTransform.html */\n\n/* ======================================================================================== */\n\n\nvar sliceTransform = function sliceTransform() {\n  this.startAngle = 0;\n  this.startTheta = 0;\n  this.middleTheta = 0;\n  this.endTheta = 0;\n\n  var setBaseValue = function setBaseValue(x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    this.startAngle = baseAngle;\n    this.startTheta = getTheta(startAngle);\n    this.middleTheta = getTheta(startAngle + sliceAngle / 2);\n    this.endTheta = getTheta(startAngle + sliceAngle);\n  };\n\n  var getTheta = function getTheta(angle) {\n    return angle % 360 * Math.PI / 180;\n  };\n\n  this.NullTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    return {\n      sliceTransformString: \"\",\n      lineTransformString: \"\",\n      titleTransformString: \"\"\n    };\n  };\n\n  this.MoveMiddleTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    setBaseValue(x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex);\n    var sliceTransformString = \"t\" + (rOriginal / 10 * Math.cos(middleTheta)).toString() + \",\" + (rOriginal / 10 * Math.sin(middleTheta)).toString();\n    var baseTheta;\n\n    if (titleRotateAngle !== null) {\n      baseTheta = getTheta(-titleRotateAngle);\n    } else {\n      var wheelBaseAngle = baseAngle - itemIndex * sliceAngle;\n      baseTheta = getTheta(wheelBaseAngle + sliceAngle / 2);\n    }\n\n    var titleTransformString = \"s1,r0,t\" + (rOriginal / 10 * Math.cos(baseTheta)).toString() + \",\" + (rOriginal / 10 * Math.sin(baseTheta)).toString();\n    return {\n      sliceTransformString: sliceTransformString,\n      lineTransformString: sliceTransformString,\n      titleTransformString: titleTransformString\n    };\n  };\n\n  this.RotateTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    var sliceTransformString = \"s1,r360\";\n    return {\n      sliceTransformString: sliceTransformString,\n      lineTransformString: sliceTransformString,\n      titleTransformString: sliceTransformString\n    };\n  };\n\n  this.RotateHalfTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    var sliceTransformString = \"s1,r90\";\n    return {\n      sliceTransformString: sliceTransformString,\n      lineTransformString: sliceTransformString,\n      titleTransformString: sliceTransformString\n    };\n  };\n\n  this.RotateTitleTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    var titleTransformString = \"s1,r360\";\n    return {\n      sliceTransformString: \"\",\n      lineTransformString: \"\",\n      titleTransformString: titleTransformString\n    };\n  };\n\n  this.ScaleTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    var sliceTransformString = \"s1.2\";\n    return {\n      sliceTransformString: sliceTransformString,\n      lineTransformString: \"\",\n      titleTransformString: sliceTransformString\n    };\n  };\n\n  this.ScaleTitleTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    return {\n      sliceTransformString: \"\",\n      lineTransformString: \"\",\n      titleTransformString: \"s1.3\"\n    };\n  };\n\n  this.RotateScaleTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    var sliceTransformString = \"r360,s1.3\";\n    return {\n      sliceTransformString: sliceTransformString,\n      lineTransformString: \"\",\n      titleTransformString: sliceTransformString\n    };\n  };\n\n  this.CustomTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    var sliceTransformString = custom.scaleString + \",\" + custom.rotateString;\n    return {\n      sliceTransformString: sliceTransformString,\n      lineTransformString: sliceTransformString,\n      titleTransformString: sliceTransformString\n    };\n  };\n\n  this.CustomTitleTransform = function (x, y, rOriginal, baseAngle, sliceAngle, titleRotateAngle, itemIndex, custom) {\n    var titleTransformString = custom.scaleString + \",\" + custom.rotateString;\n    return {\n      sliceTransformString: \"\",\n      lineTransformString: \"\",\n      titleTransformString: titleTransformString\n    };\n  };\n\n  return this;\n};\n/* Custom properties\r\n    - scaleString\r\n    - rotateString\r\n*/\n\n\nvar sliceTransformCustomization = function sliceTransformCustomization() {\n  this.scaleString = \"s1\";\n  this.rotateString = \"r0\";\n  return this;\n}; ///#source 1 1 /js/source/spreader/wheelnav.spreader.js\n///#source 1 1 /js/source/spreader/wheelnav.spreader.core.js\n\n/* ======================================================================================= */\n\n/* Spreader of wheel                                                                       */\n\n/* ======================================================================================= */\n\n/* ======================================================================================= */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/spreader.html      */\n\n/* ======================================================================================= */\n\n\nspreader = function spreader(wheelnav) {\n  this.wheelnav = wheelnav;\n\n  if (this.wheelnav.spreaderEnable) {\n    this.spreaderHelper = new pathHelper();\n    this.spreaderHelper.centerX = this.wheelnav.centerX;\n    this.spreaderHelper.centerY = this.wheelnav.centerY;\n    this.spreaderHelper.navItemCount = this.wheelnav.navItemCount;\n    this.spreaderHelper.navAngle = this.wheelnav.navAngle;\n    this.spreaderHelper.wheelRadius = this.wheelnav.spreaderRadius;\n    this.spreaderHelper.startAngle = this.wheelnav.spreaderStartAngle;\n    this.spreaderHelper.sliceAngle = this.wheelnav.spreaderSliceAngle;\n    var thisWheelNav = this.wheelnav;\n    this.animateeffect = \"bounce\";\n    this.animatetime = 1500; //Set animation from wheelnav\n\n    if (this.wheelnav.animateeffect !== null) {\n      this.animateeffect = this.wheelnav.animateeffect;\n    }\n\n    if (this.wheelnav.animatetime !== null) {\n      this.animatetime = this.wheelnav.animatetime;\n    }\n\n    if (this.wheelnav.spreaderTitleFont !== null) {\n      this.fontAttr = {\n        font: this.wheelnav.spreaderTitleFont\n      };\n    } else {\n      this.fontAttr = {\n        font: '100 32px Impact, Charcoal, sans-serif'\n      };\n    }\n\n    this.spreaderPathIn = this.wheelnav.spreaderPathFunction(this.spreaderHelper, this.wheelnav.spreaderInPercent, this.wheelnav.spreaderPathCustom);\n    this.spreaderPathOut = this.wheelnav.spreaderPathFunction(this.spreaderHelper, this.wheelnav.spreaderOutPercent, this.wheelnav.spreaderPathCustom);\n    var currentPath = this.spreaderPathOut;\n\n    if (thisWheelNav.initPercent < thisWheelNav.maxPercent) {\n      currentPath = this.spreaderPathIn;\n    }\n\n    this.spreaderPath = this.wheelnav.raphael.path(currentPath.spreaderPathString);\n    this.spreaderPath.attr(thisWheelNav.spreaderPathAttr);\n    this.spreaderPath.id = thisWheelNav.getSpreaderId();\n    this.spreaderPath.node.id = this.spreaderPath.id;\n    this.spreaderPath.click(function () {\n      thisWheelNav.spreadWheel();\n    }); //Set titles\n\n    this.inTitleWidth = this.wheelnav.spreaderInTitleWidth;\n    this.inTitleHeight = this.wheelnav.spreaderInTitleHeight;\n    this.outTitleWidth = this.wheelnav.spreaderOutTitleWidth;\n    this.outTitleHeight = this.wheelnav.spreaderOutTitleHeight;\n\n    if (this.inTitleWidth !== null && this.inTitleHeight === null) {\n      this.inTitleHeight = this.inTitleWidth;\n    }\n\n    if (this.inTitleWidth === null && this.inTitleHeight !== null) {\n      this.inTitleWidth = this.inTitleHeight;\n    }\n\n    if (this.outTitleWidth !== null && this.outTitleHeight === null) {\n      this.outTitleHeight = this.outTitleWidth;\n    }\n\n    if (this.outTitleWidth === null && this.outTitleHeight !== null) {\n      this.outTitleWidth = this.outTitleHeight;\n    }\n\n    if (wheelnavTitle().isImageTitle(this.wheelnav.spreaderOutTitle)) {\n      // Image default value\n      if (this.inTitleWidth === null) {\n        this.inTitleWidth = 32;\n      }\n\n      if (this.inTitleHeight === null) {\n        this.inTitleHeight = 32;\n      }\n\n      if (this.outTitleWidth === null) {\n        this.outTitleWidth = 32;\n      }\n\n      if (this.outTitleHeight === null) {\n        this.outTitleHeight = 32;\n      }\n    }\n\n    if (wheelnavTitle().isPathTitle(this.wheelnav.spreaderInTitle)) {\n      inTitle = new wheelnavTitle(this.wheelnav.spreaderInTitle, this.wheelnav.raphael.raphael);\n    } else {\n      inTitle = new wheelnavTitle(this.wheelnav.spreaderInTitle);\n    }\n\n    this.inTitleSizeTransform = inTitle.getTitleSizeTransform(this.inTitleWidth, this.inTitleHeight);\n    this.inTitle = inTitle.getTitlePercentAttr(this.spreaderPathIn.titlePosX, this.spreaderPathIn.titlePosY, this.inTitleWidth, this.inTitleHeight);\n\n    if (wheelnavTitle().isPathTitle(this.wheelnav.spreaderOutTitle)) {\n      outTitle = new wheelnavTitle(this.wheelnav.spreaderOutTitle, this.wheelnav.raphael.raphael);\n    } else {\n      outTitle = new wheelnavTitle(this.wheelnav.spreaderOutTitle);\n    }\n\n    this.outTitleSizeTransform = outTitle.getTitleSizeTransform(this.outTitleWidth, this.outTitleHeight);\n    this.outTitle = outTitle.getTitlePercentAttr(this.spreaderPathOut.titlePosX, this.spreaderPathOut.titlePosY, this.outTitleWidth, this.outTitleHeight);\n    var currentTitle = this.outTitle;\n    var currentTitleAttr = this.wheelnav.spreaderTitleOutAttr;\n    var currentTitleWidth = this.outTitleWidth;\n    var currentTitleHeight = this.outTitleHeight;\n    var currentTitleSizeTransform = this.outTitleSizeTransform;\n\n    if (thisWheelNav.initPercent < thisWheelNav.maxPercent) {\n      currentTitle = this.inTitle;\n      currentTitleAttr = this.wheelnav.spreaderTitleInAttr;\n      currentTitleWidth = this.inTitleWidth;\n      currentTitleHeight = this.inTitleHeight;\n      currentTitleSizeTransform = this.inTitleSizeTransform;\n    }\n\n    if (wheelnavTitle().isPathTitle(this.wheelnav.spreaderOutTitle)) {\n      this.spreaderTitle = thisWheelNav.raphael.path(currentTitle.path);\n    } else if (wheelnavTitle().isImageTitle(this.wheelnav.spreaderOutTitle)) {\n      this.spreaderTitle = this.wheelnav.raphael.image(currentTitle.src, currentPath.titlePosX - currentTitleWidth / 2, currentPath.titlePosY - currentTitleHeight / 2, currentTitleWidth, currentTitleHeight);\n    } else {\n      this.spreaderTitle = thisWheelNav.raphael.text(currentPath.titlePosX, currentPath.titlePosY, currentTitle.title);\n    }\n\n    this.spreaderTitle.attr(this.fontAttr);\n    this.spreaderTitle.attr(currentTitleAttr);\n    this.spreaderTitle.attr({\n      transform: currentTitleSizeTransform\n    });\n    this.spreaderTitle.id = thisWheelNav.getSpreaderTitleId();\n    this.spreaderTitle.node.id = this.spreaderTitle.id;\n    this.spreaderTitle.click(function () {\n      thisWheelNav.spreadWheel();\n    });\n    this.setCurrentTransform();\n  }\n\n  return this;\n};\n\nspreader.prototype.setCurrentTransform = function (withoutAnimate) {\n  if (this.wheelnav.spreaderEnable) {\n    if (withoutAnimate === undefined || withoutAnimate === false) {\n      if (this.wheelnav.currentPercent > this.wheelnav.minPercent) {\n        currentPath = this.spreaderPathOut.spreaderPathString;\n      } else {\n        currentPath = this.spreaderPathIn.spreaderPathString;\n      }\n\n      spreaderTransformAttr = {\n        path: currentPath\n      }; //Animate spreader\n\n      this.spreaderPath.animate(spreaderTransformAttr, this.animatetime, this.animateeffect); //titles\n\n      var currentTitle;\n      var titleTransformAttr;\n      var titleSizeTransform;\n\n      if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {\n        currentTitle = this.outTitle;\n        titleTransformAttr = this.wheelnav.spreaderTitleOutAttr;\n        this.spreaderPath.attr(this.wheelnav.spreaderPathOutAttr);\n        titleSizeTransform = this.outTitleSizeTransform;\n      } else {\n        currentTitle = this.inTitle;\n        titleTransformAttr = this.wheelnav.spreaderTitleInAttr;\n        this.spreaderPath.attr(this.wheelnav.spreaderPathInAttr);\n        titleSizeTransform = this.inTitleSizeTransform;\n      }\n\n      if (wheelnavTitle().isPathTitle(currentTitle.title)) {\n        titleTransformAttr.path = currentTitle.path;\n        titleTransformAttr.transform = titleSizeTransform;\n      } else if (wheelnavTitle().isImageTitle(currentTitle.title)) {\n        titleTransformAttr.x = currentTitle.x;\n        titleTransformAttr.y = currentTitle.y;\n        titleTransformAttr.width = currentTitle.width;\n        titleTransformAttr.height = currentTitle.height;\n        this.spreaderTitle.attr({\n          src: currentTitle.src\n        });\n      } else {\n        //Little hack for proper appearance of \"-\" sign\n        offYOffset = 0;\n\n        if (currentTitle.title === \"-\") {\n          offYOffset = 3;\n        }\n\n        ;\n        titleTransformAttr.x = currentTitle.x;\n        titleTransformAttr.y = currentTitle.y - offYOffset;\n\n        if (currentTitle.title !== null) {\n          this.spreaderTitle.attr({\n            text: currentTitle.title\n          });\n        }\n      } //Animate title\n\n\n      this.spreaderTitle.animate(titleTransformAttr, this.animatetime, this.animateeffect);\n    }\n\n    this.spreaderPath.toFront();\n    this.spreaderTitle.toFront();\n  }\n}; ///#source 1 1 /js/source/spreader/wheelnav.spreaderPathStart.js\n\n/* ======================================================================================= */\n\n/* Spreader path definitions.                                                              */\n\n/* ======================================================================================= */\n\n\nspreaderPath = function spreaderPath() {\n  this.NullSpreader = function (helper, custom) {\n    if (custom === null) {\n      custom = new spreaderPathCustomization();\n    }\n\n    helper.setBaseValue(custom.spreaderPercent, custom);\n    return {\n      spreaderPathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/spreader/wheelnav.spreaderPath.Pie.js\n\n\n  this.PieSpreaderCustomization = function () {\n    var custom = new spreaderPathCustomization();\n    custom.spreaderRadius = 25;\n    custom.arcBaseRadiusPercent = 1;\n    custom.arcRadiusPercent = 1;\n    custom.startRadiusPercent = 0;\n    return custom;\n  };\n\n  this.PieSpreader = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = PieSpreaderCustomization();\n    }\n\n    helper.setBaseValue(custom.spreaderPercent * percent, custom);\n    var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;\n    var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;\n    spreaderPathString = [];\n    helper.StartSpreader(spreaderPathString, helper.startAngle, arcBaseRadius);\n    spreaderPathString.push(helper.ArcTo(arcRadius, helper.middleAngle, arcBaseRadius));\n    spreaderPathString.push(helper.ArcTo(arcRadius, helper.endAngle, arcBaseRadius));\n    spreaderPathString.push(helper.Close());\n    return {\n      spreaderPathString: spreaderPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/spreader/wheelnav.spreaderPath.Star.js\n\n\n  this.StarSpreaderCustomization = function () {\n    var custom = new spreaderPathCustomization();\n    custom.minRadiusPercent = 0.5;\n    return custom;\n  };\n\n  this.StarSpreader = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = StarSpreaderCustomization();\n    }\n\n    helper.setBaseValue(custom.spreaderPercent * percent, custom);\n    rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;\n    r = helper.sliceRadius;\n    spreaderPathString = [];\n    sliceAngle = helper.sliceAngle / helper.navItemCount;\n    baseAngle = helper.navAngle;\n\n    if (helper.endAngle - helper.startAngle < 360) {\n      baseAngle = helper.startAngle;\n    }\n\n    helper.StartSpreader(spreaderPathString, baseAngle, r);\n\n    for (var i = 0; i < helper.navItemCount; i++) {\n      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);\n      middleAngle = startAngle + sliceAngle / 2;\n      endAngle = startAngle + sliceAngle;\n\n      if (helper.endAngle - helper.startAngle < 360) {\n        if (i === helper.navItemCount - 1) {\n          endAngle = middleAngle;\n        }\n      }\n\n      spreaderPathString.push(helper.LineTo(startAngle, rbase));\n      spreaderPathString.push(helper.LineTo(middleAngle, r));\n      spreaderPathString.push(helper.LineTo(endAngle, rbase));\n    }\n\n    spreaderPathString.push(helper.Close());\n    return {\n      spreaderPathString: spreaderPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/spreader/wheelnav.spreaderPath.AntiStar.js\n\n\n  this.AntiStarSpreaderCustomization = function () {\n    var custom = new spreaderPathCustomization();\n    custom.minRadiusPercent = 0.21;\n    return custom;\n  };\n\n  this.AntiStarSpreader = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = AntiStarSpreaderCustomization();\n    }\n\n    helper.setBaseValue(custom.spreaderPercent * percent, custom);\n    rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;\n    r = helper.sliceRadius;\n    spreaderPathString = [];\n    sliceAngle = helper.sliceAngle / helper.navItemCount;\n    baseAngle = helper.navAngle;\n\n    if (helper.endAngle - helper.startAngle < 360) {\n      baseAngle = helper.startAngle;\n      helper.StartSpreader(spreaderPathString, baseAngle, rbase);\n    } else {\n      spreaderPathString.push(helper.MoveTo(helper.startAngle + (helper.navAngle + sliceAngle / 2), rbase));\n    }\n\n    for (var i = 0; i < helper.navItemCount; i++) {\n      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);\n      middleAngle = startAngle + sliceAngle / 2;\n      endAngle = startAngle + sliceAngle;\n\n      if (helper.endAngle - helper.startAngle < 360) {\n        if (i === helper.navItemCount - 1) {\n          endAngle = middleAngle;\n        }\n      }\n\n      spreaderPathString.push(helper.LineTo(startAngle, r));\n      spreaderPathString.push(helper.LineTo(middleAngle, rbase));\n      spreaderPathString.push(helper.LineTo(endAngle, r));\n    }\n\n    spreaderPathString.push(helper.Close());\n    return {\n      spreaderPathString: spreaderPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/spreader/wheelnav.spreaderPath.Flower.js\n\n\n  this.FlowerSpreaderCustomization = function () {\n    var custom = new spreaderPathCustomization();\n    custom.minRadiusPercent = 0.63;\n    custom.menuRadius = 7;\n    ;\n    return custom;\n  };\n\n  this.FlowerSpreader = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = FlowerSpreaderCustomization();\n    }\n\n    helper.setBaseValue(custom.spreaderPercent * percent, custom);\n    rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;\n    r = helper.sliceRadius;\n    spreaderPathString = [];\n    sliceAngle = helper.sliceAngle / helper.navItemCount;\n    baseAngle = helper.navAngle;\n\n    if (helper.endAngle - helper.startAngle < 360) {\n      baseAngle = helper.startAngle;\n      helper.StartSpreader(spreaderPathString, baseAngle, rbase);\n    } else {\n      spreaderPathString.push(helper.MoveTo(helper.startAngle + (helper.navAngle + sliceAngle / 2), rbase));\n    }\n\n    for (var i = 0; i < helper.navItemCount; i++) {\n      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);\n      middleAngle = startAngle + sliceAngle / 2;\n      endAngle = startAngle + sliceAngle;\n\n      if (helper.endAngle - helper.startAngle < 360) {\n        if (i === 0) {\n          spreaderPathString.push(helper.ArcTo(custom.menuRadius, startAngle, rbase));\n        }\n\n        if (i === helper.navItemCount - 1) {\n          endAngle = middleAngle;\n        }\n      } else {\n        spreaderPathString.push(helper.LineTo(startAngle, rbase));\n      }\n\n      spreaderPathString.push(helper.ArcTo(custom.menuRadius, endAngle, rbase));\n    }\n\n    spreaderPathString.push(helper.Close());\n    return {\n      spreaderPathString: spreaderPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/spreader/wheelnav.spreaderPath.Holder.js\n\n\n  this.HolderSpreaderCustomization = function () {\n    var custom = new spreaderPathCustomization();\n    custom.minRadiusPercent = 0.5;\n    custom.menuRadius = 37;\n    return custom;\n  };\n\n  this.HolderSpreader = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = HolderSpreaderCustomization();\n    }\n\n    helper.setBaseValue(custom.spreaderPercent * percent, custom);\n    rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;\n    r = helper.sliceRadius;\n    spreaderPathString = [];\n    sliceAngle = helper.sliceAngle / helper.navItemCount;\n    baseAngle = helper.navAngle;\n\n    if (helper.endAngle - helper.startAngle < 360) {\n      baseAngle = helper.startAngle;\n      helper.StartSpreader(spreaderPathString, baseAngle, rbase);\n    } else {\n      spreaderPathString.push(helper.MoveTo(helper.startAngle + (helper.navAngle + sliceAngle / 2), rbase));\n    }\n\n    for (var i = 0; i < helper.navItemCount; i++) {\n      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);\n      middleAngle = startAngle + sliceAngle / 4;\n      endAngle = startAngle + sliceAngle;\n\n      if (helper.endAngle - helper.startAngle < 360) {\n        if (i === helper.navItemCount - 1) {\n          endAngle = middleAngle;\n        }\n      } else {\n        spreaderPathString.push(helper.LineTo(startAngle, rbase));\n      }\n\n      spreaderPathString.push(helper.LineTo(startAngle, r));\n      spreaderPathString.push(helper.ArcBackTo(custom.menuRadius, middleAngle, rbase));\n      spreaderPathString.push(helper.ArcTo(custom.menuRadius, endAngle, r));\n    }\n\n    spreaderPathString.push(helper.Close());\n    return {\n      spreaderPathString: spreaderPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/spreader/wheelnav.spreaderPath.Line.js\n\n\n  this.LineSpreaderCustomization = function () {\n    var custom = new spreaderPathCustomization();\n    custom.minRadiusPercent = 0.5;\n    return custom;\n  };\n\n  this.LineSpreader = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = LineSpreaderCustomization();\n    }\n\n    helper.setBaseValue(custom.spreaderPercent * percent, custom);\n    rbase = helper.wheelRadius * custom.spreaderPercent * custom.minRadiusPercent * percent;\n    r = helper.sliceRadius;\n    spreaderPathString = [];\n    sliceAngle = helper.sliceAngle / helper.navItemCount;\n    baseAngle = helper.navAngle;\n\n    if (helper.endAngle - helper.startAngle < 360) {\n      baseAngle = helper.startAngle;\n    }\n\n    spreaderPathString.push(helper.MoveTo(baseAngle + sliceAngle / 2, r));\n\n    for (var i = 0; i < helper.navItemCount; i++) {\n      startAngle = i * sliceAngle + (baseAngle + sliceAngle / 2);\n      endAngle = startAngle + sliceAngle;\n\n      if (helper.navItemCount === 2) {\n        endAngle -= 90;\n      }\n\n      spreaderPathString.push(helper.LineTo(startAngle, r));\n      spreaderPathString.push(helper.LineTo(endAngle, r));\n    }\n\n    spreaderPathString.push(helper.Close());\n    return {\n      spreaderPathString: spreaderPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/spreader/wheelnav.spreaderPathEnd.js\n\n\n  return this;\n}; ///#source 1 1 /js/source/marker/wheelnav.marker.js\n///#source 1 1 /js/source/marker/wheelnav.marker.core.js\n\n/* ======================================================================================= */\n\n/* Marker of wheel                                                                         */\n\n/* ======================================================================================= */\n\n/* ======================================================================================= */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/marker.html        */\n\n/* ======================================================================================= */\n\n\nmarker = function marker(wheelnav) {\n  this.wheelnav = wheelnav;\n\n  if (this.wheelnav.markerEnable) {\n    this.markerHelper = new pathHelper();\n    this.markerHelper.centerX = this.wheelnav.centerX;\n    this.markerHelper.centerY = this.wheelnav.centerY;\n    this.markerHelper.navItemCount = this.wheelnav.navItemCount;\n    this.markerHelper.navAngle = this.wheelnav.navAngle;\n    this.markerHelper.wheelRadius = this.wheelnav.wheelRadius * this.wheelnav.maxPercent;\n    this.markerHelper.sliceAngle = this.wheelnav.navItems[0].sliceAngle;\n    this.markerHelper.startAngle = this.markerHelper.navAngle - this.markerHelper.sliceAngle / 2;\n    this.animateeffect = \"bounce\";\n    this.animatetime = 1500; //Set animation from wheelnav\n\n    if (this.wheelnav.animateeffect !== null) {\n      this.animateeffect = this.wheelnav.animateeffect;\n    }\n\n    if (this.wheelnav.animatetime !== null) {\n      this.animatetime = this.wheelnav.animatetime;\n    }\n\n    this.markerPathMin = this.wheelnav.markerPathFunction(this.markerHelper, this.wheelnav.minPercent, this.wheelnav.markerPathCustom);\n    this.markerPathMax = this.wheelnav.markerPathFunction(this.markerHelper, this.wheelnav.maxPercent, this.wheelnav.markerPathCustom);\n    this.marker = this.wheelnav.raphael.path(this.markerPathMax.markerPathString);\n    this.marker.attr(this.wheelnav.markerAttr);\n    this.marker.id = this.wheelnav.getMarkerId();\n    this.marker.node.id = this.marker.id;\n  }\n\n  return this;\n};\n\nmarker.prototype.setCurrentTransform = function (navAngle) {\n  if (this.wheelnav.markerEnable) {\n    var currentPath = \"\";\n\n    if (this.wheelnav.currentPercent === this.wheelnav.maxPercent) {\n      currentPath = this.markerPathMax.markerPathString;\n    } else {\n      currentPath = this.markerPathMin.markerPathString;\n    }\n\n    if (navAngle !== undefined) {\n      var rotationAngle = navAngle - this.markerHelper.navAngle;\n      markerTransformAttr = {\n        transform: \"r,\" + rotationAngle.toString() + \",\" + this.wheelnav.centerX + \",\" + this.wheelnav.centerY,\n        path: currentPath\n      };\n    } else {\n      markerTransformAttr = {\n        path: currentPath\n      };\n    } //Animate marker\n\n\n    this.marker.animate(markerTransformAttr, this.animatetime, this.animateeffect);\n    this.marker.toFront();\n  }\n}; ///#source 1 1 /js/source/marker/wheelnav.markerPathStart.js\n\n/* ======================================================================================= */\n\n/* Marker path definitions.                                                                */\n\n/* ======================================================================================= */\n\n\nmarkerPath = function markerPath() {\n  this.NullMarker = function (helper, custom) {\n    if (custom === null) {\n      custom = new markerPathCustomization();\n    }\n\n    helper.setBaseValue(custom);\n    return {\n      markerPathString: \"\",\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/marker/wheelnav.markerPath.Triangle.js\n\n\n  this.TriangleMarkerCustomization = function () {\n    var custom = new markerPathCustomization();\n    custom.arcBaseRadiusPercent = 1.09;\n    custom.arcRadiusPercent = 1.2;\n    custom.startRadiusPercent = 0;\n    return custom;\n  };\n\n  this.TriangleMarker = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = TriangleMarkerCustomization();\n    }\n\n    helper.setBaseValue(custom.markerPercent * percent, custom);\n    var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;\n    var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;\n    var startAngle = helper.startAngle + helper.sliceAngle * 0.46;\n    var endAngle = helper.startAngle + helper.sliceAngle * 0.54;\n    markerPathString = [helper.MoveTo(helper.navAngle, arcBaseRadius), helper.LineTo(startAngle, arcRadius), helper.LineTo(endAngle, arcRadius), helper.Close()];\n    return {\n      markerPathString: markerPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/marker/wheelnav.markerPath.PieLine.js\n\n\n  this.PieLineMarkerCustomization = function () {\n    var custom = new markerPathCustomization();\n    custom.arcBaseRadiusPercent = 1;\n    custom.arcRadiusPercent = 1;\n    custom.startRadiusPercent = 0;\n    custom.sliceAngle = null;\n    return custom;\n  };\n\n  this.PieLineMarker = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = PieLineMarkerCustomization();\n    }\n\n    helper.setBaseValue(custom.markerPercent * percent, custom);\n    var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;\n    var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;\n\n    if (custom.sliceAngle !== null) {\n      helper.startAngle = helper.navAngle - custom.sliceAngle / 2;\n      helper.endAngle = helper.navAngle + custom.sliceAngle / 2;\n    }\n\n    markerPathString = [helper.MoveTo(helper.startAngle, arcBaseRadius), helper.ArcTo(arcRadius, helper.endAngle, arcBaseRadius), helper.ArcBackTo(arcRadius, helper.startAngle, arcBaseRadius), helper.Close()];\n    return {\n      markerPathString: markerPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/marker/wheelnav.markerPath.Menu.js\n\n\n  this.MenuMarkerCustomization = function () {\n    var custom = new markerPathCustomization();\n    custom.menuRadius = 40;\n    custom.titleRadiusPercent = 0.63;\n    custom.lineBaseRadiusPercent = 0;\n    return custom;\n  };\n\n  this.MenuMarker = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = MenuMarkerCustomization();\n    }\n\n    helper.setBaseValue(custom.markerPercent * percent, custom);\n    x = helper.centerX;\n    y = helper.centerY;\n    helper.titleRadius = helper.wheelRadius * custom.titleRadiusPercent * percent;\n    helper.setTitlePos();\n    var menuRadius = custom.menuRadius * percent;\n\n    if (percent <= 0.05) {\n      menuRadius = 11;\n    }\n\n    middleTheta = helper.middleTheta;\n    markerPathString = [[\"M\", helper.titlePosX - menuRadius * Math.cos(middleTheta), helper.titlePosY - menuRadius * Math.sin(middleTheta)], [\"A\", menuRadius, menuRadius, 0, 0, 1, helper.titlePosX + menuRadius * Math.cos(middleTheta), helper.titlePosY + menuRadius * Math.sin(middleTheta)], [\"A\", menuRadius, menuRadius, 0, 0, 1, helper.titlePosX - menuRadius * Math.cos(middleTheta), helper.titlePosY - menuRadius * Math.sin(middleTheta)], [\"z\"]];\n    return {\n      markerPathString: markerPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/marker/wheelnav.markerPath.Line.js\n\n\n  this.LineMarkerCustomization = function () {\n    var custom = new markerPathCustomization();\n    custom.arcBaseRadiusPercent = 1.05;\n    custom.arcRadiusPercent = 1.2;\n    custom.startRadiusPercent = 0;\n    return custom;\n  };\n\n  this.LineMarker = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = LineMarkerCustomization();\n    }\n\n    helper.setBaseValue(custom.markerPercent * percent, custom);\n    var arcBaseRadius = helper.sliceRadius * custom.arcBaseRadiusPercent;\n    var arcRadius = helper.sliceRadius * custom.arcRadiusPercent;\n    markerPathString = [helper.MoveTo(helper.navAngle, arcBaseRadius), helper.LineTo(helper.navAngle, arcRadius), helper.Close()];\n    return {\n      markerPathString: markerPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/marker/wheelnav.markerPath.Drop.js\n\n\n  this.DropMarkerCustomization = function () {\n    var custom = new markerPathCustomization();\n    custom.dropBaseRadiusPercent = 0;\n    custom.dropRadiusPercent = 0.15;\n    return custom;\n  };\n\n  this.DropMarker = function (helper, percent, custom) {\n    if (custom === null) {\n      custom = DropMarkerCustomization();\n    }\n\n    helper.setBaseValue(custom.markerPercent * percent, custom);\n    var arcBaseRadius = helper.sliceRadius * custom.dropBaseRadiusPercent;\n    var startAngle = helper.startAngle + helper.sliceAngle * 0.2;\n    var startAngle2 = helper.startAngle;\n    var endAngle = helper.startAngle + helper.sliceAngle * 0.8;\n    var endAngle2 = helper.startAngle + helper.sliceAngle;\n    var dropRadius = helper.sliceRadius * custom.dropRadiusPercent;\n    markerPathString = [helper.MoveTo(0, dropRadius), helper.ArcTo(dropRadius, 180, dropRadius), helper.ArcTo(dropRadius, 360, dropRadius), helper.MoveTo(helper.navAngle, arcBaseRadius), helper.LineTo(startAngle, dropRadius), helper.LineTo(startAngle2, dropRadius), helper.LineTo(helper.navAngle, dropRadius * 1.6), helper.LineTo(endAngle2, dropRadius), helper.LineTo(endAngle, dropRadius), helper.Close()];\n    return {\n      markerPathString: markerPathString,\n      titlePosX: helper.titlePosX,\n      titlePosY: helper.titlePosY\n    };\n  }; ///#source 1 1 /js/source/marker/wheelnav.markerPathEnd.js\n\n\n  return this;\n}; ///#source 1 1 /js/source/wheelnav.colorPalettes.js\n\n/* ======================================================================================== */\n\n/* Color palettes for slices from http://www.colourlovers.com                               */\n\n/* ======================================================================================== */\n\n/* ======================================================================================== */\n\n/* Documentation: http://wheelnavjs.softwaretailoring.net/documentation/colorPalettes.html  */\n\n/* ======================================================================================== */\n\n\nvar colorpalette = {\n  defaultpalette: new Array(\"#2D9E46\", \"#F5BE41\", \"#F77604\", \"#D63C22\", \"#006BA6\", \"#92ADAF\"),\n  purple: new Array(\"#4F346B\", \"#623491\", \"#9657D6\", \"#AD74E7\", \"#CBA3F3\"),\n  greenred: new Array(\"#17B92A\", \"#FF3D00\", \"#17B92A\", \"#FF3D00\"),\n  greensilver: new Array(\"#1F700A\", \"#79CC3C\", \"#D4E178\", \"#E6D5C3\", \"#AC875D\"),\n  oceanfive: new Array(\"#00A0B0\", \"#6A4A3C\", \"#CC333F\", \"#EB6841\", \"#EDC951\"),\n  garden: new Array(\"#648A4F\", \"#2B2B29\", \"#DF6126\", \"#FFA337\", \"#F57C85\"),\n  gamebookers: new Array(\"#FF9900\", \"#DCDCDC\", \"#BCBCBC\", \"#3299BB\", \"#727272\"),\n  parrot: new Array(\"#D80351\", \"#F5D908\", \"#00A3EE\", \"#929292\", \"#3F3F3F\"),\n  pisycholand: new Array(\"#FF1919\", \"#FF5E19\", \"#FF9F19\", \"#E4FF19\", \"#29FF19\"),\n  makeLOVEnotWAR: new Array(\"#2C0EF0\", \"#B300FF\", \"#6751F0\", \"#FF006F\", \"#8119FF\"),\n  theworldismine: new Array(\"#F21D1D\", \"#FF2167\", \"#B521FF\", \"#7E2AA8\", \"#000000\"),\n  fractalloveone: new Array(\"#002EFF\", \"#00FFF7\", \"#00FF62\", \"#FFAA00\", \"#FFF700\"),\n  fractallovetwo: new Array(\"#FF9500\", \"#FF0000\", \"#FF00F3\", \"#AA00FF\", \"#002EFF\"),\n  fractallove: new Array(\"#002EFF\", \"#00FFF7\", \"#00FF62\", \"#FFAA00\", \"#F5D908\", \"#FF0000\", \"#FF00F3\", \"#AA00FF\"),\n  sprinkles: new Array(\"#272523\", \"#FFACAC\", \"#FFD700\", \"#00590C\", \"#08006D\"),\n  goldenyellow: new Array(\"#D8B597\", \"#8C4006\", \"#B6690F\", \"#E3C57F\", \"#FFEDBE\"),\n  hotaru: new Array(\"#364C4A\", \"#497C7F\", \"#92C5C0\", \"#858168\", \"#CCBCA5\")\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports[\"default\"] = createSimmer;\n\nvar _queryEngine = require('./queryEngine');\n\nvar _queryEngine2 = _interopRequireDefault(_queryEngine);\n\nvar _methods = require('./methods');\n\nvar _methods2 = _interopRequireDefault(_methods);\n\nvar _validateSelector = require('./validateSelector');\n\nvar _validateSelector2 = _interopRequireDefault(_validateSelector);\n\nvar _convertSelectorStateIntoCSSSelector = require('./convertSelectorStateIntoCSSSelector');\n\nvar _convertSelectorStateIntoCSSSelector2 = _interopRequireDefault(_convertSelectorStateIntoCSSSelector);\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nvar _stackHierarchy = require('./stackHierarchy');\n\nvar _stackHierarchy2 = _interopRequireDefault(_stackHierarchy);\n\nvar _configuration = require('./configuration');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction createSimmer() {\n  var windowScope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n  var customConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var customQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var config = (0, _configuration.configure)(customConfig);\n  var query = customQuery || (0, _queryEngine2[\"default\"])(windowScope, config.queryEngine\n  /**\n     * Handle errors in accordance with what is specified in the configuration\n     * @param {object/string} ex. The exception object or message\n     * @param {object} element. The element Simmer was asked to process\n     */\n  );\n\n  function onError(ex, element) {\n    // handle error\n    if (config.errorHandling === true) {\n      throw ex;\n    }\n\n    if (typeof config.errorHandling === 'function') {\n      config.errorHandling(ex, element);\n    }\n  } // Initialize the Simmer object and set it over the reference on the window\n\n  /**\n   * The main Simmer action - parses an element on the page to produce a CSS selector for it.\n   * This function will be returned into the global Simmer object.\n   * @param {object} element. A DOM element you wish to create a selector for.\n   * @example\n   <code><pre>\n   var cssSelectorForDonJulio = Simmer(document.getElementByID('DonJulio'));\n   </pre></code>\n   */\n\n\n  var simmer = function simmer(element) {\n    if (!element) {\n      // handle error\n      onError.call(simmer, new Error('Simmer: No element was specified for parsing.'), element);\n      return false;\n    } // The parser cycles through a set of parsing methods specified in an order optimal\n    // for creating as specific as possible a selector\n\n\n    var parser = new _parser2[\"default\"](_methods2[\"default\"]); // get the element's ancestors\n\n    var hierarchy = (0, _stackHierarchy2[\"default\"])((0, _queryEngine.wrap)(element), config.depth // initialize the state of the selector\n    );\n    var selectorState = {\n      // the stack is used to build a layer of selectors, each layer coresponding to a specific element in the heirarchy\n      // for each level we create a private stack of properties, so that we can then merge them\n      // comfortably and allow all methods to see the level at which existing properties have been set\n      stack: Array(hierarchy.length).fill().map(function () {\n        return [];\n      }),\n      // follow the current specificity level of the selector - the higher the better\n      specificity: 0\n    };\n    var validator = (0, _validateSelector2[\"default\"])(element, config, query, onError // cycle through the available parsing methods and while we still have yet to find the requested element's one-to-one selector\n    // we keep calling the methods until we are either satisfied or run out of methods\n    );\n\n    while (!parser.finished() && !selectorState.verified) {\n      try {\n        selectorState = parser.next(hierarchy, selectorState, validator, config, query // if we have reached a satisfactory level of specificity, try the selector, perhaps we have found our selector?\n        );\n\n        if (selectorState.specificity >= config.specificityThreshold && !selectorState.verified) {\n          selectorState.verified = validator(selectorState);\n        }\n      } catch (ex) {\n        // handle error\n        onError.call(simmer, ex, element);\n      }\n    } // if we were not able to produce a one-to-one selector, return false\n\n\n    if (selectorState.verified === undefined || selectorState.specificity < config.specificityThreshold) {\n      // if it is undefined then verfication has never been run!\n      // try and verify, and if verification fails - return false\n      // if it is false and the specificity is too low to actually try and find the element in the first place, then we may simply have not run\n      // an up to date verification - try again\n      selectorState.verified = validator(selectorState);\n    }\n\n    if (!selectorState.verified) {\n      return false;\n    }\n\n    if (selectorState.verificationDepth) {\n      return (0, _convertSelectorStateIntoCSSSelector2[\"default\"])(selectorState, selectorState.verificationDepth);\n    }\n\n    return (0, _convertSelectorStateIntoCSSSelector2[\"default\"])(selectorState);\n  };\n  /**\n   * Get/Set the configuration for the Simmer object\n   * @param config (Object) A configuration object with any of the properties tweeked (none/depth/minimumSpecificity)\n   * @example\n   <code><pre>\n   configuration({\n            depth: 3\n         });\n   </pre></code>\n   */\n\n\n  simmer.configure = function () {\n    var configValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : windowScope;\n    var newConfig = (0, _configuration.configure)(_extends({}, config, configValues));\n    return createSimmer(scope, newConfig, (0, _queryEngine2[\"default\"])(scope, newConfig.queryEngine));\n  };\n\n  return simmer;\n}","map":null,"metadata":{},"sourceType":"module"}
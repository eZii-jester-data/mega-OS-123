{"ast":null,"code":"// import * as THREE from '../build/three.module.js';\nimport * as THREE from 'three';\nimport { OrbitControls } from './kmz/jsm/controls/OrbitControls.js';\nimport { KMZLoader } from './kmz/jsm/loaders/KMZLoader.js';\nvar camera, scene, renderer;\nvar cube, cube2, cube3;\ninit();\n\nfunction init() {\n  scene = new THREE.Scene();\n  var geometry = new THREE.BoxGeometry(100, 100, 10);\n  var material = new THREE.MeshBasicMaterial({\n    color: 0x00ff00\n  }); // §\n\n  cube = new THREE.Mesh(geometry, material);\n  scene.add(cube);\n  var geometry2 = new THREE.BoxGeometry(100, 100, 10);\n  var material2 = new THREE.MeshBasicMaterial({\n    color: 0x0000ff\n  }); // §\n\n  cube2 = new THREE.Mesh(geometry2, material2);\n  scene.add(cube2);\n  scene.background = new THREE.Color(0x999999);\n  var light = new THREE.DirectionalLight(0xffffff);\n  light.position.set(0.5, 1.0, 0.5).normalize();\n  scene.add(light);\n  camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 500);\n  camera.position.y = 5;\n  camera.position.z = 10;\n  scene.add(camera);\n  var grid = new THREE.GridHelper(50, 50, 0xffffff, 0x555555);\n  scene.add(grid);\n  renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n  var loader = new KMZLoader(); // 2 or 1\n\n  loader.load('/kmz_models/1.kmz', function (kmz) {\n    kmz.scene.position.y = 0.5;\n    scene.add(kmz.scene);\n    render();\n  });\n  var controls = new OrbitControls(camera, renderer.domElement);\n  controls.addEventListener('change', render);\n  controls.update();\n  window.addEventListener('resize', onWindowResize, false);\n}\n\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  render();\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n} // $(document).on('eZii/moveCube', function(e) {\n// \t// would be cool to ddo the following using a small neural network like rubygemms brainz\n// \t// then the layeres of the network could be be printed\n// \t// and understdoo\n// \t// maybe by converting them to markov chains // What are hiddden markov chains?\n// \tswitch (e.direction) {\n// \tcase 'north':\n// \t\t\tcube.position.z -= 10; // probablly reversed because of initial \"LOOK_AT\" of this scene §CHANGE_SOON\n// \t\tbreak;\n// \tcase 'east':\n// \t\t\tcube.position.x += 10;\n// \t\tbreak;\n// \tcase 'south':\n// \t\t\tcube.position.z += 10; // probablly reversed because of initial \"LOOK_AT\" of this scene §CHANGE_SOON\n// \t\tbreak;\n// \tcase 'west':\n// \t\t\tcube.position.x -= 10;\n// \t\tbreak;\n// \t}\n// \trender()\n// })\n\n\nfunction moveCube(cube) {\n  cube.position.z += 10;\n}\n\nmoveCube(cube2);\nrender();\nvar geometry = new THREE.TextGeometry('Hello three.js!', {\n  font: font,\n  size: 80,\n  height: 5,\n  curveSegments: 12,\n  bevelEnabled: true,\n  bevelThickness: 10,\n  bevelSize: 8,\n  bevelOffset: 0,\n  bevelSegments: 5\n}); // text = new THREE.TextGeometry( \"GitHub\", parameters );\n\nscene.add(geometry);\nrender();","map":{"version":3,"sources":["/Users/lemonandroid/Banal Dropbox/random/ezii-os/app/javascript/packs/eZii-query-programming.js"],"names":["THREE","OrbitControls","KMZLoader","camera","scene","renderer","cube","cube2","cube3","init","Scene","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","add","geometry2","material2","background","Color","light","DirectionalLight","position","set","normalize","PerspectiveCamera","window","innerWidth","innerHeight","y","z","grid","GridHelper","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","document","body","appendChild","domElement","loader","load","kmz","render","controls","addEventListener","update","onWindowResize","aspect","updateProjectionMatrix","moveCube","TextGeometry","font","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments"],"mappings":"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","sourcesContent":["\n// import * as THREE from '../build/three.module.js';\nimport * as THREE from 'three';\nimport { OrbitControls } from './kmz/jsm/controls/OrbitControls.js';\nimport { KMZLoader } from './kmz/jsm/loaders/KMZLoader.js';\n\nvar camera, scene, renderer;\nvar cube, cube2, cube3;\n\ninit();\n\nfunction init() {\n\n\tscene = new THREE.Scene();\n\t\n\tvar geometry = new THREE.BoxGeometry( 100, 100, 10 );\n\tvar material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );\n\t\n\t// §\n\tcube = new THREE.Mesh( geometry, material );\n    scene.add( cube );\n    \n    var geometry2 = new THREE.BoxGeometry( 100, 100, 10 );\n\tvar material2 = new THREE.MeshBasicMaterial( {color: 0x0000ff} );\n\t\n\t// §\n\tcube2 = new THREE.Mesh( geometry2, material2 );\n    scene.add( cube2 );\n\t\n\tscene.background = new THREE.Color( 0x999999 );\n\tvar light = new THREE.DirectionalLight( 0xffffff );\n\tlight.position.set( 0.5, 1.0, 0.5 ).normalize();\n\tscene.add( light );\n\tcamera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 500 );\n\tcamera.position.y = 5;\n\tcamera.position.z = 10;\n\tscene.add( camera );\n\tvar grid = new THREE.GridHelper( 50, 50, 0xffffff, 0x555555 );\n\tscene.add( grid );\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\tdocument.body.appendChild( renderer.domElement );\n\tvar loader = new KMZLoader();\n\t\n\t// 2 or 1\n\tloader.load( '/kmz_models/1.kmz', function ( kmz ) {\n\t\tkmz.scene.position.y = 0.5;\n\t\tscene.add( kmz.scene );\n\t\trender();\n\t} );\n\tvar controls = new OrbitControls( camera, renderer.domElement );\n\tcontrols.addEventListener( 'change', render );\n\tcontrols.update();\n\twindow.addEventListener( 'resize', onWindowResize, false );\n}\nfunction onWindowResize() {\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trender();\n}\nfunction render() {\n\trenderer.render( scene, camera );\n}\n\n\n// $(document).on('eZii/moveCube', function(e) {\n// \t// would be cool to ddo the following using a small neural network like rubygemms brainz\n// \t// then the layeres of the network could be be printed\n// \t// and understdoo\n// \t// maybe by converting them to markov chains // What are hiddden markov chains?\n\t\n// \tswitch (e.direction) {\n// \tcase 'north':\n// \t\t\tcube.position.z -= 10; // probablly reversed because of initial \"LOOK_AT\" of this scene §CHANGE_SOON\n// \t\tbreak;\n// \tcase 'east':\n// \t\t\tcube.position.x += 10;\n// \t\tbreak;\n// \tcase 'south':\n// \t\t\tcube.position.z += 10; // probablly reversed because of initial \"LOOK_AT\" of this scene §CHANGE_SOON\n// \t\tbreak;\n// \tcase 'west':\n// \t\t\tcube.position.x -= 10;\n// \t\tbreak;\n// \t}\n// \trender()\n// })\n\nfunction moveCube(cube) {\n    cube.position.z += 10;\n}\n\nmoveCube(cube2);\nrender();\n\n\n\nvar geometry = new THREE.TextGeometry( 'Hello three.js!', {\n    font: font,\n    size: 80,\n    height: 5,\n    curveSegments: 12,\n    bevelEnabled: true,\n    bevelThickness: 10,\n    bevelSize: 8,\n    bevelOffset: 0,\n    bevelSegments: 5\n} );\n\n// text = new THREE.TextGeometry( \"GitHub\", parameters );\nscene.add(geometry);\nrender();"]},"metadata":{},"sourceType":"module"}
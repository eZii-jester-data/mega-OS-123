# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/workbook/all/workbook.rbi
#
# workbook-0.8.1
module Workbook
  def self.caching_enabled?; end
  def self.disable_caching!; end
  def self.enable_caching!; end
end
module Workbook::Modules
end
module Workbook::Modules::Cache
  def cache_valid_from; end
  def caching_enabled?; end
  def debug_cache; end
  def debug_cache=(arg0); end
  def fetch_cache(key, expires = nil); end
  def invalidate_cache!; end
  def valid_cache_key?(key, expires = nil); end
end
module Workbook::Modules::TypeParser
  def clean!(options = nil); end
  def parse!(options = nil); end
  def parse(options = nil); end
  def string_american_date_converter; end
  def string_boolean_converter; end
  def string_cleaner; end
  def string_integer_converter; end
  def string_nil_converter; end
  def string_non_american_date_converter; end
  def string_optimistic_date_converter; end
  def string_parsers; end
  def string_parsers=(parsers); end
  def string_parsers_as_procs; end
  def strip_win_chars(csv_raw); end
end
class Workbook::NilValue
  def <=>(v); end
  def initialize(reason); end
  def reason; end
  def reason=(reason); end
  def value; end
end
module Workbook::Modules::Cell
  def <=>(other); end
  def ==(other); end
  def _replace_possibly_problematic_characters_from_string(string); end
  def cell_type; end
  def colspan; end
  def colspan=(c); end
  def compare_on_class(other); end
  def format; end
  def format=(f); end
  def format?; end
  def formula; end
  def formula=(f); end
  def importance_of_class(value); end
  def index; end
  def inspect; end
  def key; end
  def nil?; end
  def nil_or_empty?; end
  def row; end
  def row=(r); end
  def rowspan; end
  def rowspan=(r); end
  def table; end
  def template; end
  def to_s; end
  def to_sym; end
  def valid_value?(value); end
  def value; end
  def value=(value); end
  def value_to_s; end
  include Workbook::Modules::TypeParser
end
module Workbook::Types
end
class Workbook::Types::Date < Date
  def initialize(*args); end
  def value; end
  def value=(a); end
  include Workbook::Modules::Cell
end
module Workbook::Writers
end
module Workbook::Writers::XlsWriter
  def format_to_xls_format(f); end
  def init_spreadsheet_template; end
  def parse_font_family(format); end
  def remove_row(xls_sheet, row_index); end
  def to_xls(options = nil); end
  def write_to_xls(filename = nil, options = nil); end
  def xls_sheet(a); end
  def xls_template; end
end
module Workbook::Readers
end
module Workbook::Readers::XlsShared
  def html_color_to_xls_color(hex); end
  def ms_formatting_to_strftime(ms_nr_format); end
  def num_fmt_id_to_ms_formatting(num_fmt_id); end
  def strftime_to_ms_format(numberformat); end
  def xls_number_to_date(number, base_date = nil); end
  def xls_number_to_time(number, base_date = nil); end
end
module Workbook::Writers::XlsxWriter
  def format_to_xlsx_format(f); end
  def formats_to_xlsx_format; end
  def init_xlsx_spreadsheet_template; end
  def make_sure_f_is_a_workbook_format(f); end
  def stream_xlsx(options = nil); end
  def to_xlsx(options = nil); end
  def write_to_xlsx(filename = nil, options = nil); end
  def xlsx_sheet(a); end
  def xlsx_template; end
end
module Workbook::Writers::HtmlWriter
  def to_html(options = nil); end
  def write_to_html(filename = nil, options = nil); end
end
module Workbook::Writers::HtmlTableWriter
  def build_cell_options(cell, options = nil); end
  def to_html(options = nil); end
end
module Workbook::Readers::XlsReader
  def load_xls(file_obj, options); end
  def parse_xls(xls_spreadsheet = nil, options = nil); end
  def parse_xls_cell(xls_cell, xls_row, ci); end
  def parse_xls_format(xls_row, ci, ri, col_widths); end
  def parse_xls_row(ri, s, xls_sheet); end
  def xls_color_to_html_hex(color_sym); end
  include Workbook::Readers::XlsShared
end
module Workbook::Readers::XlsxReader
  def extract_xlsx_backgrounds(styles); end
  def extract_xlsx_number_formats(styles); end
  def load_xlsm(file_obj, options = nil); end
  def load_xlsx(file_obj, options = nil); end
  def pad_xlsx_row(row); end
  def parse_shared_string_file(file); end
  def parse_xlsx; end
  def parse_xlsx_cell(cell); end
  def parse_xlsx_column(column); end
  def parse_xlsx_fonts(styles); end
  def parse_xlsx_row(row); end
  def parse_xlsx_sheet(sheet_xml); end
  def parse_xlsx_styles(styles); end
  include Workbook::Readers::XlsShared
end
module Workbook::Readers::OdsReader
  def get_column_count(table); end
  def get_repeat; end
  def load_ods(file_obj, options = nil); end
  def parse_local_cell(workbook_cell); end
  def parse_local_row(row); end
  def parse_local_table(sheet, table, tableindex); end
  def parse_local_value(valuetype); end
  def parse_ods(ods_spreadsheet = nil, options = nil); end
  def parse_ods_style(parse_ods_style); end
  def set_cell_attributes(workbook_cell); end
  def set_format_property(format, property, value); end
end
module Workbook::Readers::CsvReader
  def csv_lib; end
  def load_csv(text, options = nil); end
  def parse_csv(csv_raw, options = nil); end
end
module Workbook::Readers::TxtReader
  def load_txt(text, options = nil); end
  def parse_txt(csv_raw, options = nil); end
end
module Workbook::Modules::BookDiffSort
  def diff(to_workbook, options = nil); end
  def self.included(base); end
end
module Workbook::Modules::BookDiffSort::ClassMethods
  def new_diff_template; end
end
module Workbook::Modules::TableDiffSort
  def align(other, options = nil); end
  def align_row(sself, sother, row_index); end
  def create_diff_cell(scell, ocell); end
  def diff(other, options = nil); end
  def diff_template; end
  def diff_template=(table); end
  def insert_placeholder?(sother, sself, row_index); end
  def placeholder_row; end
end
class Workbook::Book < Array
  def <<(sheet = nil); end
  def create_or_open_sheet_at(index); end
  def file_extension(filename); end
  def has_contents?; end
  def import(filename, extension = nil, options = nil); end
  def initialize(sheet = nil); end
  def open_binary(filename, extension = nil, options = nil); end
  def open_text(filename, extension = nil, options = nil); end
  def push(sheet = nil); end
  def read(stringio_or_string, filetype, options = nil); end
  def self.open(filename, extension = nil); end
  def self.read(stringio_or_string, filetype, options = nil); end
  def sheet; end
  def template; end
  def template=(template); end
  def text_to_utf8(text); end
  def title; end
  def title=(t); end
  def write(filename, options = nil); end
  extend Workbook::Modules::BookDiffSort::ClassMethods
  include Workbook::Modules::BookDiffSort
  include Workbook::Readers::CsvReader
  include Workbook::Readers::OdsReader
  include Workbook::Readers::TxtReader
  include Workbook::Readers::XlsReader
  include Workbook::Readers::XlsShared
  include Workbook::Readers::XlsxReader
  include Workbook::Writers::HtmlWriter
  include Workbook::Writers::XlsWriter
  include Workbook::Writers::XlsxWriter
end
class Workbook::Sheet < Array
  def book; end
  def book=(b); end
  def clone; end
  def create_or_open_table_at(index); end
  def delete_all; end
  def has_contents?; end
  def initialize(table = nil, book = nil, options = nil); end
  def name; end
  def name=(name); end
  def table; end
  def table=(table, options = nil); end
end
module Workbook::Writers::CsvTableWriter
  def to_csv(options = nil); end
  def write_to_csv(filename = nil, options = nil); end
end
module Workbook::Writers::JsonTableWriter
  def to_array_of_hashes_with_values(options = nil); end
  def to_json(options = nil); end
  def write_to_json(filename = nil, options = nil); end
end
class Workbook::Table < Array
  def <<(row); end
  def [](index_or_string); end
  def []=(index_or_string, new_value); end
  def clone; end
  def columns; end
  def columns=(columns); end
  def contains_row?(row); end
  def create_or_open_row_at(index); end
  def define_columns_with_row(r); end
  def delete_all; end
  def dimensions; end
  def has_contents?; end
  def header; end
  def header=(h); end
  def header_row_index; end
  def initialize(row_cel_values = nil, sheet = nil, options = nil); end
  def name; end
  def name=(arg0); end
  def new_row(cell_values = nil); end
  def push(row); end
  def remove_empty_lines!; end
  def sheet; end
  def sheet=(sheet); end
  def template; end
  def trim!(desired_row_length = nil); end
  def trim(desired_row_length = nil); end
  include Workbook::Modules::TableDiffSort
  include Workbook::Writers::CsvTableWriter
  include Workbook::Writers::HtmlTableWriter
  include Workbook::Writers::JsonTableWriter
end
class Workbook::Row < Array
  def +(row); end
  def <<(cell); end
  def <=>(other); end
  def [](index_or_hash); end
  def []=(index_or_hash, value); end
  def clone; end
  def compact; end
  def compare_without_header(arg0); end
  def concat(row); end
  def find_cells_by_background_color(color = nil, options = nil); end
  def first?; end
  def format; end
  def format=(arg0); end
  def header?; end
  def initialize(cells = nil, table = nil, options = nil); end
  def key; end
  def no_values?; end
  def placeholder; end
  def placeholder=(arg0); end
  def placeholder?; end
  def push(cell); end
  def set_table(t); end
  def table; end
  def table=(t); end
  def table_header; end
  def table_header_keys; end
  def template; end
  def to_a; end
  def to_hash; end
  def to_hash_with_values; end
  def to_symbols; end
  def trim!(desired_length = nil); end
  def trim(desired_length = nil); end
  include Workbook::Modules::Cache
end
class Workbook::Cell
  def initialize(value = nil, options = nil); end
  include Workbook::Modules::Cell
end
module Workbook::Modules::RawObjectsStorage
  def add_raw(raw_object, options = nil); end
  def available_raws; end
  def has_raw_for?(raw_object_class); end
  def raws; end
  def remove_all_raws!; end
  def return_raw_for(raw_object_class); end
end
class Workbook::Format < Hash
  def all_names; end
  def derived_type; end
  def flattened; end
  def formats; end
  def has_background_color?(color = nil); end
  def initialize(options = nil, name = nil); end
  def merge!(other_format); end
  def merge(other_format); end
  def merge_hash!(*arg0); end
  def merge_hash(*arg0); end
  def name; end
  def name=(arg0); end
  def parent; end
  def parent=(arg0); end
  def to_css; end
  include Workbook::Modules::RawObjectsStorage
end
class Workbook::Template
  def add_format(format); end
  def create_or_find_format_by(name, variant = nil); end
  def formats; end
  def has_header?; end
  def initialize; end
  def set_default_formats!; end
  include Workbook::Modules::RawObjectsStorage
end
class Workbook::Column
  def column_type; end
  def column_type=(column_type); end
  def default; end
  def default=(value); end
  def head_value; end
  def index; end
  def initialize(table = nil, options = nil); end
  def inspect; end
  def limit; end
  def limit=(arg0); end
  def self.alpha_index_to_number_index(string); end
  def table; end
  def table=(table); end
  def width; end
  def width=(arg0); end
end

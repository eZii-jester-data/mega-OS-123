# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/axlsx/all/axlsx.rbi
#
# axlsx-3.0.0.pre
module Axlsx
  def self.booleanize(value); end
  def self.camel(s = nil, all_caps = nil); end
  def self.cell_r(c_index, r_index); end
  def self.cell_range(cells, absolute = nil); end
  def self.coder; end
  def self.col_ref(index); end
  def self.name_to_indices(name); end
  def self.range_to_a(range); end
  def self.sanitize(str); end
  def self.sort_cells(cells); end
  def self.trust_input; end
  def self.trust_input=(trust_me); end
  def self.validate_angle(v); end
  def self.validate_boolean(v); end
  def self.validate_cell_u(v); end
  def self.validate_conditional_formatting_operator(v); end
  def self.validate_conditional_formatting_type(v); end
  def self.validate_conditional_formatting_value_object_type(v); end
  def self.validate_content_type(v); end
  def self.validate_data_validation_error_style(v); end
  def self.validate_data_validation_operator(v); end
  def self.validate_data_validation_type(v); end
  def self.validate_display_blanks_as(v); end
  def self.validate_family(v); end
  def self.validate_float(v); end
  def self.validate_gradient_type(v); end
  def self.validate_horizontal_alignment(v); end
  def self.validate_icon_set(v); end
  def self.validate_int(v); end
  def self.validate_integerish(v); end
  def self.validate_marker_symbol(v); end
  def self.validate_number_with_unit(v); end
  def self.validate_page_orientation(v); end
  def self.validate_pane_type(v); end
  def self.validate_pattern_type(v); end
  def self.validate_relationship_type(v); end
  def self.validate_scale_0_10_400(v); end
  def self.validate_scale_10_400(v); end
  def self.validate_scatter_style(v); end
  def self.validate_sheet_view_type(v); end
  def self.validate_split_state_type(v); end
  def self.validate_string(v); end
  def self.validate_table_element_type(v); end
  def self.validate_time_period_type(v); end
  def self.validate_unsigned_int(v); end
  def self.validate_unsigned_numeric(v); end
  def self.validate_vertical_alignment(v); end
  def self.validate_view_visibility(v); end
end
class Axlsx::SimpleTypedList
  def &(*args, &block); end
  def *(*args, &block); end
  def +(v); end
  def -(*args, &block); end
  def <<(v); end
  def [](*args, &block); end
  def []=(index, v); end
  def all?(*args, &block); end
  def allowed_types; end
  def any?(*args, &block); end
  def append(*args, &block); end
  def assoc(*args, &block); end
  def at(*args, &block); end
  def bsearch(*args, &block); end
  def bsearch_index(*args, &block); end
  def chain(*args, &block); end
  def chunk(*args, &block); end
  def chunk_while(*args, &block); end
  def clear(*args, &block); end
  def collect!(*args, &block); end
  def collect(*args, &block); end
  def collect_concat(*args, &block); end
  def combination(*args, &block); end
  def compact!(*args, &block); end
  def compact(*args, &block); end
  def concat(*args, &block); end
  def count(*args, &block); end
  def cycle(*args, &block); end
  def delete(v); end
  def delete_at(index); end
  def delete_if(*args, &block); end
  def detect(*args, &block); end
  def difference(*args, &block); end
  def dig(*args, &block); end
  def drop(*args, &block); end
  def drop_while(*args, &block); end
  def each(*args, &block); end
  def each_cons(*args, &block); end
  def each_entry(*args, &block); end
  def each_index(*args, &block); end
  def each_slice(*args, &block); end
  def each_with_index(*args, &block); end
  def each_with_object(*args, &block); end
  def empty?(*args, &block); end
  def entries(*args, &block); end
  def exclude?(*args, &block); end
  def excluding(*args, &block); end
  def extract!(*args, &block); end
  def extract_options!(*args, &block); end
  def fetch(*args, &block); end
  def fifth(*args, &block); end
  def fill(*args, &block); end
  def filter!(*args, &block); end
  def filter(*args, &block); end
  def find(*args, &block); end
  def find_all(*args, &block); end
  def find_index(*args, &block); end
  def first(*args, &block); end
  def flat_map(*args, &block); end
  def flatten!(*args, &block); end
  def flatten(*args, &block); end
  def forty_two(*args, &block); end
  def fourth(*args, &block); end
  def from(*args, &block); end
  def grep(*args, &block); end
  def grep_v(*args, &block); end
  def group_by(*args, &block); end
  def include?(*args, &block); end
  def including(*args, &block); end
  def index(*args, &block); end
  def index_by(*args, &block); end
  def index_with(*args, &block); end
  def initialize(type, serialize_as = nil, start_size = nil); end
  def inject(*args, &block); end
  def insert(index, v); end
  def join(*args, &block); end
  def keep_if(*args, &block); end
  def last(*args, &block); end
  def lazy(*args, &block); end
  def length(*args, &block); end
  def lock; end
  def locked_at; end
  def many?(*args, &block); end
  def map!(*args, &block); end
  def map(*args, &block); end
  def max(*args, &block); end
  def max_by(*args, &block); end
  def member?(*args, &block); end
  def min(*args, &block); end
  def min_by(*args, &block); end
  def minmax(*args, &block); end
  def minmax_by(*args, &block); end
  def none?(*args, &block); end
  def one?(*args, &block); end
  def pack(*args, &block); end
  def partition(*args, &block); end
  def permutation(*args, &block); end
  def pluck(*args, &block); end
  def pop(*args, &block); end
  def prepend(*args, &block); end
  def product(*args, &block); end
  def protected?(index); end
  def push(v); end
  def rassoc(*args, &block); end
  def reduce(*args, &block); end
  def reject!(*args, &block); end
  def reject(*args, &block); end
  def repeated_combination(*args, &block); end
  def repeated_permutation(*args, &block); end
  def replace(*args, &block); end
  def reverse!(*args, &block); end
  def reverse(*args, &block); end
  def reverse_each(*args, &block); end
  def rindex(*args, &block); end
  def rotate!(*args, &block); end
  def rotate(*args, &block); end
  def sample(*args, &block); end
  def second(*args, &block); end
  def second_to_last(*args, &block); end
  def select!(*args, &block); end
  def select(*args, &block); end
  def serialize_as; end
  def shelljoin(*args, &block); end
  def shift(*args, &block); end
  def shuffle!(*args, &block); end
  def shuffle(*args, &block); end
  def size(*args, &block); end
  def slice!(*args, &block); end
  def slice(*args, &block); end
  def slice_after(*args, &block); end
  def slice_before(*args, &block); end
  def slice_when(*args, &block); end
  def sort!(*args, &block); end
  def sort(*args, &block); end
  def sort_by!(*args, &block); end
  def sort_by(*args, &block); end
  def sum(*args, &block); end
  def take(*args, &block); end
  def take_while(*args, &block); end
  def third(*args, &block); end
  def third_to_last(*args, &block); end
  def to(*args, &block); end
  def to_a; end
  def to_ary; end
  def to_default_s(*args, &block); end
  def to_formatted_s(*args, &block); end
  def to_h(*args, &block); end
  def to_msgpack(*args, &block); end
  def to_sentence(*args, &block); end
  def to_set(*args, &block); end
  def to_xml(*args, &block); end
  def to_xml_string(str = nil); end
  def transpose; end
  def union(*args, &block); end
  def uniq!(*args, &block); end
  def uniq(*args, &block); end
  def unlock; end
  def unshift(*args, &block); end
  def values_at(*args, &block); end
  def without(*args, &block); end
  def zip(*args, &block); end
  def |(*args, &block); end
end
class Axlsx::RestrictionValidator
  def self.validate(name, choices, v); end
end
class Axlsx::RangeValidator
  def self.validate(name, min, max, value, inclusive = nil); end
end
class Axlsx::RegexValidator
  def self.validate(name, regex, v); end
end
class Axlsx::DataTypeValidator
  def self.validate(name, types, v, other = nil); end
end
module Axlsx::Accessors
  def self.included(base); end
end
module Axlsx::Accessors::ClassMethods
  def boolean_attr_accessor(*symbols); end
  def float_attr_accessor(*symbols); end
  def string_attr_accessor(*symbols); end
  def unsigned_int_attr_accessor(*symbols); end
  def validated_attr_accessor(symbols, validator); end
end
module Axlsx::SerializedAttributes
  def declared_attributes; end
  def self.included(base); end
  def serialized_attributes(str = nil, additional_attributes = nil); end
  def serialized_element_attributes(str = nil, additional_attributes = nil, &block); end
  def serialized_tag(tagname, str, additional_attributes = nil, &block); end
end
module Axlsx::SerializedAttributes::ClassMethods
  def serializable_attributes(*symbols); end
  def serializable_element_attributes(*symbols); end
  def xml_attributes; end
  def xml_element_attributes; end
end
module Axlsx::OptionsParser
  def parse_options(options = nil); end
end
module Axlsx::MimeTypeUtils
  def self.get_mime_type(v); end
end
class Axlsx::Border
  def diagonalDown; end
  def diagonalDown=(v); end
  def diagonalUp; end
  def diagonalUp=(v); end
  def diagonal_down; end
  def diagonal_down=(v); end
  def diagonal_up; end
  def diagonal_up=(v); end
  def initialize(options = nil); end
  def outline; end
  def outline=(v); end
  def prs; end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::BorderPr
  def color; end
  def color=(v); end
  def initialize(options = nil); end
  def name; end
  def name=(v); end
  def style; end
  def style=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::CellAlignment
  def horizontal; end
  def horizontal=(v); end
  def indent; end
  def indent=(v); end
  def initialize(options = nil); end
  def justifyLastLine; end
  def justifyLastLine=(v); end
  def justify_last_line; end
  def justify_last_line=(v); end
  def readingOrder; end
  def readingOrder=(v); end
  def reading_order; end
  def reading_order=(v); end
  def relativeIndent; end
  def relativeIndent=(v); end
  def relative_indent; end
  def relative_indent=(v); end
  def shrinkToFit; end
  def shrinkToFit=(v); end
  def shrink_to_fit; end
  def shrink_to_fit=(v); end
  def textRotation; end
  def textRotation=(v); end
  def text_rotation; end
  def text_rotation=(v); end
  def to_xml_string(str = nil); end
  def vertical; end
  def vertical=(v); end
  def wrapText; end
  def wrapText=(v); end
  def wrap_text; end
  def wrap_text=(v); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::CellStyle
  def builtinId; end
  def builtinId=(v); end
  def customBuiltin; end
  def customBuiltin=(v); end
  def hidden; end
  def hidden=(v); end
  def iLevel; end
  def iLevel=(v); end
  def initialize(options = nil); end
  def name; end
  def name=(v); end
  def to_xml_string(str = nil); end
  def xfId; end
  def xfId=(v); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Color
  def auto; end
  def auto=(v); end
  def initialize(options = nil); end
  def rgb; end
  def rgb=(v); end
  def tint; end
  def tint=(v); end
  def to_xml_string(str = nil, tag_name = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Fill
  def fill_type; end
  def fill_type=(v); end
  def initialize(fill_type); end
  def to_xml_string(str = nil); end
end
class Axlsx::Font
  def b; end
  def b=(v); end
  def charset; end
  def charset=(v); end
  def color; end
  def color=(v); end
  def condense; end
  def condense=(v); end
  def extend; end
  def extend=(v); end
  def family; end
  def family=(v); end
  def i; end
  def i=(v); end
  def initialize(options = nil); end
  def name; end
  def name=(v); end
  def outline; end
  def outline=(v); end
  def shadow; end
  def shadow=(v); end
  def strike; end
  def strike=(v); end
  def sz; end
  def sz=(v); end
  def to_xml_string(str = nil); end
  def u; end
  def u=(v); end
  include Axlsx::OptionsParser
end
class Axlsx::GradientFill
  def bottom; end
  def bottom=(v); end
  def degree; end
  def degree=(v); end
  def initialize(options = nil); end
  def left; end
  def left=(v); end
  def right; end
  def right=(v); end
  def stop; end
  def to_xml_string(str = nil); end
  def top; end
  def top=(v); end
  def type; end
  def type=(v); end
  def validate_format_percentage(name, value); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::GradientStop
  def color; end
  def color=(v); end
  def initialize(color, position); end
  def position; end
  def position=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::NumFmt
  def formatCode; end
  def formatCode=(v); end
  def initialize(options = nil); end
  def numFmtId; end
  def numFmtId=(v); end
  def serialized_attributes(str = nil, additional_attributes = nil); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::PatternFill
  def bgColor; end
  def bgColor=(v); end
  def fgColor; end
  def fgColor=(v); end
  def initialize(options = nil); end
  def patternType; end
  def patternType=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::TableStyle < Axlsx::SimpleTypedList
  def initialize(name, options = nil); end
  def name; end
  def name=(v); end
  def pivot; end
  def pivot=(v); end
  def table; end
  def table=(v); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::TableStyles < Axlsx::SimpleTypedList
  def defaultPivotStyle; end
  def defaultPivotStyle=(v); end
  def defaultTableStyle; end
  def defaultTableStyle=(v); end
  def initialize(options = nil); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::SerializedAttributes
end
class Axlsx::TableStyleElement
  def dxfId; end
  def dxfId=(v); end
  def initialize(options = nil); end
  def size; end
  def size=(v); end
  def to_xml_string(str = nil); end
  def type; end
  def type=(v); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Dxf
  def alignment; end
  def alignment=(v); end
  def border; end
  def border=(v); end
  def fill; end
  def fill=(v); end
  def font; end
  def font=(v); end
  def initialize(options = nil); end
  def numFmt; end
  def numFmt=(v); end
  def protection; end
  def protection=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::Xf
  def alignment; end
  def alignment=(v); end
  def applyAlignment; end
  def applyAlignment=(v); end
  def applyBorder; end
  def applyBorder=(v); end
  def applyFill; end
  def applyFill=(v); end
  def applyFont; end
  def applyFont=(v); end
  def applyNumberFormat; end
  def applyNumberFormat=(v); end
  def applyProtection; end
  def applyProtection=(v); end
  def borderId; end
  def borderId=(v); end
  def fillId; end
  def fillId=(v); end
  def fontId; end
  def fontId=(v); end
  def initialize(options = nil); end
  def numFmtId; end
  def numFmtId=(v); end
  def pivotButton; end
  def pivotButton=(v); end
  def protection; end
  def protection=(v); end
  def quotePrefix; end
  def quotePrefix=(v); end
  def to_xml_string(str = nil); end
  def xfId; end
  def xfId=(v); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::CellProtection
  def hidden; end
  def hidden=(v); end
  def initialize(options = nil); end
  def locked; end
  def locked=(v); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Styles
  def add_style(options = nil); end
  def borders; end
  def cellStyleXfs; end
  def cellStyles; end
  def cellXfs; end
  def dxfs; end
  def fills; end
  def fonts; end
  def initialize; end
  def load_default_styles; end
  def numFmts; end
  def parse_alignment_options(options = nil); end
  def parse_border_options(options = nil); end
  def parse_fill_options(options = nil); end
  def parse_font_options(options = nil); end
  def parse_num_fmt_options(options = nil); end
  def parse_protection_options(options = nil); end
  def tableStyles; end
  def to_xml_string(str = nil); end
end
class Axlsx::App
  def AppVersion; end
  def AppVersion=(v); end
  def Applicatoin; end
  def Characters; end
  def Characters=(v); end
  def CharactersWithSpaces; end
  def CharactersWithSpaces=(v); end
  def Company; end
  def Company=(v); end
  def DocSecurity; end
  def DocSecurity=(v); end
  def HiddenSlides; end
  def HiddenSlides=(v); end
  def HyperLinksChanged=(v); end
  def HyperlinkBase; end
  def HyperlinkBase=(v); end
  def HyperlinksChanged; end
  def Lines; end
  def Lines=(v); end
  def LinksUpToDate; end
  def LinksUpToDate=(v); end
  def MMClips; end
  def MMClips=(v); end
  def Manager; end
  def Manager=(v); end
  def Notes; end
  def Notes=(v); end
  def Pages; end
  def Paragraphs; end
  def Paragraphs=(v); end
  def PresentationFormat; end
  def PresentationFormat=(v); end
  def ScaleCrop; end
  def ScaleCrop=(v); end
  def SharedDoc; end
  def SharedDoc=(v); end
  def Slides; end
  def Slides=(v); end
  def Template; end
  def Template=(v); end
  def TotalTime; end
  def TotalTime=(v); end
  def Words; end
  def Words=(v); end
  def app_version; end
  def app_version=(v); end
  def application; end
  def characters; end
  def characters=(v); end
  def characters_with_spaces; end
  def characters_with_spaces=(v); end
  def company; end
  def company=(v); end
  def doc_security; end
  def doc_security=(v); end
  def hidden_slides; end
  def hidden_slides=(v); end
  def hyperlink_base; end
  def hyperlink_base=(v); end
  def hyperlinks_changed; end
  def hyperlinks_changed=(v); end
  def initialize(options = nil); end
  def lines; end
  def lines=(v); end
  def links_up_to_date; end
  def links_up_to_date=(v); end
  def m_m_clips; end
  def m_m_clips=(v); end
  def manager; end
  def manager=(v); end
  def notes; end
  def notes=(v); end
  def pages; end
  def pages=(v); end
  def paragraphs; end
  def paragraphs=(v); end
  def presentation_format; end
  def presentation_format=(v); end
  def scale_crop; end
  def scale_crop=(v); end
  def shared_doc; end
  def shared_doc=(v); end
  def slides; end
  def slides=(v); end
  def template; end
  def template=(v); end
  def to_xml_string(str = nil); end
  def total_time; end
  def total_time=(v); end
  def words; end
  def words=(v); end
  include Axlsx::OptionsParser
end
class Axlsx::Core
  def created; end
  def created=(arg0); end
  def creator; end
  def creator=(arg0); end
  def initialize(options = nil); end
  def to_xml_string(str = nil); end
end
class Axlsx::AbstractContentType
  def ContentType; end
  def ContentType=(v); end
  def content_type; end
  def content_type=(v); end
  def initialize(options = nil); end
  def to_xml_string(node_name = nil, str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::Default < Axlsx::AbstractContentType
  def Extension; end
  def Extension=(v); end
  def extension; end
  def extension=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::Override < Axlsx::AbstractContentType
  def PartName; end
  def PartName=(v); end
  def part_name; end
  def part_name=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::ContentType < Axlsx::SimpleTypedList
  def initialize; end
  def to_xml_string(str = nil); end
end
class Axlsx::Relationship
  def Id; end
  def Target; end
  def Target=(v); end
  def TargetMode; end
  def TargetMode=(v); end
  def Type; end
  def Type=(v); end
  def initialize(source_obj, type, target, options = nil); end
  def self.clear_cached_instances; end
  def self.instances; end
  def self.next_free_id; end
  def should_use_same_id_as?(other); end
  def source_obj; end
  def to_xml_string(str = nil); end
end
class Axlsx::Relationships < Axlsx::SimpleTypedList
  def for(source_obj); end
  def initialize; end
  def to_xml_string(str = nil); end
end
class Axlsx::DLbls
  def chart_type; end
  def d_lbl_pos; end
  def d_lbl_pos=(label_position); end
  def initialize(chart_type, options = nil); end
  def initialize_defaults; end
  def show_bubble_size; end
  def show_bubble_size=(value); end
  def show_cat_name; end
  def show_cat_name=(value); end
  def show_leader_lines; end
  def show_leader_lines=(value); end
  def show_legend_key; end
  def show_legend_key=(value); end
  def show_percent; end
  def show_percent=(value); end
  def show_ser_name; end
  def show_ser_name=(value); end
  def show_val; end
  def show_val=(value); end
  def to_xml_string(str = nil); end
  def validate_attributes_for_chart_type; end
  extend Axlsx::Accessors::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
end
class Axlsx::Title
  def cell; end
  def cell=(v); end
  def initialize(title = nil, title_size = nil); end
  def text; end
  def text=(v); end
  def text_size; end
  def text_size=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::SeriesTitle < Axlsx::Title
  def to_xml_string(str = nil); end
end
class Axlsx::Series
  def chart; end
  def chart=(v); end
  def index; end
  def initialize(chart, options = nil); end
  def order; end
  def order=(v); end
  def title; end
  def title=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::PieSeries < Axlsx::Series
  def colors; end
  def colors=(v); end
  def data; end
  def data=(v); end
  def explosion; end
  def explosion=(v); end
  def initialize(chart, options = nil); end
  def labels; end
  def labels=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::BarSeries < Axlsx::Series
  def colors; end
  def colors=(v); end
  def data; end
  def data=(v); end
  def initialize(chart, options = nil); end
  def labels; end
  def labels=(v); end
  def shape; end
  def shape=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::LineSeries < Axlsx::Series
  def color; end
  def color=(v); end
  def data; end
  def data=(v); end
  def initialize(chart, options = nil); end
  def labels; end
  def labels=(v); end
  def marker_symbol; end
  def marker_symbol=(v); end
  def show_marker; end
  def show_marker=(v); end
  def smooth; end
  def smooth=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::ScatterSeries < Axlsx::Series
  def color; end
  def color=(v); end
  def initialize(chart, options = nil); end
  def ln_width; end
  def ln_width=(v); end
  def smooth; end
  def smooth=(v); end
  def to_xml_string(str = nil); end
  def xData; end
  def yData; end
end
class Axlsx::BubbleSeries < Axlsx::Series
  def bubbleSize; end
  def color; end
  def color=(v); end
  def initialize(chart, options = nil); end
  def to_xml_string(str = nil); end
  def xData; end
  def yData; end
end
class Axlsx::AreaSeries < Axlsx::Series
  def color; end
  def color=(v); end
  def data; end
  def data=(v); end
  def initialize(chart, options = nil); end
  def labels; end
  def labels=(v); end
  def marker_symbol; end
  def marker_symbol=(v); end
  def show_marker; end
  def show_marker=(v); end
  def smooth; end
  def smooth=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::Scaling
  def initialize(options = nil); end
  def logBase; end
  def logBase=(v); end
  def max; end
  def max=(v); end
  def min; end
  def min=(v); end
  def orientation; end
  def orientation=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::Axis
  def axID; end
  def axPos; end
  def axPos=(v); end
  def ax_pos; end
  def ax_pos=(v); end
  def color; end
  def color=(color_rgb); end
  def crossAx; end
  def cross_axis; end
  def cross_axis=(axis); end
  def crosses; end
  def crosses=(v); end
  def delete; end
  def delete=(v); end
  def format_code; end
  def format_code=(v); end
  def gridlines; end
  def gridlines=(v); end
  def id; end
  def initialize(options = nil); end
  def label_rotation; end
  def label_rotation=(v); end
  def scaling; end
  def tickLblPos; end
  def tickLblPos=(v); end
  def tick_lbl_pos; end
  def tick_lbl_pos=(v); end
  def title; end
  def title=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::StrVal
  def initialize(options = nil); end
  def to_xml_string(idx, str = nil); end
  def v; end
  def v=(v); end
  include Axlsx::OptionsParser
end
class Axlsx::NumVal < Axlsx::StrVal
  def format_code; end
  def format_code=(v); end
  def initialize(options = nil); end
  def to_xml_string(idx, str = nil); end
end
class Axlsx::StrData
  def data=(values = nil); end
  def initialize(options = nil); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::NumData
  def data=(values = nil); end
  def format_code; end
  def format_code=(v = nil); end
  def initialize(options = nil); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::NumDataSource
  def data; end
  def initialize(options = nil); end
  def self.allowed_tag_names; end
  def tag_name; end
  def tag_name=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::AxDataSource < Axlsx::NumDataSource
  def initialize(options = nil); end
  def self.allowed_tag_names; end
end
class Axlsx::SerAxis < Axlsx::Axis
  def initialize(options = nil); end
  def tickLblSkip; end
  def tickLblSkip=(v); end
  def tickMarkSkip; end
  def tickMarkSkip=(v); end
  def tick_lbl_skip; end
  def tick_lbl_skip=(v); end
  def tick_mark_skip; end
  def tick_mark_skip=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::CatAxis < Axlsx::Axis
  def auto; end
  def auto=(v); end
  def initialize(options = nil); end
  def lblAlgn; end
  def lblAlgn=(v); end
  def lblOffset; end
  def lblOffset=(v); end
  def lbl_algn; end
  def lbl_algn=(v); end
  def lbl_offset; end
  def lbl_offset=(v); end
  def tickLblSkip; end
  def tickLblSkip=(v); end
  def tickMarkSkip; end
  def tickMarkSkip=(v); end
  def tick_lbl_skip; end
  def tick_lbl_skip=(v); end
  def tick_mark_skip; end
  def tick_mark_skip=(v); end
  def to_xml_string(str = nil); end
end
class Axlsx::ValAxis < Axlsx::Axis
  def crossBetween; end
  def crossBetween=(v); end
  def cross_between; end
  def cross_between=(v); end
  def initialize(options = nil); end
  def to_xml_string(str = nil); end
end
class Axlsx::Axes
  def [](name); end
  def add_axis(name, axis_class); end
  def axes; end
  def initialize(options = nil); end
  def set_cross_axis(axis); end
  def to_xml_string(str = nil, options = nil); end
end
class Axlsx::Marker
  def col; end
  def col=(v); end
  def colOff; end
  def colOff=(v); end
  def coord(col, row = nil); end
  def initialize(options = nil); end
  def parse_coord_args(x, y = nil); end
  def row; end
  def row=(v); end
  def rowOff; end
  def rowOff=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::OneCellAnchor
  def drawing; end
  def ext; end
  def from; end
  def height; end
  def height=(v); end
  def index; end
  def initialize(drawing, options = nil); end
  def object; end
  def start_at(x, y = nil); end
  def to_xml_string(str = nil); end
  def width; end
  def width=(v); end
  include Axlsx::OptionsParser
end
class Axlsx::TwoCellAnchor
  def add_chart(chart_type, options); end
  def add_pic(options = nil); end
  def drawing; end
  def end_at(x, y = nil); end
  def from; end
  def index; end
  def initialize(drawing, options = nil); end
  def object; end
  def start_at(x, y = nil); end
  def to; end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::GraphicFrame
  def anchor; end
  def chart; end
  def initialize(anchor, chart_type, options); end
  def rId; end
  def to_xml_string(str = nil); end
end
class Axlsx::View3D
  def depthPercent; end
  def depthPercent=(v); end
  def depth_percent; end
  def depth_percent=(v); end
  def element_for_attribute(name, namespace = nil); end
  def hPercent; end
  def hPercent=(v); end
  def h_percent; end
  def h_percent=(v); end
  def initialize(options = nil); end
  def perspective; end
  def perspective=(v); end
  def rAngAx; end
  def rAngAx=(v); end
  def r_ang_ax; end
  def r_ang_ax=(v); end
  def rotX; end
  def rotX=(v); end
  def rotY; end
  def rotY=(v); end
  def rot_x; end
  def rot_x=(v); end
  def rot_y; end
  def rot_y=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::Chart
  def add_series(options = nil); end
  def bg_color; end
  def bg_color=(v); end
  def d_lbls; end
  def display_blanks_as; end
  def display_blanks_as=(v); end
  def end_at(x = nil, y = nil); end
  def from; end
  def graphic_frame; end
  def index; end
  def initialize(frame, options = nil); end
  def legend_position; end
  def legend_position=(v); end
  def pn; end
  def relationship; end
  def series; end
  def series_type; end
  def show_legend; end
  def show_legend=(v); end
  def start_at(x = nil, y = nil); end
  def style; end
  def style=(v); end
  def title; end
  def title=(v); end
  def title_size=(v); end
  def to; end
  def to_xml_string(str = nil); end
  def vary_colors; end
  def vary_colors=(v); end
  def view3D; end
  def view3D=(v); end
  def view_3D; end
  def view_3D=(v); end
  include Axlsx::OptionsParser
end
class Axlsx::Pie3DChart < Axlsx::Chart
  def initialize(frame, options = nil); end
  def to_xml_string(str = nil); end
end
class Axlsx::Bar3DChart < Axlsx::Chart
  def axes; end
  def barDir; end
  def barDir=(v); end
  def bar_dir; end
  def bar_dir=(v); end
  def catAxis; end
  def cat_axis; end
  def gapDepth; end
  def gapDepth=(v); end
  def gapWidth; end
  def gapWidth=(v); end
  def gap_depth; end
  def gap_depth=(v); end
  def gap_width; end
  def gap_width=(v); end
  def grouping; end
  def grouping=(v); end
  def initialize(frame, options = nil); end
  def shape; end
  def shape=(v); end
  def to_xml_string(str = nil); end
  def valAxis; end
  def val_axis; end
end
class Axlsx::BarChart < Axlsx::Chart
  def axes; end
  def barDir; end
  def barDir=(v); end
  def bar_dir; end
  def bar_dir=(v); end
  def catAxis; end
  def cat_axis; end
  def gapDepth; end
  def gapDepth=(v); end
  def gapWidth; end
  def gapWidth=(v); end
  def gap_depth; end
  def gap_depth=(v); end
  def gap_width; end
  def gap_width=(v); end
  def grouping; end
  def grouping=(v); end
  def initialize(frame, options = nil); end
  def shape; end
  def shape=(v); end
  def to_xml_string(str = nil); end
  def valAxis; end
  def val_axis; end
end
class Axlsx::LineChart < Axlsx::Chart
  def axes; end
  def catAxis; end
  def cat_axis; end
  def grouping; end
  def grouping=(v); end
  def initialize(frame, options = nil); end
  def node_name; end
  def to_xml_string(str = nil); end
  def valAxis; end
  def val_axis; end
end
class Axlsx::Line3DChart < Axlsx::LineChart
  def gapDepth; end
  def gapDepth=(v); end
  def gap_depth; end
  def gap_depth=(v); end
  def initialize(frame, options = nil); end
  def serAxis; end
  def ser_axis; end
  def to_xml_string(str = nil); end
end
class Axlsx::ScatterChart < Axlsx::Chart
  def axes; end
  def initialize(frame, options = nil); end
  def scatterStyle; end
  def scatterStyle=(v); end
  def scatter_style; end
  def scatter_style=(v); end
  def to_xml_string(str = nil); end
  def xValAxis; end
  def x_val_axis; end
  def yValAxis; end
  def y_val_axis; end
  include Axlsx::OptionsParser
end
class Axlsx::BubbleChart < Axlsx::Chart
  def axes; end
  def initialize(frame, options = nil); end
  def to_xml_string(str = nil); end
  def xValAxis; end
  def x_val_axis; end
  def yValAxis; end
  def y_val_axis; end
  include Axlsx::OptionsParser
end
class Axlsx::AreaChart < Axlsx::Chart
  def axes; end
  def catAxis; end
  def cat_axis; end
  def grouping; end
  def grouping=(v); end
  def initialize(frame, options = nil); end
  def node_name; end
  def to_xml_string(str = nil); end
  def valAxis; end
  def val_axis; end
end
class Axlsx::PictureLocking
  def initialize(options = nil); end
  def noAdjustHandles; end
  def noAdjustHandles=(value); end
  def noChangeArrowheads; end
  def noChangeArrowheads=(value); end
  def noChangeAspect; end
  def noChangeAspect=(value); end
  def noChangeShapeType; end
  def noChangeShapeType=(value); end
  def noEditPoints; end
  def noEditPoints=(value); end
  def noGrp; end
  def noGrp=(value); end
  def noMove; end
  def noMove=(value); end
  def noResize; end
  def noResize=(value); end
  def noRot; end
  def noRot=(value); end
  def noSelect; end
  def noSelect=(value); end
  def to_xml_string(str = nil); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Pic
  def anchor; end
  def descr; end
  def descr=(v); end
  def end_at(x, y = nil); end
  def extname; end
  def file_name; end
  def height; end
  def height=(v); end
  def hyperlink; end
  def hyperlink=(v, options = nil); end
  def image_src; end
  def image_src=(v); end
  def index; end
  def initialize(anchor, options = nil); end
  def name; end
  def name=(v); end
  def opacity; end
  def picture_locking; end
  def pn; end
  def relationship; end
  def start_at(x, y = nil); end
  def swap_anchor(new_anchor); end
  def to_xml_string(str = nil); end
  def use_one_cell_anchor; end
  def use_two_cell_anchor; end
  def width; end
  def width=(v); end
  include Axlsx::OptionsParser
end
class Axlsx::Hyperlink
  def action; end
  def action=(arg0); end
  def endSnd; end
  def endSnd=(v); end
  def end_snd; end
  def end_snd=(v); end
  def highlightClick; end
  def highlightClick=(v); end
  def highlight_click; end
  def highlight_click=(v); end
  def history; end
  def history=(v); end
  def href; end
  def href=(arg0); end
  def initialize(parent, options = nil); end
  def invalidUrl; end
  def invalidUrl=(arg0); end
  def invalid_url; end
  def invalid_url=(arg0); end
  def relationship; end
  def tgtFrame; end
  def tgtFrame=(arg0); end
  def tgt_frame; end
  def tgt_frame=(arg0); end
  def to_xml_string(str = nil); end
  def tooltip; end
  def tooltip=(arg0); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::VmlDrawing
  def initialize(comments); end
  def pn; end
  def to_xml_string(str = nil); end
end
class Axlsx::VmlShape
  def bottom_offset; end
  def bottom_offset=(value); end
  def bottom_row; end
  def bottom_row=(value); end
  def column; end
  def column=(value); end
  def initialize(options = nil); end
  def left_column; end
  def left_column=(value); end
  def left_offset; end
  def left_offset=(value); end
  def right_column; end
  def right_column=(value); end
  def right_offset; end
  def right_offset=(value); end
  def row; end
  def row=(value); end
  def to_xml_string(str = nil); end
  def top_offset; end
  def top_offset=(value); end
  def top_row; end
  def top_row=(value); end
  def visible; end
  def visible=(value); end
  extend Axlsx::Accessors::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
end
class Axlsx::Drawing
  def add_chart(chart_type, options = nil); end
  def add_image(options = nil); end
  def anchors; end
  def charts; end
  def child_objects; end
  def hyperlinks; end
  def images; end
  def index; end
  def initialize(worksheet); end
  def pn; end
  def relationships; end
  def rels_pn; end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::SheetCalcPr
  def full_calc_on_load; end
  def full_calc_on_load=(value); end
  def initialize(options = nil); end
  def to_xml_string(str = nil); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::FilterColumn
  def apply(row, offset); end
  def col_id; end
  def col_id=(column_index); end
  def filter; end
  def hidden_button; end
  def hidden_button=(hidden); end
  def initialize(col_id, filter_type, options = nil); end
  def show_button; end
  def show_button=(show); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Filters
  def apply(cell); end
  def blank; end
  def blank=(use_blank); end
  def calendar_type; end
  def calendar_type=(calendar); end
  def date_group_items; end
  def date_group_items=(options); end
  def filter_items; end
  def filter_items=(values); end
  def initialize(options = nil); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Filters::Filter
  def initialize(value); end
  def to_xml_string(str = nil); end
  def val; end
  def val=(arg0); end
end
class Axlsx::Filters::DateGroupItem
  def date_time_grouping; end
  def date_time_grouping=(grouping); end
  def day; end
  def day=(value); end
  def hour; end
  def hour=(value); end
  def initialize(options = nil); end
  def minute; end
  def minute=(value); end
  def month; end
  def month=(value); end
  def second; end
  def second=(value); end
  def to_xml_string(str = nil); end
  def year; end
  def year=(value); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::AutoFilter
  def add_column(col_id, filter_type, options = nil); end
  def apply; end
  def columns; end
  def defined_name; end
  def initialize(worksheet); end
  def range; end
  def range=(arg0); end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::DateTimeConverter
  def self.date_to_serial(date); end
  def self.time_to_serial(time); end
end
class Axlsx::ProtectedRange
  def initialize(options = nil); end
  def name; end
  def name=(v); end
  def sqref; end
  def sqref=(v); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::ProtectedRanges < Axlsx::SimpleTypedList
  def add_range(cells); end
  def initialize(worksheet); end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::RichTextRun
  def autowidth(widtharray); end
  def b; end
  def b=(v); end
  def cell; end
  def cell=(arg0); end
  def charset; end
  def charset=(v); end
  def color; end
  def color=(v); end
  def condense; end
  def condense=(v); end
  def extend; end
  def extend=(v); end
  def family; end
  def family=(v); end
  def font_name; end
  def font_name=(v); end
  def font_size; end
  def i; end
  def i=(v); end
  def initialize(value, options = nil); end
  def outline; end
  def outline=(v); end
  def scheme; end
  def scheme=(v); end
  def set_run_style(validator, attr, value); end
  def shadow; end
  def shadow=(v); end
  def strike; end
  def strike=(v); end
  def string_width(string, font_size); end
  def style; end
  def styles; end
  def sz; end
  def sz=(v); end
  def to_xml_string(str = nil); end
  def u; end
  def u=(v); end
  def value; end
  def value=(value); end
  def vertAlign; end
  def vertAlign=(v); end
  def xml_value(value); end
  include Axlsx::OptionsParser
end
class Axlsx::RichText < Axlsx::SimpleTypedList
  def add_run(text, options = nil); end
  def autowidth; end
  def cell; end
  def cell=(cell); end
  def initialize(text = nil, options = nil); end
  def runs; end
  def to_xml_string(str = nil); end
end
class Axlsx::CellSerializer
  def self.array_formula_serialization(cell, str = nil); end
  def self.boolean(cell, str = nil); end
  def self.date(cell, str = nil); end
  def self.float(cell, str = nil); end
  def self.formula_serialization(cell, str = nil); end
  def self.inline_string_serialization(cell, str = nil); end
  def self.integer(cell, str = nil); end
  def self.iso_8601(cell, str = nil); end
  def self.numeric(cell, str = nil); end
  def self.richtext(cell, str); end
  def self.run_xml_string(cell, str = nil); end
  def self.string(cell, str = nil); end
  def self.text(cell, str); end
  def self.time(cell, str = nil); end
  def self.to_xml_string(row_index, column_index, cell, str = nil); end
  def self.value_serialization(serialization_type, serialization_value, str = nil); end
end
class Axlsx::Cell
  def autowidth; end
  def b; end
  def b=(v); end
  def cast_value(v); end
  def cell_type_from_value(v); end
  def charset; end
  def charset=(v); end
  def clean_value; end
  def color; end
  def color=(v); end
  def condense; end
  def condense=(v); end
  def contains_rich_text?; end
  def extend; end
  def extend=(v); end
  def family; end
  def family=(v); end
  def font_name; end
  def font_name=(v); end
  def font_size; end
  def formula_value; end
  def formula_value=(arg0); end
  def i; end
  def i=(v); end
  def index; end
  def initialize(row, value = nil, options = nil); end
  def is_array_formula?; end
  def is_formula?; end
  def is_text_run?; end
  def merge(target); end
  def name; end
  def name=(label); end
  def outline; end
  def outline=(v); end
  def plain_string?; end
  def pos; end
  def r; end
  def r_abs; end
  def reference(absolute = nil); end
  def row; end
  def scheme; end
  def scheme=(v); end
  def set_run_style(validator, attr, value); end
  def shadow; end
  def shadow=(v); end
  def ssti; end
  def ssti=(v); end
  def strike; end
  def strike=(v); end
  def string_width(string, font_size); end
  def style; end
  def style=(v); end
  def styles; end
  def sz; end
  def sz=(v); end
  def to_xml_string(r_index, c_index, str = nil); end
  def type; end
  def type=(v); end
  def u; end
  def u=(v); end
  def value; end
  def value=(v); end
  def vertAlign; end
  def vertAlign=(v); end
  include Axlsx::OptionsParser
end
class Axlsx::PageMargins
  def bottom; end
  def bottom=(v); end
  def footer; end
  def footer=(v); end
  def header; end
  def header=(v); end
  def initialize(options = nil); end
  def left; end
  def left=(v); end
  def right; end
  def right=(v); end
  def set(margins); end
  def to_xml_string(str = nil); end
  def top; end
  def top=(v); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::PageSetUpPr
  def auto_page_breaks; end
  def auto_page_breaks=(value); end
  def fit_to_page; end
  def fit_to_page=(value); end
  def initialize(options = nil); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::OutlinePr
  def apply_styles; end
  def apply_styles=(value); end
  def initialize(options = nil); end
  def summary_below; end
  def summary_below=(value); end
  def summary_right; end
  def summary_right=(value); end
  def to_xml_string(str = nil); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::PageSetup
  def fit_to(options = nil); end
  def fit_to_height; end
  def fit_to_height=(v); end
  def fit_to_page?; end
  def fit_to_width; end
  def fit_to_width=(v); end
  def initialize(options = nil); end
  def orientation; end
  def orientation=(v); end
  def paper_height; end
  def paper_height=(v); end
  def paper_size; end
  def paper_size=(size); end
  def paper_width; end
  def paper_width=(v); end
  def scale; end
  def scale=(v); end
  def set(options); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::HeaderFooter
  def different_first; end
  def different_first=(value); end
  def different_odd_even; end
  def different_odd_even=(value); end
  def even_footer; end
  def even_footer=(value); end
  def even_header; end
  def even_header=(value); end
  def first_footer; end
  def first_footer=(value); end
  def first_header; end
  def first_header=(value); end
  def initialize(options = nil); end
  def odd_footer; end
  def odd_footer=(value); end
  def odd_header; end
  def odd_header=(value); end
  def set(options); end
  def to_xml_string(str = nil); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::PrintOptions
  def grid_lines; end
  def grid_lines=(value); end
  def headings; end
  def headings=(value); end
  def horizontal_centered; end
  def horizontal_centered=(value); end
  def initialize(options = nil); end
  def set(options); end
  def to_xml_string(str = nil); end
  def vertical_centered; end
  def vertical_centered=(value); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Cfvo
  def gte; end
  def gte=(v); end
  def initialize(options = nil); end
  def to_xml_string(str = nil); end
  def type; end
  def type=(v); end
  def val; end
  def val=(v); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Cfvos < Axlsx::SimpleTypedList
  def initialize; end
  def to_xml_string(str = nil); end
end
class Axlsx::ColorScale
  def add(options = nil); end
  def colors; end
  def delete_at(index = nil); end
  def initialize(*cfvos); end
  def initialize_default_cfvos(user_cfvos); end
  def self.default_cfvos; end
  def self.three_tone; end
  def self.two_tone; end
  def to_xml_string(str = nil); end
  def value_objects; end
end
class Axlsx::DataBar
  def color; end
  def color=(v); end
  def initialize(options = nil, *cfvos); end
  def initialize_cfvos(cfvos); end
  def maxLength; end
  def maxLength=(v); end
  def max_length; end
  def max_length=(v); end
  def minLength; end
  def minLength=(v); end
  def min_length; end
  def min_length=(v); end
  def self.default_cfvos; end
  def showValue; end
  def showValue=(v); end
  def show_value; end
  def show_value=(v); end
  def to_xml_string(str = nil); end
  def value_objects; end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::IconSet
  def iconSet; end
  def iconSet=(v); end
  def initialize(options = nil); end
  def initialize_value_objects; end
  def percent; end
  def percent=(v); end
  def reverse; end
  def reverse=(v); end
  def showValue; end
  def showValue=(v); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::ConditionalFormatting
  def add_rule(rule); end
  def add_rules(rules); end
  def initialize(options = nil); end
  def rules; end
  def rules=(v); end
  def sqref; end
  def sqref=(v); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::ConditionalFormattingRule
  def aboveAverage; end
  def aboveAverage=(v); end
  def bottom; end
  def bottom=(v); end
  def color_scale; end
  def color_scale=(v); end
  def data_bar; end
  def data_bar=(v); end
  def dxfId; end
  def dxfId=(v); end
  def equalAverage; end
  def equalAverage=(v); end
  def formula; end
  def formula=(v); end
  def icon_set; end
  def icon_set=(v); end
  def initialize(options = nil); end
  def operator; end
  def operator=(v); end
  def percent; end
  def percent=(v); end
  def priority; end
  def priority=(v); end
  def rank; end
  def rank=(v); end
  def stdDev; end
  def stdDev=(v); end
  def stopIfTrue; end
  def stopIfTrue=(v); end
  def text; end
  def text=(v); end
  def timePeriod; end
  def timePeriod=(v); end
  def to_xml_string(str = nil); end
  def type; end
  def type=(v); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::ConditionalFormattings < Axlsx::SimpleTypedList
  def initialize(worksheet); end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::Row < Axlsx::SimpleTypedList
  def add_cell(value = nil, options = nil); end
  def array_to_cells(values, options = nil); end
  def cells; end
  def collapsed; end
  def collapsed=(value); end
  def color=(color); end
  def custom_format; end
  def custom_format=(value); end
  def custom_height; end
  def custom_height=(value); end
  def height; end
  def height=(v); end
  def hidden; end
  def hidden=(value); end
  def initialize(worksheet, values = nil, options = nil); end
  def outlineLevel; end
  def outlineLevel=(v); end
  def outline_level; end
  def outline_level=(v); end
  def ph; end
  def ph=(value); end
  def row_index; end
  def s; end
  def s=(v); end
  def style=(style); end
  def to_xml_string(r_index, str = nil); end
  def worksheet; end
  def worksheet=(v); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::SerializedAttributes
end
class Axlsx::Col
  def bestFit; end
  def best_fit; end
  def collapsed; end
  def collapsed=(v); end
  def customWidth; end
  def custom_width; end
  def hidden; end
  def hidden=(v); end
  def initialize(min, max, options = nil); end
  def max; end
  def min; end
  def outlineLevel; end
  def outlineLevel=(v); end
  def outline_level; end
  def outline_level=(v); end
  def phonetic; end
  def phonetic=(v); end
  def style; end
  def style=(v); end
  def to_xml_string(str = nil); end
  def update_width(cell, fixed_width = nil, use_autowidth = nil); end
  def width; end
  def width=(v); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Cols < Axlsx::SimpleTypedList
  def initialize(worksheet); end
  def to_xml_string(str = nil); end
end
class Axlsx::Comments < Axlsx::SimpleTypedList
  def add_comment(options = nil); end
  def authors; end
  def index; end
  def initialize(worksheet); end
  def pn; end
  def relationships; end
  def to_xml_string(str = nil); end
  def vml_drawing; end
  def worksheet; end
end
class Axlsx::Comment
  def author; end
  def author=(value); end
  def author_index; end
  def comments; end
  def initialize(comments, options = nil); end
  def initialize_vml_shape; end
  def ref; end
  def ref=(v); end
  def text; end
  def text=(value); end
  def to_xml_string(str = nil); end
  def visible; end
  def visible=(value); end
  def vml_shape; end
  extend Axlsx::Accessors::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
end
class Axlsx::MergedCells < Axlsx::SimpleTypedList
  def add(cells); end
  def initialize(worksheet); end
  def to_xml_string(str = nil); end
end
class Axlsx::SheetProtection
  def auto_filter; end
  def auto_filter=(value); end
  def create_password_hash(password); end
  def delete_columns; end
  def delete_columns=(value); end
  def delete_rows; end
  def delete_rows=(value); end
  def encode_password(password); end
  def format_cells; end
  def format_cells=(value); end
  def format_columns; end
  def format_columns=(value); end
  def format_rows; end
  def format_rows=(value); end
  def initialize(options = nil); end
  def insert_columns; end
  def insert_columns=(value); end
  def insert_hyperlinks; end
  def insert_hyperlinks=(value); end
  def insert_rows; end
  def insert_rows=(value); end
  def objects; end
  def objects=(value); end
  def password; end
  def password=(v); end
  def pivot_tables; end
  def pivot_tables=(value); end
  def salt_value; end
  def scenarios; end
  def scenarios=(value); end
  def select_locked_cells; end
  def select_locked_cells=(value); end
  def select_unlocked_cells; end
  def select_unlocked_cells=(value); end
  def sheet; end
  def sheet=(value); end
  def sort; end
  def sort=(value); end
  def to_xml_string(str = nil); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::SheetPr
  def code_name; end
  def code_name=(value); end
  def enable_format_conditions_calculation; end
  def enable_format_conditions_calculation=(value); end
  def filter_mode; end
  def filter_mode=(value); end
  def initialize(worksheet, options = nil); end
  def outline_pr; end
  def page_setup_pr; end
  def published; end
  def published=(value); end
  def sync_horizontal; end
  def sync_horizontal=(value); end
  def sync_ref; end
  def sync_ref=(value); end
  def sync_vertical; end
  def sync_vertical=(value); end
  def tab_color; end
  def tab_color=(v); end
  def to_xml_string(str = nil); end
  def transition_entry; end
  def transition_entry=(value); end
  def transition_evaluation; end
  def transition_evaluation=(value); end
  def update_properties; end
  def worksheet; end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Dimension
  def dimension_reference(cell, default); end
  def first_cell_reference; end
  def initialize(worksheet); end
  def last_cell_reference; end
  def self.default_first; end
  def self.default_last; end
  def sqref; end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::SheetData
  def initialize(worksheet); end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::WorksheetDrawing
  def add_chart(chart_type, options); end
  def add_image(options); end
  def drawing; end
  def has_drawing?; end
  def initialize(worksheet); end
  def relationship; end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::WorksheetComments
  def add_comment(options = nil); end
  def comments; end
  def drawing_rId; end
  def has_comments?; end
  def initialize(worksheet); end
  def relationships; end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::WorksheetHyperlink
  def display; end
  def display=(value); end
  def initialize(worksheet, options = nil); end
  def location; end
  def location=(value); end
  def location_or_id; end
  def ref; end
  def ref=(cell_reference); end
  def relationship; end
  def target=(target); end
  def to_xml_string(str = nil); end
  def tooltip; end
  def tooltip=(value); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::WorksheetHyperlinks < Axlsx::SimpleTypedList
  def add(options); end
  def initialize(worksheet); end
  def relationships; end
  def to_xml_string(str = nil); end
end
class Axlsx::Break
  def id; end
  def id=(value); end
  def initialize(options = nil); end
  def man; end
  def man=(value); end
  def max; end
  def max=(value); end
  def min; end
  def min=(value); end
  def pt; end
  def pt=(value); end
  def to_xml_string(str = nil); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::RowBreaks < Axlsx::SimpleTypedList
  def add_break(options); end
  def initialize; end
  def to_xml_string(str = nil); end
end
class Axlsx::ColBreaks < Axlsx::SimpleTypedList
  def add_break(options); end
  def initialize; end
  def to_xml_string(str = nil); end
end
class Axlsx::WorkbookView
  def active_tab; end
  def active_tab=(value); end
  def auto_filter_date_grouping; end
  def auto_filter_date_grouping=(value); end
  def first_sheet; end
  def first_sheet=(value); end
  def initialize(options = nil); end
  def minimized; end
  def minimized=(value); end
  def show_horizontal_scroll; end
  def show_horizontal_scroll=(value); end
  def show_sheet_tabs; end
  def show_sheet_tabs=(value); end
  def show_vertical_scroll; end
  def show_vertical_scroll=(value); end
  def tab_ratio; end
  def tab_ratio=(value); end
  def to_xml_string(str = nil); end
  def visibility; end
  def visibility=(value); end
  def window_height; end
  def window_height=(value); end
  def window_width; end
  def window_width=(value); end
  def x_window; end
  def x_window=(value); end
  def y_window; end
  def y_window=(value); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::WorkbookViews < Axlsx::SimpleTypedList
  def initialize; end
  def to_xml_string(str = nil); end
end
class Axlsx::Worksheet
  def <<(values = nil, options = nil); end
  def [](cell_def); end
  def add_autofilter_defined_name_to_workbook; end
  def add_chart(chart_type, options = nil); end
  def add_comment(options = nil); end
  def add_conditional_formatting(cells, rules); end
  def add_data_validation(cells, data_validation); end
  def add_hyperlink(options = nil); end
  def add_image(options = nil); end
  def add_page_break(cell); end
  def add_pivot_table(ref, range, options = nil); end
  def add_row(values = nil, options = nil); end
  def add_table(ref, options = nil); end
  def auto_filter; end
  def auto_filter=(v); end
  def cells; end
  def col_breaks; end
  def col_style(index, style, options = nil); end
  def cols(&block); end
  def column_info; end
  def column_widths(*widths); end
  def comments; end
  def conditional_formattings; end
  def data_validations; end
  def dimension; end
  def drawing; end
  def find_or_create_column_info(index); end
  def fit_to_page?; end
  def header_footer; end
  def hyperlinks; end
  def index; end
  def initialize(wb, options = nil); end
  def initialize_page_options(options); end
  def merge_cells(cells); end
  def merged_cells; end
  def name; end
  def name=(name); end
  def name_to_cell(name); end
  def outline(collection, range, level = nil, collapsed = nil); end
  def outline_level_columns(start_index, end_index, level = nil, collapsed = nil); end
  def outline_level_rows(start_index, end_index, level = nil, collapsed = nil); end
  def page_margins; end
  def page_setup; end
  def pivot_tables; end
  def pn; end
  def preserve_spaces; end
  def preserve_spaces=(arg0); end
  def print_options; end
  def protect_range(cells); end
  def protected_ranges; end
  def rId; end
  def range(*cell_def); end
  def relationships; end
  def rels_pn; end
  def row_breaks; end
  def row_style(index, style, options = nil); end
  def rows; end
  def serializable_parts; end
  def sheet_calc_pr; end
  def sheet_data; end
  def sheet_format_pr; end
  def sheet_pr; end
  def sheet_protection; end
  def sheet_view; end
  def state; end
  def state=(sheet_state); end
  def styles; end
  def tables; end
  def to_sheet_node_xml_string(str = nil); end
  def to_xml_string(str = nil); end
  def update_column_info(cells, widths = nil); end
  def validate_sheet_name(name); end
  def workbook; end
  def workbook=(v); end
  def worksheet_comments; end
  def worksheet_drawing; end
  def worksheet_node; end
  def xml_space; end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::SharedStringsTable
  def count; end
  def initialize(cells, xml_space = nil); end
  def resolve(cells); end
  def to_xml_string(str = nil); end
  def unique_cells; end
  def unique_count; end
  def xml_space; end
end
class Axlsx::DefinedName
  def comment; end
  def comment=(value); end
  def custom_menu; end
  def custom_menu=(value); end
  def description; end
  def description=(value); end
  def formula; end
  def formula=(value); end
  def function; end
  def function=(value); end
  def help; end
  def help=(value); end
  def hidden; end
  def hidden=(value); end
  def initialize(formula, options = nil); end
  def local_sheet_id; end
  def local_sheet_id=(value); end
  def name; end
  def name=(value); end
  def publish_to_server; end
  def publish_to_server=(value); end
  def short_cut_key; end
  def short_cut_key=(value); end
  def status_bar; end
  def status_bar=(value); end
  def to_xml_string(str = nil); end
  def vb_proceedure; end
  def vb_proceedure=(value); end
  def workbook_parameter; end
  def workbook_parameter=(value); end
  def xlm; end
  def xlm=(value); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::DefinedNames < Axlsx::SimpleTypedList
  def initialize; end
  def to_xml_string(str = nil); end
end
class Axlsx::TableStyleInfo
  def initialize(options = nil); end
  def initialize_defaults; end
  def name; end
  def name=(arg0); end
  def show_column_stripes; end
  def show_column_stripes=(value); end
  def show_first_column; end
  def show_first_column=(value); end
  def show_last_column; end
  def show_last_column=(value); end
  def show_row_stripes; end
  def show_row_stripes=(value); end
  def to_xml_string(str = nil); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Table
  def header_cells; end
  def index; end
  def initialize(ref, sheet, options = nil); end
  def name; end
  def name=(v); end
  def pn; end
  def rId; end
  def ref; end
  def style; end
  def table_style_info; end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::Tables < Axlsx::SimpleTypedList
  def initialize(worksheet); end
  def relationships; end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::PivotTableCacheDefinition
  def cache_id; end
  def index; end
  def initialize(pivot_table); end
  def pivot_table; end
  def pn; end
  def rId; end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::PivotTable
  def cache_definition; end
  def columns; end
  def columns=(v); end
  def data; end
  def data=(v); end
  def data_refs; end
  def data_sheet; end
  def data_sheet=(arg0); end
  def header_cell_refs; end
  def header_cell_values; end
  def header_cells; end
  def header_cells_count; end
  def header_index_of(value); end
  def header_range; end
  def index; end
  def initialize(ref, range, sheet, options = nil); end
  def name; end
  def no_subtotals_on_headers; end
  def no_subtotals_on_headers=(arg0); end
  def pages; end
  def pages=(v); end
  def pivot_field_for(cell_ref, subtotal = nil); end
  def pn; end
  def range; end
  def range=(v); end
  def ref; end
  def relationships; end
  def rels_pn; end
  def rows; end
  def rows=(v); end
  def sheet; end
  def style_info; end
  def style_info=(arg0); end
  def to_xml_string(str = nil); end
  include Axlsx::OptionsParser
end
class Axlsx::PivotTables < Axlsx::SimpleTypedList
  def initialize(worksheet); end
  def relationships; end
  def worksheet; end
end
class Axlsx::DataValidation
  def allowBlank; end
  def allowBlank=(v); end
  def error; end
  def error=(v); end
  def errorStyle; end
  def errorStyle=(v); end
  def errorTitle; end
  def errorTitle=(v); end
  def formula1; end
  def formula1=(v); end
  def formula2; end
  def formula2=(v); end
  def get_valid_attributes; end
  def initialize(options = nil); end
  def operator; end
  def operator=(v); end
  def prompt; end
  def prompt=(v); end
  def promptTitle; end
  def promptTitle=(v); end
  def showDropDown; end
  def showDropDown=(v); end
  def showErrorMessage; end
  def showErrorMessage=(v); end
  def showInputMessage; end
  def showInputMessage=(v); end
  def sqref; end
  def sqref=(v); end
  def to_xml_string(str = nil); end
  def type; end
  def type=(v); end
  include Axlsx::OptionsParser
end
class Axlsx::DataValidations < Axlsx::SimpleTypedList
  def initialize(worksheet); end
  def to_xml_string(str = nil); end
  def worksheet; end
end
class Axlsx::SheetView
  def add_selection(pane, options = nil); end
  def color_id; end
  def color_id=(v); end
  def default_grid_color; end
  def default_grid_color=(value); end
  def initialize(options = nil); end
  def pane; end
  def right_to_left; end
  def right_to_left=(value); end
  def selections; end
  def show_formulas; end
  def show_formulas=(value); end
  def show_grid_lines; end
  def show_grid_lines=(value); end
  def show_outline_symbols; end
  def show_outline_symbols=(value); end
  def show_row_col_headers; end
  def show_row_col_headers=(value); end
  def show_ruler; end
  def show_ruler=(value); end
  def show_white_space; end
  def show_white_space=(value); end
  def show_zeros; end
  def show_zeros=(value); end
  def tab_selected; end
  def tab_selected=(value); end
  def to_xml_string(str = nil); end
  def top_left_cell; end
  def top_left_cell=(v); end
  def view; end
  def view=(v); end
  def window_protection; end
  def window_protection=(value); end
  def workbook_view_id; end
  def workbook_view_id=(v); end
  def zoom_scale; end
  def zoom_scale=(v); end
  def zoom_scale_normal; end
  def zoom_scale_normal=(v); end
  def zoom_scale_page_layout_view; end
  def zoom_scale_page_layout_view=(v); end
  def zoom_scale_sheet_layout_view; end
  def zoom_scale_sheet_layout_view=(v); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::SheetFormatPr
  def base_col_width; end
  def base_col_width=(value); end
  def custom_height; end
  def custom_height=(value); end
  def default_col_width; end
  def default_col_width=(value); end
  def default_row_height; end
  def default_row_height=(value); end
  def initialize(options = nil); end
  def outline_level_col; end
  def outline_level_col=(value); end
  def outline_level_row; end
  def outline_level_row=(value); end
  def set_defaults; end
  def thick_bottom; end
  def thick_bottom=(value); end
  def thick_top; end
  def thick_top=(value); end
  def to_xml_string(str = nil); end
  def zero_height; end
  def zero_height=(value); end
  extend Axlsx::Accessors::ClassMethods
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::Accessors
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Pane
  def active_pane; end
  def active_pane=(v); end
  def finalize; end
  def initialize(options = nil); end
  def state; end
  def state=(v); end
  def to_xml_string(str = nil); end
  def top_left_cell; end
  def top_left_cell=(v); end
  def x_split; end
  def x_split=(v); end
  def y_split; end
  def y_split=(v); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Selection
  def active_cell; end
  def active_cell=(v); end
  def active_cell_id; end
  def active_cell_id=(v); end
  def initialize(options = nil); end
  def pane; end
  def pane=(v); end
  def sqref; end
  def sqref=(v); end
  def to_xml_string(str = nil); end
  extend Axlsx::SerializedAttributes::ClassMethods
  include Axlsx::OptionsParser
  include Axlsx::SerializedAttributes
end
class Axlsx::Workbook
  def [](cell_def); end
  def add_defined_name(formula, options); end
  def add_view(options = nil); end
  def add_worksheet(options = nil); end
  def charts; end
  def comments; end
  def date1904; end
  def date1904=(v); end
  def defined_names; end
  def drawings; end
  def images; end
  def initialize(options = nil); end
  def insert_worksheet(index = nil, options = nil); end
  def is_reversed; end
  def is_reversed=(v); end
  def pivot_tables; end
  def relationships; end
  def self.date1904; end
  def self.date1904=(v); end
  def shared_strings; end
  def sheet_by_name(name); end
  def styles; end
  def tables; end
  def to_xml_string(str = nil); end
  def use_autowidth; end
  def use_autowidth=(v = nil); end
  def use_shared_strings; end
  def use_shared_strings=(v); end
  def views; end
  def worksheets; end
  def xml_space; end
  def xml_space=(space); end
end
class Axlsx::Package
  def app; end
  def base_content_types; end
  def content_types; end
  def core; end
  def encrypt(file_name, password); end
  def initialize(options = nil); end
  def parts; end
  def relationships; end
  def serialize(output, confirm_valid = nil); end
  def to_stream(confirm_valid = nil); end
  def use_autowidth=(v); end
  def use_shared_strings; end
  def use_shared_strings=(v); end
  def validate; end
  def validate_single_doc(schema, doc); end
  def workbook; end
  def workbook=(workbook); end
  def write_parts(zip); end
  def zip_entry_for_part(part); end
  include Axlsx::OptionsParser
end

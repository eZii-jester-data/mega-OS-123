# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/docsplit/all/docsplit.rbi
#
# docsplit-0.7.6
module Docsplit
  def self.clean_text(text); end
  def self.extract_author(pdfs, opts = nil); end
  def self.extract_creator(pdfs, opts = nil); end
  def self.extract_date(pdfs, opts = nil); end
  def self.extract_images(pdfs, opts = nil); end
  def self.extract_info(pdfs, opts = nil); end
  def self.extract_keywords(pdfs, opts = nil); end
  def self.extract_length(pdfs, opts = nil); end
  def self.extract_pages(pdfs, opts = nil); end
  def self.extract_pdf(docs, opts = nil); end
  def self.extract_producer(pdfs, opts = nil); end
  def self.extract_subject(pdfs, opts = nil); end
  def self.extract_text(pdfs, opts = nil); end
  def self.extract_title(pdfs, opts = nil); end
  def self.normalize_value(value); end
  extend Docsplit::TransparentPDFs
end
class Docsplit::ImageExtractor
  def convert(pdf, size, format, previous = nil); end
  def directory_for(size); end
  def extract(pdfs, options); end
  def extract_options(options); end
  def page_list(pages); end
  def quality_arg(format); end
  def resize_arg(size); end
end
module Docsplit::TransparentPDFs
  def ensure_pdfs(docs); end
  def is_pdf?(doc); end
end
class Docsplit::TextExtractor
  def clean_text(file); end
  def contains_text?(pdf); end
  def extract(pdfs, opts); end
  def extract_from_ocr(pdf, pages); end
  def extract_from_pdf(pdf, pages); end
  def extract_full(pdf); end
  def extract_options(options); end
  def extract_page(pdf, page); end
  def initialize; end
  def run(command); end
end
class Docsplit::PageExtractor
  def extract(pdfs, opts); end
  def extract_options(options); end
end
class Docsplit::PdfExtractor
  def extract(docs, opts); end
  def libre_office?; end
  def linux?; end
  def office_executable; end
  def office_path; end
  def office_search_paths; end
  def open_office?; end
  def osx?; end
  def run_jod(command, pdfs, opts, return_output = nil); end
  def version_string; end
  def windows?; end
end
class Docsplit::PdfExtractor::OfficeNotFound < StandardError
end
class Docsplit::InfoExtractor
  def extract(key, pdfs, opts); end
  def extract_all(pdfs, opts); end
end
class Docsplit::TextCleaner
  def clean(text); end
  def garbage(w); end
end
class Docsplit::ExtractionFailed < StandardError
end

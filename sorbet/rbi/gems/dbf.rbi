# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dbf/all/dbf.rbi
#
# dbf-3.1.3
module DBF
end
module DBF::Schema
  def activerecord_schema(_table_only = nil); end
  def activerecord_schema_definition(column); end
  def json_schema(_table_only = nil); end
  def number_data_type(column); end
  def schema(format = nil, table_only = nil); end
  def schema_data_type(column, format = nil); end
  def schema_name(format); end
  def sequel_schema(table_only = nil); end
  def sequel_schema_definition(column); end
  def string_data_format(format, column); end
end
class DBF::Record
  def ==(other); end
  def [](name); end
  def attribute_map; end
  def attributes; end
  def get_data(column); end
  def get_memo(column); end
  def init_attribute(column); end
  def initialize(data, columns, version, memo); end
  def match?(options); end
  def memo_start_block(column); end
  def method_missing(method, *args); end
  def respond_to_missing?(method, *arg1); end
  def to_a; end
  def underscored_column_names; end
end
module DBF::ColumnType
end
class DBF::ColumnType::Base
  def decimal; end
  def encoding; end
  def initialize(decimal, encoding); end
end
class DBF::ColumnType::Nil < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::Number < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::Currency < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::SignedLong < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::Float < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::Double < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::Boolean < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::Date < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::DateTime < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::Memo < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::General < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::ColumnType::String < DBF::ColumnType::Base
  def type_cast(value); end
end
class DBF::Column
  def clean(value); end
  def decimal; end
  def encode(value, strip_output = nil); end
  def encode_string(string); end
  def encoding_args; end
  def initialize(table, name, type, length, decimal); end
  def length; end
  def memo?; end
  def name; end
  def table; end
  def to_hash; end
  def type; end
  def type_cast(value); end
  def type_cast_class; end
  def underscored_name; end
  def validate_length; end
  def validate_name; end
end
class DBF::Column::LengthError < StandardError
end
class DBF::Column::NameError < StandardError
end
class DBF::Header
  def encoding; end
  def encoding_key; end
  def header_length; end
  def initialize(data); end
  def record_count; end
  def record_length; end
  def unpack_header; end
  def version; end
end
class DBF::FileNotFoundError < StandardError
end
class DBF::Table
  def build_columns; end
  def close; end
  def closed?; end
  def column_names; end
  def columns; end
  def deleted_record?; end
  def each; end
  def encoding; end
  def encoding=(arg0); end
  def end_of_record?; end
  def filename; end
  def find(command, options = nil, &block); end
  def find_all(options); end
  def find_first(options); end
  def foxpro?; end
  def has_memo_file?; end
  def header; end
  def initialize(data, memo = nil, encoding = nil); end
  def memo_class; end
  def memo_search_path(io); end
  def name; end
  def name=(arg0); end
  def open_data(data); end
  def open_memo(data, memo = nil); end
  def record(index); end
  def record_count; end
  def row(index); end
  def safe_seek; end
  def seek(offset); end
  def seek_to_record(index); end
  def to_csv(path = nil); end
  def version; end
  def version_description; end
  include DBF::Schema
  include Enumerable
end
module DBF::Memo
end
class DBF::Memo::Base
  def block_content_size; end
  def block_size; end
  def close; end
  def closed?; end
  def content_size(memo_size); end
  def get(start_block); end
  def initialize(data, version); end
  def offset(start_block); end
  def self.open(filename, version); end
end
class DBF::Memo::Dbase3 < DBF::Memo::Base
  def build_memo(start_block); end
end
class DBF::Memo::Dbase4 < DBF::Memo::Base
  def build_memo(start_block); end
end
class DBF::Memo::Foxpro < DBF::Memo::Base
  def block_size; end
  def build_memo(start_block); end
end
module DBF::Database
end
class DBF::Database::Foxpro
  def extract_dbc_data; end
  def initialize(path); end
  def method_missing(method, *args); end
  def process_field(record, data); end
  def process_table(record, data); end
  def respond_to_missing?(method, *arg1); end
  def table(name); end
  def table_field_hash(name); end
  def table_names; end
  def table_path(name); end
end
class DBF::Database::Table < DBF::Table
  def build_columns; end
  def long_names; end
  def long_names=(arg0); end
end

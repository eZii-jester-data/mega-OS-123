# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/brainz/all/brainz.rbi
#
# brainz-0.2.0
module Brainz
end
module Brainz::Algorithms
end
module Brainz::Algorithms::Backpropagation
  def fix_weights(targets); end
  def initialize_network; end
  def update(input); end
end
class Brainz::Synapse
  def adjust(diff); end
  def change; end
  def change=(arg0); end
  def from; end
  def initialize(from, to); end
  def self.link(from, to); end
  def to; end
  def weight; end
end
class Brainz::Neuron
  def activate; end
  def activation; end
  def activation=(arg0); end
  def add(value); end
  def adjust_weights; end
  def axon_synapses; end
  def calculate_delta(target = nil); end
  def d_sigmoid(y); end
  def delta; end
  def delta=(arg0); end
  def dendrites; end
  def fi(x); end
  def initialize(layer); end
  def layer; end
  def learning_rate; end
  def momentum; end
  def output_change; end
  def output_change=(arg0); end
  def reset; end
  def send_signals; end
  def sum; end
end
class Brainz::Layer
  def activate; end
  def adjust_weights; end
  def back_link(layer); end
  def calculate_deltas; end
  def calculate_mse(targets); end
  def initialize(size, network); end
  def learning_rate; end
  def link_to(layer); end
  def momentum; end
  def mse; end
  def mse=(arg0); end
  def network; end
  def neurons; end
  def next_layer; end
  def prev_layer; end
  def reset; end
  def update(*values); end
  def update_forward; end
end
class Brainz::Network
  def calculate_deltas(targets); end
  def fix_weights(targets); end
  def hidden; end
  def initialize(input_size, hidden_sizes, output_size, options = nil); end
  def input; end
  def join_layers; end
  def learning_rate; end
  def learning_rate=(arg0); end
  def momentum; end
  def momentum=(arg0); end
  def mse; end
  def mse=(arg0); end
  def output; end
  def training_algorithm; end
  def training_algorithm=(arg0); end
  def update(inputs); end
end
class Brainz::Brainz
  def error; end
  def evaluate(*args); end
  def explain(*args); end
  def format_input(*args); end
  def format_output(*args); end
  def guess(*args); end
  def initialize(algorithm = nil); end
  def input; end
  def input=(arg0); end
  def input_order; end
  def input_order=(arg0); end
  def is(*args); end
  def last_iterations; end
  def learning_cycle; end
  def learning_options(options); end
  def learning_rate; end
  def learning_rate=(arg0); end
  def learning_time; end
  def max_iterations; end
  def max_iterations=(arg0); end
  def momentum; end
  def momentum=(arg0); end
  def network; end
  def num_hidden; end
  def num_hidden=(arg0); end
  def num_input; end
  def num_output; end
  def output_act; end
  def output_order; end
  def output_order=(arg0); end
  def save(file_name); end
  def self.current; end
  def self.load(file_name); end
  def teach(options = nil); end
  def that(*args); end
  def wanted_error; end
  def wanted_error=(arg0); end
end

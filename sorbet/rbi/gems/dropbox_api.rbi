# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dropbox_api/all/dropbox_api.rbi
#
# dropbox_api-0.1.17
module DropboxApi
end
class DropboxApi::Authenticator < OAuth2::Client
  def authorize_url(*args, &block); end
  def get_token(*args, &block); end
  def initialize(client_id, client_secret); end
  extend Forwardable
end
module DropboxApi::MiddleWare
end
class DropboxApi::MiddleWare::DecodeResult < Faraday::Middleware
  def call(rq_env); end
  def decode(json); end
end
class DropboxApi::MiddleWare::Stack
  def adapter=(value); end
  def append(&block); end
  def apply(connection); end
  def initialize; end
  def prepend(&block); end
end
module DropboxApi::Metadata
end
class DropboxApi::Metadata::Field
  def cast(object); end
  def force_cast(object); end
  def initialize(type, options = nil); end
end
class DropboxApi::Metadata::Base
  def []=(name, value); end
  def initialize(metadata); end
  def self.field(name, type, *options); end
  def self.fields; end
  def serialized_field(field_name); end
  def to_hash; end
end
class DropboxApi::Metadata::Tag < DropboxApi::Metadata::Base
  def self.new(data); end
  def self.validate(value); end
end
class DropboxApi::Metadata::AccessLevel < DropboxApi::Metadata::Tag
  def self.valid_values; end
end
class DropboxApi::Metadata::MemberAction < DropboxApi::Metadata::Tag
  def self.valid_values; end
end
class DropboxApi::Metadata::Dimensions < DropboxApi::Metadata::Base
  def height; end
  def width; end
end
class DropboxApi::Metadata::Location < DropboxApi::Metadata::Base
  def latitude; end
  def longitude; end
end
class DropboxApi::Metadata::PhotoMetadata < DropboxApi::Metadata::Base
  def dimensions; end
  def location; end
  def time_taken; end
end
class DropboxApi::Metadata::VideoMetadata < DropboxApi::Metadata::Base
  def dimensions; end
  def duration; end
  def location; end
  def time_taken; end
end
class DropboxApi::Metadata::MediaInfo < DropboxApi::Metadata::Base
  def self.class_for(tag); end
  def self.new(data); end
end
class DropboxApi::Metadata::MediaMetadata < DropboxApi::Metadata::Base
  def self.class_for(tag); end
  def self.new(data); end
end
class DropboxApi::Metadata::Member < DropboxApi::Metadata::Base
  def hash_from_dropbox_id(dropbox_id); end
  def hash_from_email(email); end
  def hash_from_email_or_dropbox_id(email_or_id); end
  def initialize(member); end
  def to_hash; end
end
class DropboxApi::Metadata::AddMember < DropboxApi::Metadata::Base
  def access_level; end
  def member; end
  def self.build_from_string(member, access_level = nil); end
end
class DropboxApi::Metadata::Name < DropboxApi::Metadata::Base
  def display_name; end
  def familiar_name; end
  def given_name; end
  def surname; end
end
class DropboxApi::Metadata::FileMemberAction < DropboxApi::Metadata::Base
  def self.class_for(tag); end
  def self.new(data); end
end
class DropboxApi::Metadata::MemberActionList < Array
  def initialize(list); end
end
class DropboxApi::Metadata::MemberPermission < DropboxApi::Metadata::Base
  def action; end
  def allow; end
  def reason; end
end
class DropboxApi::Metadata::MemberPermissionList < Array
  def initialize(list); end
end
class DropboxApi::Metadata::AddFileMemberResult < DropboxApi::Metadata::Base
  def member; end
  def result; end
end
class DropboxApi::Metadata::ParentFolderAccessInfo < DropboxApi::Metadata::Base
  def folder_name; end
  def permissions; end
  def shared_folder_id; end
end
class DropboxApi::Metadata::BasicAccount < DropboxApi::Metadata::Base
  def account_id; end
  def disabled; end
  def email; end
  def email_verified; end
  def is_teammate; end
  def name; end
  def profile_photo_url; end
  def team_member_id; end
end
class DropboxApi::Metadata::LinkPermissions < DropboxApi::Metadata::Base
  def can_revoke; end
  def requested_visibility; end
  def resolved_visibility; end
  def revoke_failure_reason; end
end
class DropboxApi::Metadata::Team < DropboxApi::Metadata::Base
  def id; end
  def name; end
end
class DropboxApi::Metadata::TeamMemberInfo < DropboxApi::Metadata::Base
  def display_name; end
  def member_id; end
  def team_info; end
end
class DropboxApi::Metadata::File < DropboxApi::Metadata::Base
  def client_modified; end
  def content_hash; end
  def has_explicit_shared_members; end
  def id; end
  def media_info; end
  def name; end
  def path_display; end
  def path_lower; end
  def rev; end
  def server_modified; end
  def size; end
  def to_hash; end
end
class DropboxApi::Metadata::FolderSharingInfo < DropboxApi::Metadata::Base
  def parent_shared_folder_id; end
  def read_only; end
  def shared_folder_id; end
end
class DropboxApi::Metadata::Folder < DropboxApi::Metadata::Base
  def id; end
  def name; end
  def path_display; end
  def path_lower; end
  def sharing_info; end
  def to_hash; end
end
class DropboxApi::Metadata::Deleted < DropboxApi::Metadata::Base
  def name; end
  def path_display; end
  def path_lower; end
end
class DropboxApi::Metadata::Resource
  def self.class_for(tag); end
  def self.new(data); end
end
class DropboxApi::Metadata::SharedFolderPolicy < DropboxApi::Metadata::Base
  def acl_update_policy; end
  def shared_link_policy; end
end
class DropboxApi::Metadata::SharedFolder < DropboxApi::Metadata::Base
  def access_type; end
  def is_team_folder; end
  def name; end
  def path_lower; end
  def policy; end
  def shared_folder_id; end
  def time_invited; end
end
class DropboxApi::Metadata::FileLinkMetadata < DropboxApi::Metadata::Base
  def client_modified; end
  def content_owner_team_info; end
  def expires; end
  def id; end
  def link_permissions; end
  def name; end
  def path_lower; end
  def rev; end
  def server_modified; end
  def size; end
  def team_member_info; end
  def url; end
end
class DropboxApi::Metadata::FolderLinkMetadata < DropboxApi::Metadata::Base
  def content_owner_team_info; end
  def expires; end
  def id; end
  def link_permissions; end
  def name; end
  def path_lower; end
  def team_member_info; end
  def url; end
end
class DropboxApi::Metadata::SharedLinkMetadata
  def self.class_for(tag); end
  def self.new(data); end
end
class DropboxApi::Metadata::SharedLink < DropboxApi::Metadata::Base
  def check_validity; end
  def initialize(param); end
  def to_hash; end
  def valid_keys; end
end
class DropboxApi::Metadata::SpaceAllocation < DropboxApi::Metadata::Base
  def allocated; end
end
class DropboxApi::Metadata::SpaceUsage < DropboxApi::Metadata::Base
  def allocation; end
  def used; end
end
class DropboxApi::Metadata::UploadSessionCursor < DropboxApi::Metadata::Base
  def offset; end
  def offset=(n); end
  def session_id; end
end
class DropboxApi::Metadata::WriteMode < DropboxApi::Metadata::Base
  def check_validity; end
  def initialize(write_mode, options = nil); end
  def to_hash; end
  def valid_mode?(value); end
end
class DropboxApi::Metadata::CommitInfo < DropboxApi::Metadata::Base
  def autorename; end
  def client_modified; end
  def mode; end
  def mute; end
  def path; end
  def self.build_client_modified(client_modified); end
  def self.build_from_options(options); end
  def self.build_write_mode(write_mode); end
end
class DropboxApi::Metadata::ThumbnailBatchResultEntry
  def self.new(data); end
end
class DropboxApi::Metadata::ThumbnailBatchResultData < DropboxApi::Metadata::Base
  def metadata; end
  def thumbnail; end
end
class DropboxApi::Metadata::FileRequest < DropboxApi::Metadata::Base
  def created; end
  def destination; end
  def file_count; end
  def id; end
  def is_open; end
  def title; end
  def url; end
end
module DropboxApi::Errors
end
class DropboxApi::Errors::HttpError < StandardError
end
class DropboxApi::Errors::BasicError < StandardError
  def initialize(message, metadata); end
  def self.build(message, metadata); end
  def self.find_subtype(metadata); end
end
class DropboxApi::Errors::BadPathError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CantCopySharedFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CantMoveFolderIntoItselfError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CantNestSharedFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CantShareOutsideTeamError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ContainsSharedFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ConversionError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CursorClosedError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CursorNotClosedError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::DisallowedNameError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::DisallowedSharedLinkPolicyError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::DownloadFailedError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::EmailUnverifiedError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::FileAncestorConflictError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::FileConflictError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::FolderConflictError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::GroupDeletedError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::GroupNotOnTeamError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InProgressError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InsideAppFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InsideOsxPackageError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InsidePublicFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InsideSharedFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InsufficientPlanError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InsufficientSpaceError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InternalError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidCommentError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidCopyReferenceError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidCursorError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidDropboxIdError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidEmailError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidFileError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidIdError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidMemberError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidPathError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidRevisionError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidSettingsError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::InvalidUrlError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::IsAppFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::IsFileError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::IsFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::IsOsxPackageError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::IsPublicFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::MalformedPathError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::NoAccountError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::NoPermissionError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::NoWritePermissionError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::NotAMemberError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::NotFileError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::NotFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::NotFoundError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::RateLimitError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::RestrictedContentError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SharedLinkAccessDeniedError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SharedLinkAlreadyExistsError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SharedLinkNotFoundError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SharedLinkMalformedError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::TeamFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::TeamPolicyDisallowsMemberPolicyError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::TooManyFilesError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::TooManyMembersError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::TooManyPendingInvitesError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::TooManySharedFolderTargetsError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UnmountedError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UnsupportedContentError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UnsupportedExtensionError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UnsupportedImageError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UnsupportedLinkTypeError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UnverifiedDropboxId < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::AlreadySharedError < DropboxApi::Errors::BasicError
  def shared_folder; end
end
class DropboxApi::Errors::LookupError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::WriteConflictError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::WriteError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::RelocationError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::RestoreError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::RevokeSharedLinkError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SaveUrlError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SearchError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SettingsError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SharePathError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ShareFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::GetCopyReferenceError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SaveCopyReferenceError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CreateFolderBatchError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CreateFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CreateSharedLinkWithSettingsError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::DownloadError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SharingFileAccessError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SharingUserError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::FileMemberActionError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::GetMetadataError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ListFolderError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ListRevisionsError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ListSharedLinksError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ListFolderContinueError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ListFolderLongpollError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::PreviewError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::AddMemberSelectorError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SharedFolderAccessError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::SharedLinkError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UploadSessionOffsetError < DropboxApi::Errors::BasicError
  def initialize(message, metadata); end
end
class DropboxApi::Errors::UploadSessionLookupError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UploadSessionFinishError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UploadWriteFailedError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UploadError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::UnshareFileError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::PollError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::AddFileMemberError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::AddFolderMemberError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::TooManyRequestsError < DropboxApi::Errors::BasicError
  def retry_after; end
  def retry_after=(arg0); end
  def self.build(message, metadata); end
end
class DropboxApi::Errors::TooManyWriteOperationsError < DropboxApi::Errors::TooManyRequestsError
end
class DropboxApi::Errors::RelocationBatchEntryError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::GetAccountError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ThumbnailBatchError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::ThumbnailError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::CreateFileRequestError < DropboxApi::Errors::BasicError
end
class DropboxApi::Errors::DeleteError < DropboxApi::Errors::BasicError
end
class DropboxApi::ResultBuilder
  def build(result_class); end
  def build_error(error_type); end
  def error; end
  def error_summary; end
  def has_error?; end
  def initialize(response_data); end
  def success?; end
end
module DropboxApi::Results
end
class DropboxApi::Results::Base
  def initialize(result_data); end
end
class DropboxApi::Results::BasicAccountBatch < Array
  def initialize(accounts); end
end
class DropboxApi::Results::CreateFolderBatchResult < DropboxApi::Results::Base
  def self.new(result_data); end
end
class DropboxApi::Results::CreateFolderBatchResultEntry < DropboxApi::Results::Base
  def self.new(result_data); end
end
class DropboxApi::Results::RelocationBatchResult < DropboxApi::Results::Base
  def self.new(result_data); end
end
class DropboxApi::Results::RelocationBatchResultEntry < DropboxApi::Results::Base
  def self.new(result_data); end
end
class DropboxApi::Results::CopyBatchResult < DropboxApi::Results::Base
  def self.new(result_data); end
end
class DropboxApi::Results::GetCopyReferenceResult < DropboxApi::Results::Base
  def copy_reference; end
  def expires; end
  def resource; end
end
class DropboxApi::Results::SaveCopyReferenceResult < DropboxApi::Results::Base
  def resource; end
end
class DropboxApi::Results::AddFileMemberResultList < Array
  def initialize(members); end
end
class DropboxApi::Results::GetTemporaryLinkResult < DropboxApi::Results::Base
  def file; end
  def link; end
end
class DropboxApi::Results::GetThumbnailBatchResult < DropboxApi::Results::Base
  def entries; end
end
class DropboxApi::Results::ListFolderResult < DropboxApi::Results::Base
  def cursor; end
  def entries; end
  def has_more?; end
end
class DropboxApi::Results::ListRevisionsResult < DropboxApi::Results::Base
  def entries; end
  def is_deleted?; end
end
class DropboxApi::Results::ListFolderLongpollResult < DropboxApi::Results::Base
  def backoff; end
  def changes; end
end
class DropboxApi::Results::ListFolderGetLatestCursorResult < DropboxApi::Results::Base
  def cursor; end
end
class DropboxApi::Results::ListSharedLinksResult < DropboxApi::Results::Base
  def cursor; end
  def has_more?; end
  def links; end
end
class DropboxApi::Results::SaveUrlResult < DropboxApi::Results::Base
  def async_job_id; end
end
class DropboxApi::Results::SaveUrlJobStatus < DropboxApi::Results::Base
  def self.new(result_data); end
end
module DropboxApi::Results::Search
end
class DropboxApi::Results::Search::Match
  def initialize(data); end
  def match_type; end
  def resource; end
end
class DropboxApi::Results::SearchResult < DropboxApi::Results::Base
  def has_more?; end
  def matches; end
  def start; end
end
class DropboxApi::Results::ShareFolderLaunch
  def self.new(result_data); end
end
class DropboxApi::Results::SharedFileMembers < DropboxApi::Results::Base
  def cursor; end
  def groups; end
  def invitees; end
  def users; end
end
class DropboxApi::Results::SharedFolderMembers < DropboxApi::Results::Base
  def cursor; end
  def groups; end
  def invitees; end
  def users; end
end
class DropboxApi::Results::VoidResult < DropboxApi::Results::Base
end
class DropboxApi::Results::UploadSessionStart < DropboxApi::Results::Base
  def session_id; end
end
class DropboxApi::Results::DeleteBatchResultEntry < DropboxApi::Results::Base
  def self.new(result_data); end
end
class DropboxApi::Results::DeleteBatchResult < DropboxApi::Results::Base
  def self.new(result_data); end
end
class DropboxApi::Client
  def add_file_member(*args, &block); end
  def add_folder_member(*args, &block); end
  def copy(*args, &block); end
  def copy_batch(*args, &block); end
  def copy_batch_check(*args, &block); end
  def copy_reference_get(*args, &block); end
  def copy_reference_save(*args, &block); end
  def create_file_request(*args, &block); end
  def create_folder(*args, &block); end
  def create_folder_batch(*args, &block); end
  def create_folder_batch_check(*args, &block); end
  def create_shared_link_with_settings(*args, &block); end
  def delete(*args, &block); end
  def delete_batch(*args, &block); end
  def delete_batch_check(*args, &block); end
  def download(*args, &block); end
  def get_account(*args, &block); end
  def get_account_batch(*args, &block); end
  def get_current_account(*args, &block); end
  def get_metadata(*args, &block); end
  def get_preview(*args, &block); end
  def get_shared_link_metadata(*args, &block); end
  def get_space_usage(*args, &block); end
  def get_temporary_link(*args, &block); end
  def get_thumbnail(*args, &block); end
  def get_thumbnail_batch(*args, &block); end
  def initialize(oauth_bearer = nil); end
  def list_file_members(*args, &block); end
  def list_folder(*args, &block); end
  def list_folder_continue(*args, &block); end
  def list_folder_get_latest_cursor(*args, &block); end
  def list_folder_longpoll(*args, &block); end
  def list_folder_members(*args, &block); end
  def list_revisions(*args, &block); end
  def list_shared_links(*args, &block); end
  def middleware; end
  def move(*args, &block); end
  def permanently_delete(*args, &block); end
  def restore(*args, &block); end
  def revoke_shared_link(*args, &block); end
  def save_url(*args, &block); end
  def save_url_check_job_status(*args, &block); end
  def search(*args, &block); end
  def self.add_endpoint(name, endpoint); end
  def share_folder(*args, &block); end
  def token_revoke(*args, &block); end
  def unshare_file(*args, &block); end
  def upload(*args, &block); end
  def upload_by_chunks(path, content, options = nil); end
  def upload_session_append_v2(*args, &block); end
  def upload_session_finish(*args, &block); end
  def upload_session_start(*args, &block); end
end
class DropboxApi::ConnectionBuilder
  def build(url); end
  def initialize(oauth_bearer); end
  def middleware; end
end
module DropboxApi::OptionsValidator
  def validate_options(valid_option_keys, options); end
end
module DropboxApi::Endpoints
end
class DropboxApi::Endpoints::Base
  def build_result(api_result); end
  def get_response(*args); end
  def perform_request(params); end
  def process_response(raw_response); end
  def run_request(body, headers); end
  def self.add_endpoint(name, &block); end
end
class DropboxApi::Endpoints::Rpc < DropboxApi::Endpoints::Base
  def build_request(params); end
  def initialize(builder); end
  def request_body(params); end
end
class DropboxApi::Endpoints::RpcContent < DropboxApi::Endpoints::Rpc
  def initialize(builder); end
end
class DropboxApi::Endpoints::RpcNotify < DropboxApi::Endpoints::Rpc
  def initialize(builder); end
end
class DropboxApi::Endpoints::ContentDownload < DropboxApi::Endpoints::Base
  def build_request(params); end
  def initialize(builder); end
  def perform_request(params); end
end
class DropboxApi::Endpoints::ContentUpload < DropboxApi::Endpoints::Base
  def build_request(params, body); end
  def get_content_length(content); end
  def initialize(builder); end
  def perform_request(params, content); end
end
module DropboxApi::Endpoints::Auth
end
class DropboxApi::Endpoints::Auth::TokenRevoke < DropboxApi::Endpoints::Rpc
  def token_revoke; end
end
module DropboxApi::Endpoints::Files
end
class DropboxApi::Endpoints::Files::Copy < DropboxApi::Endpoints::Rpc
  def copy(from, to); end
end
class DropboxApi::Endpoints::Files::CopyBatchCheck < DropboxApi::Endpoints::Rpc
  def copy_batch_check(async_job_id); end
end
class DropboxApi::Endpoints::Files::CopyBatch < DropboxApi::Endpoints::Rpc
  def copy_batch(entries, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::CopyReferenceGet < DropboxApi::Endpoints::Rpc
  def copy_reference_get(path); end
end
class DropboxApi::Endpoints::Files::CopyReferenceSave < DropboxApi::Endpoints::Rpc
  def copy_reference_save(copy_reference, path); end
end
class DropboxApi::Endpoints::Files::CreateFolder < DropboxApi::Endpoints::Rpc
  def create_folder(path); end
end
class DropboxApi::Endpoints::Files::CreateFolderBatch < DropboxApi::Endpoints::Rpc
  def create_folder_batch(paths, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::Delete < DropboxApi::Endpoints::Rpc
  def delete(path, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::Download < DropboxApi::Endpoints::ContentDownload
  def download(path, &block); end
end
class DropboxApi::Endpoints::Files::GetMetadata < DropboxApi::Endpoints::Rpc
  def get_metadata(path, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::GetPreview < DropboxApi::Endpoints::ContentDownload
  def get_preview(path, &block); end
end
class DropboxApi::Endpoints::Files::GetTemporaryLink < DropboxApi::Endpoints::Rpc
  def get_temporary_link(path); end
end
class DropboxApi::Endpoints::Files::GetThumbnail < DropboxApi::Endpoints::ContentDownload
  def get_thumbnail(path, options = nil, &block); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::GetThumbnailBatch < DropboxApi::Endpoints::RpcContent
  def build_entries_params(paths, options); end
  def get_thumbnail_batch(paths, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::ListFolder < DropboxApi::Endpoints::Rpc
  def build_shared_link_param(shared_link_param); end
  def list_folder(path, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::ListFolderContinue < DropboxApi::Endpoints::Rpc
  def list_folder_continue(cursor); end
end
class DropboxApi::Endpoints::Files::ListFolderLongpoll < DropboxApi::Endpoints::RpcNotify
  def list_folder_longpoll(cursor, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::ListFolderGetLatestCursor < DropboxApi::Endpoints::Rpc
  def list_folder_get_latest_cursor(options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::ListRevisions < DropboxApi::Endpoints::Rpc
  def list_revisions(path, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::Move < DropboxApi::Endpoints::Rpc
  def move(from, to, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::PermanentlyDelete < DropboxApi::Endpoints::Rpc
  def permanently_delete(path, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::Restore < DropboxApi::Endpoints::Rpc
  def restore(path, rev); end
end
class DropboxApi::Endpoints::Files::SaveUrl < DropboxApi::Endpoints::Rpc
  def save_url(path, url); end
end
class DropboxApi::Endpoints::Files::SaveUrlCheckJobStatus < DropboxApi::Endpoints::Rpc
  def save_url_check_job_status(job_id); end
end
class DropboxApi::Endpoints::Files::Search < DropboxApi::Endpoints::Rpc
  def search(query, path = nil, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::Upload < DropboxApi::Endpoints::ContentUpload
  def upload(path, content, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::UploadSessionStart < DropboxApi::Endpoints::ContentUpload
  def upload_session_start(content, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::UploadSessionAppendV2 < DropboxApi::Endpoints::ContentUpload
  def upload_session_append_v2(cursor, content, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::UploadSessionFinish < DropboxApi::Endpoints::ContentUpload
  def upload_session_finish(cursor, commit, content = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Files::DeleteBatchCheck < DropboxApi::Endpoints::Rpc
  def delete_batch_check(async_job_id); end
end
class DropboxApi::Endpoints::Files::DeleteBatch < DropboxApi::Endpoints::Rpc
  def delete_batch(entries); end
end
class DropboxApi::Endpoints::Files::CreateFolderBatchCheck < DropboxApi::Endpoints::Rpc
  def create_folder_batch_check(async_job_id); end
end
module DropboxApi::Endpoints::Sharing
end
class DropboxApi::Endpoints::Sharing::AddFileMember < DropboxApi::Endpoints::Rpc
  def add_file_member(file, members, options = nil); end
  def build_members_param(members); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Sharing::ListFileMembers < DropboxApi::Endpoints::Rpc
  def list_file_members(file_id, actions = nil, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Sharing::AddFolderMember < DropboxApi::Endpoints::Rpc
  def add_folder_member(folder_id, members, options = nil); end
  def build_members_param(members); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Sharing::ListFolderMembers < DropboxApi::Endpoints::Rpc
  def list_folder_members(folder_id, actions = nil, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Sharing::RevokeSharedLink < DropboxApi::Endpoints::Rpc
  def revoke_shared_link(url); end
end
class DropboxApi::Endpoints::Sharing::ShareFolder < DropboxApi::Endpoints::Rpc
  def share_folder(path, options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Sharing::ListSharedLinks < DropboxApi::Endpoints::Rpc
  def list_shared_links(options = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Sharing::CreateSharedLinkWithSettings < DropboxApi::Endpoints::Rpc
  def create_shared_link_with_settings(path, settings = nil); end
  include DropboxApi::OptionsValidator
end
class DropboxApi::Endpoints::Sharing::UnshareFile < DropboxApi::Endpoints::Rpc
  def unshare_file(file); end
end
class DropboxApi::Endpoints::Sharing::GetSharedLinkMetadata < DropboxApi::Endpoints::Rpc
  def get_shared_link_metadata(preview_link, options = nil); end
  include DropboxApi::OptionsValidator
end
module DropboxApi::Endpoints::Users
end
class DropboxApi::Endpoints::Users::GetAccount < DropboxApi::Endpoints::Rpc
  def get_account(account_id); end
end
class DropboxApi::Endpoints::Users::GetAccountBatch < DropboxApi::Endpoints::Rpc
  def get_account_batch(account_ids); end
end
class DropboxApi::Endpoints::Users::GetCurrentAccount < DropboxApi::Endpoints::Rpc
  def get_current_account; end
end
class DropboxApi::Endpoints::Users::GetSpaceUsage < DropboxApi::Endpoints::Rpc
  def get_space_usage; end
end
class DropboxApi::Endpoints::Files::CreateFileRequest < DropboxApi::Endpoints::Rpc
  def create_file_request(title, destination); end
end
class DropboxApi::ChunkedUploader
  def finish; end
  def init_commit_info(path, options); end
  def initialize(client, path, i_stream, options = nil); end
  def start; end
  def upload; end
  include DropboxApi::OptionsValidator
end

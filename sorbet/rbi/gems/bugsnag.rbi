# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/bugsnag/all/bugsnag.rbi
#
# bugsnag-6.12.1
module Bugsnag
  def self.abort_reason(exception, auto_notify); end
  def self.at_exit_handler_installed?; end
  def self.before_notify_callbacks; end
  def self.check_endpoint_setup; end
  def self.check_key_valid; end
  def self.configuration; end
  def self.configure(validate_api_key = nil); end
  def self.deliver_notification?(exception, auto_notify); end
  def self.leave_breadcrumb(name, meta_data = nil, type = nil, auto = nil); end
  def self.load_integration(integration); end
  def self.load_integrations; end
  def self.notify(exception, auto_notify = nil, &block); end
  def self.register_at_exit; end
  def self.session_tracker; end
  def self.start_session; end
end
class Bugsnag::MiddlewareStack
  def disable(*middlewares); end
  def initialize; end
  def insert_after(after, new_middleware); end
  def insert_before(before, new_middleware); end
  def method_missing(method, *args, &block); end
  def middleware_procs; end
  def run(report); end
  def use(new_middleware); end
end
module Bugsnag::Middleware
end
class Bugsnag::Middleware::Callbacks
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::ExceptionMetaData
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::IgnoreErrorClass
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::SuggestionData
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::ClassifyError
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::SessionData
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::Breadcrumbs
  def call(report); end
  def initialize(next_callable); end
end
module Bugsnag::Utility
end
class Bugsnag::Utility::CircularBuffer
  def <<(item); end
  def each(&block); end
  def initialize(max_items = nil); end
  def max_items; end
  def max_items=(new_max_items); end
  def trim_buffer; end
  include Enumerable
end
module Bugsnag::Breadcrumbs
end
class Bugsnag::Configuration
  def api_key; end
  def api_key=(arg0); end
  def app_type; end
  def app_type=(arg0); end
  def app_version; end
  def app_version=(arg0); end
  def auto_capture_sessions; end
  def auto_capture_sessions=(arg0); end
  def auto_notify; end
  def auto_notify=(arg0); end
  def before_breadcrumb_callbacks; end
  def before_breadcrumb_callbacks=(arg0); end
  def breadcrumbs; end
  def ca_file; end
  def ca_file=(arg0); end
  def clear_request_data; end
  def debug(message); end
  def default_delivery_method=(delivery_method); end
  def default_hostname; end
  def delivery_method; end
  def delivery_method=(delivery_method); end
  def disable_sessions; end
  def enable_sessions; end
  def enabled_automatic_breadcrumb_types; end
  def enabled_automatic_breadcrumb_types=(arg0); end
  def endpoint; end
  def endpoint=(new_notify_endpoint); end
  def hostname; end
  def hostname=(arg0); end
  def ignore_classes; end
  def ignore_classes=(arg0); end
  def info(message); end
  def initialize; end
  def internal_middleware; end
  def internal_middleware=(arg0); end
  def logger; end
  def logger=(arg0); end
  def max_breadcrumbs; end
  def max_breadcrumbs=(new_max_breadcrumbs); end
  def meta_data_filters; end
  def meta_data_filters=(arg0); end
  def middleware; end
  def middleware=(arg0); end
  def notify_endpoint; end
  def notify_release_stages; end
  def notify_release_stages=(arg0); end
  def parse_proxy(uri); end
  def project_root; end
  def project_root=(arg0); end
  def proxy_host; end
  def proxy_host=(arg0); end
  def proxy_password; end
  def proxy_password=(arg0); end
  def proxy_port; end
  def proxy_port=(arg0); end
  def proxy_user; end
  def proxy_user=(arg0); end
  def release_stage; end
  def release_stage=(arg0); end
  def request_data; end
  def runtime_versions; end
  def runtime_versions=(arg0); end
  def send_code; end
  def send_code=(arg0); end
  def send_environment; end
  def send_environment=(arg0); end
  def session_endpoint; end
  def session_endpoint=(new_session_endpoint); end
  def set_endpoints(new_notify_endpoint, new_session_endpoint); end
  def set_request_data(key, value); end
  def should_notify_release_stage?; end
  def timeout; end
  def timeout=(arg0); end
  def track_sessions; end
  def track_sessions=(arg0); end
  def unset_request_data(key, value); end
  def valid_api_key?; end
  def warn(message); end
end
module Bugsnag::MetaData
  def bugsnag_context; end
  def bugsnag_context=(arg0); end
  def bugsnag_grouping_hash; end
  def bugsnag_grouping_hash=(arg0); end
  def bugsnag_meta_data; end
  def bugsnag_meta_data=(arg0); end
  def bugsnag_user_id; end
  def bugsnag_user_id=(arg0); end
end
class Bugsnag::Stacktrace
  def code(file, line_number, num_lines = nil); end
  def initialize(backtrace, configuration); end
  def to_a; end
end
class Bugsnag::Report
  def add_tab(name, value); end
  def api_key; end
  def api_key=(arg0); end
  def app_type; end
  def app_type=(arg0); end
  def app_version; end
  def app_version=(arg0); end
  def as_json; end
  def breadcrumbs; end
  def breadcrumbs=(arg0); end
  def configuration; end
  def configuration=(arg0); end
  def context; end
  def context=(arg0); end
  def delivery_method; end
  def delivery_method=(arg0); end
  def error_class(exception); end
  def exceptions; end
  def exceptions=(arg0); end
  def generate_exception_list; end
  def generate_raw_exceptions(exception); end
  def grouping_hash; end
  def grouping_hash=(arg0); end
  def headers; end
  def hostname; end
  def hostname=(arg0); end
  def ignore!; end
  def ignore?; end
  def initialize(exception, passed_configuration, auto_notify = nil); end
  def meta_data; end
  def meta_data=(arg0); end
  def raw_exceptions; end
  def raw_exceptions=(arg0); end
  def release_stage; end
  def release_stage=(arg0); end
  def remove_tab(name); end
  def request_data; end
  def runtime_versions; end
  def runtime_versions=(arg0); end
  def session; end
  def session=(arg0); end
  def severity; end
  def severity=(arg0); end
  def severity_reason; end
  def severity_reason=(arg0); end
  def summary; end
  def unhandled; end
  def user; end
  def user=(arg0); end
end
class Bugsnag::Cleaner
  def clean_object(obj); end
  def clean_string(str); end
  def clean_url(url); end
  def filters_match?(key); end
  def filters_match_deeply?(key, scope); end
  def initialize(filters); end
  def self.clean_object_encoding(obj); end
  def traverse_object(obj, seen, scope); end
end
module Bugsnag::Helpers
  def self.deep_merge!(l_hash, r_hash); end
  def self.deep_merge(l_hash, r_hash); end
  def self.extract_exception(payload); end
  def self.get_payload_length(value); end
  def self.is_json_raw_type?(value); end
  def self.payload_too_long?(value); end
  def self.remove_metadata_from_events(object); end
  def self.trim_as_string(text); end
  def self.trim_if_needed(value); end
  def self.trim_metadata(payload); end
  def self.trim_stacktrace_code(payload); end
  def self.trim_stacktrace_functions(payload); end
  def self.trim_strings_in_array(collection); end
  def self.trim_strings_in_hash(hash); end
  def self.trim_strings_in_value(value); end
  def self.truncate_array(array); end
  def self.truncate_arrays_in_hash(hash); end
  def self.truncate_arrays_in_value(value); end
end
class Bugsnag::SessionTracker
  def add_session(min); end
  def create_session; end
  def deliver(session_payload); end
  def initialize; end
  def self.get_current_session; end
  def self.set_current_session(session); end
  def send_sessions; end
  def session_counts; end
  def start_delivery_thread; end
  def start_session; end
end
module Bugsnag::Delivery
  def self.[](name); end
  def self.delivery_methods; end
  def self.register(name, delivery_method); end
end
class Bugsnag::Delivery::Synchronous
  def self.default_headers; end
  def self.deliver(url, body, configuration, options = nil); end
  def self.path(uri); end
  def self.request(url, body, configuration, options); end
end
class Bugsnag::Delivery::ThreadQueue < Bugsnag::Delivery::Synchronous
  def self.deliver(url, body, configuration, options = nil); end
  def self.start_once!; end
end
class Bugsnag::Rack
  def call(env); end
  def initialize(app); end
end
class Bugsnag::Middleware::RackRequest
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::WardenUser
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::ClearanceUser
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::Rails3Request
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::Sidekiq
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::Mailman
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::Rake
  def call(report); end
  def initialize(bugsnag); end
end
class Bugsnag::Middleware::DelayedJob
  def call(report); end
  def construct_job_payload(payload); end
  def initialize(bugsnag); end
end
class Bugsnag::Breadcrumbs::Validator
  def initialize(configuration); end
  def valid_meta_data_type?(value); end
  def validate(breadcrumb); end
end
class Bugsnag::Breadcrumbs::Breadcrumb
  def auto; end
  def ignore!; end
  def ignore?; end
  def initialize(name, type, meta_data, auto); end
  def meta_data; end
  def meta_data=(arg0); end
  def name; end
  def name=(arg0); end
  def timestamp; end
  def to_h; end
  def type; end
  def type=(arg0); end
end
module Bugsnag::Rails
end
class Bugsnag::Railtie < Rails::Railtie
  def event_subscription(event); end
end
module Bugsnag::Rails::ActiveRecordRescue
  def run_callbacks(kind, *args, &block); end
end
